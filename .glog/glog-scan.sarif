{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "e26f9f0d-31a3-3a76-b47e-7453bdc500fb",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. These functions are often prohibited in secure coding standards. One such function is `fprintf`.\n\nThe `fprintf` function can lead to vulnerabilities if not used correctly. It can cause format string vulnerabilities if the format string is not a constant, or if it's composed dynamically, it can lead to buffer overflows if the output is larger than the buffer.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to `fprintf` such as `snprintf` or `vsnprintf`. These functions include the size of the buffer as an argument, which can prevent buffer overflows.\n\n## Source Code Fix Recommendation\n\nInstead of using `fprintf`, use `snprintf` or `vsnprintf`. Here is an example:\n\n```cpp\n#include <stdio.h>\n\nvoid safe_function(const char* format, ...) {\n    char buffer[1024];\n    va_list args;\n    va_start(args, format);\n    vsnprintf(buffer, sizeof(buffer), format, args);\n    va_end(args);\n    // Now buffer contains the formatted string.\n    // You can write it to file with fwrite or similar\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library:\n\n- stdio.h\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n\n## CWE\n\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "adff970f-3292-301e-87d6-bb8b99b56bf8",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Identified\" is a vulnerability that arises when a program uses a function that can potentially lead to a security risk. In this case, the function `atoi()` is used, which is a standard C library function that converts a string into an integer. The problem with `atoi()` is that it does not perform any error checking. If the input string cannot be converted into an integer, it returns zero, which can lead to unexpected behavior.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives that perform error checking. In C++, the `std::stoi()` function can be used, which throws an exception if the conversion fails. This allows the program to handle the error in a controlled manner.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi()` function with `std::stoi()`. Here is the fixed code:\n\n```cpp\ntry {\n    TDEGREE = std::stoi(argv[1]);\n} catch (std::invalid_argument& e) {\n    // handle error\n} catch (std::out_of_range& e) {\n    // handle error\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library:\n\n- `<string>`: This library is required for the `std::stoi()` function.\n\n## References\n\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "61ff0a0a-cd7b-3c24-bb04-8ae17069bb98",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. These functions are often prohibited in secure coding standards. One such function is `fprintf`.\n\nThe `fprintf` function can lead to vulnerabilities if not used correctly. It can cause format string vulnerabilities if the format string is not a constant, or if it's composed dynamically, it can lead to buffer overflows if the output is larger than the buffer.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to `fprintf` such as `snprintf` or `vsnprintf`. These functions include the size of the buffer as an argument, which can prevent buffer overflows.\n\n## Source Code Fix Recommendation\n\nInstead of using `fprintf`, use `snprintf` or `vsnprintf`. Here is an example:\n\n```cpp\n#include <stdio.h>\n\nvoid safe_function(const char* format, ...) {\n    char buffer[1024];\n    va_list args;\n    va_start(args, format);\n    vsnprintf(buffer, sizeof(buffer), format, args);\n    va_end(args);\n    // Now buffer contains the formatted string.\n    // You can write it to file with fwrite or similar\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library:\n\n- stdio.h\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n\n## CWE\n\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "ce441aa6-b105-3ef7-bc5f-ff866824c36d",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure C library functions in C++ code. These functions are often prone to buffer overflow attacks, format string vulnerabilities, or integer overflow attacks. In this case, the `atoi()` function is used, which can lead to integer overflow if the input is not properly validated.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to these functions, or to implement proper input validation and error handling. For the `atoi()` function, a safer alternative would be `strtol()` or `sscanf()`, which provide error checking.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi()` function with `strtol()` or `sscanf()`. Here is an example of how to use `strtol()`:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nchar *endptr;\nlong int depth = strtol(argv[2], &endptr, 10);\n\nif (errno == ERANGE) {\n    // handle overflow\n} else if (endptr == argv[2]) {\n    // handle no digits were found\n} else {\n    TDEPTH = depth;\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: for `strtol()`\n- `<cerrno>`: for `errno`\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "faa9fecf-41c4-342c-8fa1-961ba3928dad",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. These functions are often prohibited in secure coding standards. One such function is `fprintf`.\n\nThe `fprintf` function can lead to vulnerabilities if not used correctly. It can cause format string vulnerabilities if the format string is not a constant, or if it's composed dynamically, it can lead to buffer overflows if the output is larger than the buffer.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to `fprintf` such as `snprintf` or `vsnprintf`. These functions include the size of the buffer as an argument, which can prevent buffer overflows.\n\n## Source Code Fix Recommendation\n\nInstead of using `fprintf`, use `snprintf` or `vsnprintf`. Here is an example:\n\n```cpp\n#include <stdio.h>\n\nvoid safe_function(const char* format, ...) {\n    char buffer[1024];\n    va_list args;\n    va_start(args, format);\n    vsnprintf(buffer, sizeof(buffer), format, args);\n    va_end(args);\n    // Now buffer contains the formatted string.\n    // You can write it to file with fwrite or similar\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library:\n\n- stdio.h\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n\n## CWE\n\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "c47d0a89-4d05-3aee-a58b-8fa109c32881",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe \"Prohibited C Function Identified\" vulnerability refers to the use of certain C functions that are considered unsafe due to their potential to cause buffer overflows, format string vulnerabilities, or other security issues. In this case, the function `atoi()` is used, which can lead to integer overflow or underflow if the input is not properly validated.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to these functions, such as `strtol()` or `sscanf()`, which provide error checking. Additionally, always validate and sanitize user input to prevent malicious data from causing unexpected behavior.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi()` function with `strtol()`. Here is an example of how to do this:\n\n```cpp\n#include <cstdlib> // for strtol\n#include <climits> // for LONG_MAX and LONG_MIN\n\nchar *end;\nlong gpu_agents_used = strtol(argv[1], &end, 10);\n\nif (end == argv[1] || *end != '\\0' || errno == ERANGE || gpu_agents_used > INT_MAX || gpu_agents_used < INT_MIN) {\n    // handle error\n}\n```\n\nIn this code, `strtol()` is used to convert the string to a long integer. The function checks if the conversion was successful, if there were any leftover characters, if the number is out of range, or if the number is too large or too small to fit into an int.\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: for `strtol()`\n- `<climits>`: for `LONG_MAX` and `LONG_MIN`\n- `<cerrno>`: for `errno`\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "0bede87a-4cfd-36c8-891d-7d6be667f212",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Identified\" is a vulnerability that arises when a C++ program uses a function that is considered unsafe due to its potential to cause buffer overflows, format string vulnerabilities, or other types of security issues. In this case, the `fopen` function is used, which can lead to vulnerabilities if the file name or mode is not properly validated or controlled.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to the `fopen` function. For instance, consider using the `fopen_s` function, which is a more secure version of `fopen`. It's also important to validate and control the file name and mode used with the `fopen` function to prevent potential security issues.\n\n## Source Code Fix Recommendation\n\nHere is a safer version of the code using `fopen_s`:\n\n```cpp\nFILE* fpo = NULL;\nerrno_t err = fopen_s(&fpo, \"result.txt\", \"w\");\nif (err != 0) {\n    // Handle error\n}\n```\n\n## Library Dependencies\n\nThe code example requires the `stdio.h` library.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)\n\nPlease note that the links provided are active and accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "7d2571d1-5219-39f1-b091-6737a199d268",
              "help": {
                "text": "",
                "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Weak or Non-Cryptographic Random Number Generators\" refers to the use of weak random number generators or non-cryptographic random number generators that can lead to predictable values and hence can be exploited by an attacker. The `rand()` function in C++ is a weak random number generator as it uses a deterministic algorithm and can produce predictable numbers if the seed is known.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a strong cryptographic random number generator. In C++, the `<random>` library provides non-deterministic random number generators such as `std::random_device`, which should be used instead of `rand()`.\n\n## Source Code Fix Recommendation\n\nReplace the `rand()` function with `std::random_device`. Here is how you can do it:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> distr(1, 10);\n\ninput_itemsets[i*max_cols] = distr(gen);\n```\n\n## Library Dependencies\n\nThe code example requires the `<random>` library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
              },
              "properties": {
                "tags": [
                  "DS148264",
                  "7d2571d1-5219-39f1-b091-6737a199d268"
                ]
              }
            },
            {
              "id": "09415db9-faf4-3bb9-abf2-a5051c8cce1e",
              "help": {
                "text": "",
                "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of weak or non-cryptographic random number generators that can lead to predictable or easily guessable values. This can be exploited by attackers to predict the outcome of the program, leading to potential security risks.\n\nThe `rand()` function in C++ is a weak random number generator as it uses a deterministic algorithm. This means that given the same seed, it will produce the same sequence of numbers every time. This predictability can be exploited by an attacker.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a strong, cryptographic random number generator instead of `rand()`. In C++, you can use the `<random>` library which provides a variety of random number generators that are more secure and less predictable than `rand()`.\n\n## Source Code Fix Recommendation\n\nReplace the `rand()` function with a secure random number generator from the `<random>` library. Here is an example of how to do this:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> distr(1, 10);\n\ninput_itemsets[j] = distr(gen);\n```\n\nIn this code, `std::random_device` is a non-deterministic random number generator, and `std::mt19937` is a Mersenne Twister: a strong pseudo-random number generator. `std::uniform_int_distribution<>` produces integer values evenly distributed across a range.\n\n## Library Dependencies\n\nThe code example requires the `<random>` library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
              },
              "properties": {
                "tags": [
                  "DS148264",
                  "09415db9-faf4-3bb9-abf2-a5051c8cce1e"
                ]
              }
            },
            {
              "id": "8caab500-ed16-3d04-bd49-4e366dc08477",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `memcpy` function in C++ is used to copy a block of memory from one location to another. This function does not check for the size of the destination buffer, which can lead to buffer overflow if the source is larger than the destination. This is a common vulnerability in C++ programming that can lead to serious security issues such as code execution, denial of service, or information disclosure.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to always ensure that the destination buffer is large enough to hold the data being copied. This can be done by checking the size of the source and destination before calling `memcpy`. Alternatively, use functions that limit the amount of data copied to the size of the destination buffer, such as `strncpy` or `memcpy_s`.\n\n## Source Code Fix Recommendation\n\nReplace the `memcpy` function with `memcpy_s`, which includes an additional parameter for the size of the destination buffer. This ensures that the function does not write more data than the buffer can hold, preventing buffer overflow.\n\n```cpp\nsize_t size = max_cols * max_rows * sizeof(int);\nif (size <= sizeof(output_itemsets)) {\n    memcpy_s(output_itemsets, size, input_itemsets, size);\n} else {\n    // Handle error\n}\n```\n\n## Library Dependencies\n\nThe `memcpy` and `memcpy_s` functions are part of the C Standard Library, so no additional libraries are needed.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')](https://cwe.mitre.org/data/definitions/120.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "c2738340-f1ba-3a1d-af44-b5cec2c30d58",
              "help": {
                "text": "",
                "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of weak or non-cryptographic random number generators that can lead to predictable or easily guessable values. This can be exploited by attackers to predict the outcome of the program, leading to potential security risks.\n\nThe `rand()` function in C++ is a weak random number generator as it uses a deterministic algorithm. This means that given the same seed, it will produce the same sequence of numbers every time. This predictability can be exploited by an attacker.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a strong, cryptographic random number generator instead of `rand()`. In C++, you can use the `<random>` library which provides a variety of random number generators that are more secure and less predictable than `rand()`.\n\n## Source Code Fix Recommendation\n\nReplace the `rand()` function with a secure random number generator from the `<random>` library. Here is an example of how to do this:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> distr(1, 10);\n\ninput_itemsets[j] = distr(gen);\n```\n\nIn this code, `std::random_device` is a non-deterministic random number generator, and `std::mt19937` is a Mersenne Twister: a strong pseudo-random number generator. `std::uniform_int_distribution<>` produces integer values evenly distributed across a range.\n\n## Library Dependencies\n\nThe code example requires the `<random>` library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
              },
              "properties": {
                "tags": [
                  "DS148264",
                  "c2738340-f1ba-3a1d-af44-b5cec2c30d58"
                ]
              }
            },
            {
              "id": "c23274e6-b47c-3214-be9b-840e490b9cc2",
              "help": {
                "text": "",
                "markdown": "## Description\n\nIn C++ programming, using system time or a static value for randomness seeding can lead to predictable randomness, which is a security vulnerability. This is because the seed value used by the `srand()` function determines the sequence of pseudo-random numbers generated by the `rand()` function. If the seed value is known or predictable, an attacker can predict the sequence of pseudo-random numbers, which can lead to various security vulnerabilities, such as predictability in cryptographic operations.\n\nIn the provided code snippet, `srand(7)` uses a static value (7) as the seed. This means that every time the program runs, the sequence of pseudo-random numbers generated by `rand()` will be the same.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a truly random value as the seed for `srand()`. This can be obtained from a reliable source of randomness provided by the operating system, such as `/dev/urandom` on Unix-like systems or `CryptGenRandom` on Windows.\n\n## Source Code Fix Recommendation\n\nHere is a way to fix the vulnerability in the provided code snippet:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\n```\n\nIn this code, `std::random_device` is a uniformly-distributed integer random number generator that produces non-deterministic random numbers. `std::mt19937` is a Mersenne Twister pseudo-random generator of 32-bit numbers with a state size of 19937 bits.\n\n## Library Dependencies\n\nThe code example requires the `<random>` library.\n\n## References\n\n- [CWE-330: Use of Insufficiently Random Values](https://cwe.mitre.org/data/definitions/330.html)"
              },
              "properties": {
                "tags": [
                  "DS149435"
                ]
              }
            },
            {
              "id": "ba75c718-3bb0-3665-bb23-1ac4a63bc44a",
              "help": {
                "text": "",
                "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Weak or Non-Cryptographic Random Number Generators\" refers to the use of weak random number generators or non-cryptographic random number generators that can lead to predictable values and hence can be exploited by an attacker. The `rand()` function in C++ is a weak random number generator as it uses a deterministic algorithm and can produce predictable numbers if the seed is known.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a strong cryptographic random number generator. In C++, the `<random>` library provides non-deterministic random number generators such as `std::random_device`, which should be used instead of `rand()`.\n\n## Source Code Fix Recommendation\n\nReplace the `rand()` function with `std::random_device`. Here is how you can do it:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> distr(1, 10);\n\ninput_itemsets[i*max_cols] = distr(gen);\n```\n\n## Library Dependencies\n\nThe code example requires the `<random>` library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
              },
              "properties": {
                "tags": [
                  "DS148264",
                  "ba75c718-3bb0-3665-bb23-1ac4a63bc44a"
                ]
              }
            },
            {
              "id": "55cebe43-78a7-3b63-900f-af3b3bd17bd2",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of certain C standard library functions that are considered unsafe due to their potential to cause buffer overflows, format string vulnerabilities, or other issues that can lead to arbitrary code execution or denial of service. In this case, the function `atoi()` is used, which can lead to integer overflow or underflow if the input is not properly validated.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to these functions, such as `strtol()` or `sscanf()`, which provide error checking. Additionally, always validate and sanitize user input to prevent unexpected behavior.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi()` function with `strtol()`. Here is the fixed code:\n\n```cpp\n#include <cstdlib> // for strtol and NULL\n\nchar *p;\nlong converted = strtol(argv[1], &p, 10);\nif (*p) {\n    // conversion failed because the input wasn't a number\n} else {\n    if (converted%16!=0) {\n        // original condition here\n    }\n}\n```\n\n## Library Dependencies\n\nThe code example requires the `cstdlib` library.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-community/attacks/Buffer_overflow_attack)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "0da2cf5d-3565-3a9f-a5f5-90b91e38c365",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, integer overflows, etc. In this case, the function `atoi()` is used, which is a standard C library function that converts a string to an integer. The problem with `atoi()` is that it does not handle errors well. If the input string cannot be converted into an integer, it returns zero, which can lead to unexpected behavior.\n\n## Mitigation Advice\n\nAvoid using `atoi()`. Instead, use functions that can handle errors properly. In C++, you can use `std::stoi()`, which throws an exception if the conversion fails. Always validate and sanitize user input to prevent injection attacks.\n\n## Source Code Fix Recommendation\n\nReplace `atoi()` with `std::stoi()`. Here is the fixed code:\n\n```cpp\n#include <string>\n#include <cstdlib>\n\ntry {\n    task_sze = std::stoi(argv[3]);\n} catch (std::invalid_argument& e) {\n    // handle error\n} catch (std::out_of_range& e) {\n    // handle error\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<string>`: This is a standard C++ library that provides support for strings.\n- `<cstdlib>`: This is a standard C library that provides general purpose functions, including `std::stoi()`.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "0c962dd4-7d82-3428-a5d6-45d8382d3734",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other issues. In this case, the function `atoi()` is used, which can lead to integer overflow or underflow if the input is not properly validated.\n\nThe `atoi()` function converts a string to an integer. It does not check for valid input and does not handle errors, which can lead to undefined behavior if the input string does not represent a valid integer.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives that provide error checking. In C++, the `std::stoi()` function can be used as it throws an exception if the conversion cannot be performed.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi()` function with `std::stoi()`. Here is the corrected code:\n\n```cpp\ntry {\n    penalty = std::stoi(argv[2]);\n} catch (std::invalid_argument& e) {\n    // handle error\n} catch (std::out_of_range& e) {\n    // handle error\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library:\n\n- `<cstdlib>` for `atoi()`\n- `<string>` for `std::stoi()`\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "935e71b9-3c11-395a-9c25-7ad24d5c092b",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that arises when a program uses a function that can lead to a security risk. In this case, the function `atoi()` is used, which is a standard C library function that converts a string to an integer. The problem with `atoi()` is that it does not perform any error checking. If the input string cannot be converted to an integer, it returns zero, which can lead to unexpected behavior.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use functions that perform error checking. In C++, the `std::stoi()` function can be used instead of `atoi()`. This function throws an exception if the conversion fails, which can be caught and handled appropriately.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi()` function with `std::stoi()`. Here is the corrected code:\n\n```cpp\ntry {\n    max_cols = std::stoi(argv[1]);\n} catch (std::invalid_argument& e) {\n    // handle error\n} catch (std::out_of_range& e) {\n    // handle error\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library:\n\n- `<string>`: This library is needed for the `std::stoi()` function.\n\n## OWASP Resources\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-628: Function Call with Incorrectly Specified Arguments](https://cwe.mitre.org/data/definitions/628.html)\n\nPlease note that the links provided are active and accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "33dd4fe4-d5bf-38be-b6f6-18adb2d1e5f1",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Identified\" is a vulnerability that arises when a program uses a function that can lead to a security risk. In this case, the function `atoi()` is used, which can lead to integer overflow or underflow. This function does not perform any error checking, so it can lead to undefined behavior if the input is not a valid integer.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to `atoi()`, such as `strtol()` or `sscanf()`, which provide error checking. It is also important to validate and sanitize all user input to prevent injection attacks.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi()` function with `strtol()`. Here is an example of how to do this:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nchar *endptr;\nlong int max_rows = strtol(argv[1], &endptr, 10);\n\nif (errno == ERANGE) {\n    // handle overflow/underflow\n} else if (endptr == argv[1]) {\n    // handle no digits were found\n} else {\n    // handle additional error checking\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: This library is required for the `strtol()` function.\n- `<cerrno>`: This library is required to check for overflow and underflow errors.\n\n## References\n\n- [OWASP Prohibited C Functions](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html#prohibited-c-library-functions)\n- [CWE-190: Integer Overflow or Wraparound](https://cwe.mitre.org/data/definitions/190.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "97ee3bef-92d1-39c9-9901-9468a6665a7e",
              "help": {
                "text": "",
                "markdown": "This finding is classified as a genuine vulnerability because the analysis identified a risk of undefined behavior due to possible overlap between the source and destination memory regions in the memory copy operation. The destination and source pointers may refer to overlapping memory, as indicated by the dataflow analysis. Additionally, there is no explicit check to ensure that the source pointer is not null, which could also lead to undefined behavior. The destination pointer is not likely to be null, but the absence of bounds checks or overlap guards increases the risk. The use of a generic size variable for the copy length, without clear evidence that it is derived from the destination's capacity, further increases the risk of buffer overflows or memory corruption. These factors together indicate a high-confidence, actionable issue that should be addressed to prevent potential security vulnerabilities or program crashes.\n\n## In Context Remediation\nTo prevent undefined behavior when copying memory, ensure that the source and destination memory regions do not overlap. If overlap is possible, use `memmove` instead of `memcpy`, as `memmove` is designed to handle overlapping regions safely. Additionally, add explicit null pointer checks for both source and destination before performing the copy to avoid null pointer dereference.\n\n```cpp\nif (temp_host_ptr != nullptr && src != nullptr) {\n    memmove(temp_host_ptr, src, size); // Use memmove for possible overlap\n}\n```\n\nIf you are certain that overlap cannot occur, document this assumption clearly and consider adding runtime assertions to enforce it:\n\n```cpp\nassert((temp_host_ptr + size <= src) || (src + size <= temp_host_ptr)); // Ensure no overlap\nif (temp_host_ptr != nullptr && src != nullptr) {\n    memcpy(temp_host_ptr, src, size);\n}\n```\n\n## References\n- [OWASP C-Based Toolchain Hardening Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)\n- [CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')](https://cwe.mitre.org/data/definitions/120.html)\n- [CWE-787: Out-of-bounds Write](https://cwe.mitre.org/data/definitions/787.html)\n- [OWASP Buffer Overflow](https://owasp.org/www-community/vulnerabilities/Buffer_Overflow)\n\n___\n"
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "7d7eca40-5987-3b73-a86a-884a7236605d",
              "help": {
                "text": "",
                "markdown": "This finding is classified as a genuine vulnerability because the analysis detected a risk of undefined behavior due to possible overlap between the source and destination memory regions in the memory copy operation. The verdict is marked as genuine, and the classification explicitly states there is a risk of undefined behavior. The dataflow analysis indicates that the source and destination may refer to overlapping memory, which is not allowed for the standard memory copy function used here. There are no explicit checks or guards in the code to prevent this overlap, and the destination and source are both pointers without clear bounds or separation. The source and destination are also both confirmed to be non-null, so the main risk is the potential for overlapping memory regions, which can lead to unpredictable program behavior or data corruption.\n\n## In Context Remediation\nTo prevent undefined behavior when copying memory regions that may overlap, use a memory move function that is designed to handle overlapping regions safely. Replace the memory copy function with a memory move function, which guarantees correct behavior even if the source and destination overlap.\n\n```cpp\n// Before:\nmemcpy(temp_host_ptr, src, size);\n\n// After:\nmemmove(temp_host_ptr, src, size);\n```\n\nThe memory move function will safely handle overlapping memory regions, preventing data corruption and undefined behavior. Always ensure that the size argument does not exceed the bounds of either the source or destination buffers.\n\n## References\n- [OWASP: Buffer Overflow](https://owasp.org/www-community/vulnerabilities/Buffer_Overflow)\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)\n- [CWE-787: Out-of-bounds Write](https://cwe.mitre.org/data/definitions/787.html)\n- [C-Based Toolchain Hardening Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n\n___\n"
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "9e856ad3-cb33-3703-9871-a267771a9c71",
              "help": {
                "text": "",
                "markdown": "This finding is classified as a genuine vulnerability because the analysis identified a risk of undefined behavior due to possible overlap between the source and destination memory regions in the memory copy operation. The verdict is supported by the classification indicating undefined behavior risk and the explicit 'GENUINE' verdict. The analysis determined that the source and destination may overlap based on data flow, which can cause unpredictable results with memory copy functions. Additionally, there is a risk that the source pointer may be null at this point, as there is no prior check ensuring it is non-null. The destination is less likely to be null, but the main concern is the overlap and potential null source. No explicit bounds or guards are present to mitigate these risks.\n\n## In Context Remediation\nTo prevent undefined behavior when copying memory, ensure that the source and destination memory regions do not overlap. If overlap is possible, use a function that safely handles overlapping regions, such as `memmove` instead of `memcpy`. Additionally, check that the source pointer is not null before performing the copy to avoid null pointer dereference.\n\nExample remediation:\n\n```cpp\nif (temp_host_ptr != nullptr && dst != temp_host_ptr) {\n    memmove(dst, temp_host_ptr, size);\n}\n```\n\nThis change replaces `memcpy` with `memmove`, which is safe for overlapping memory regions, and adds a null check for the source pointer. If you know that overlap is not possible by design, document this assumption and consider adding an assertion to enforce it at runtime.\n\n## References\n- [OWASP C-Based Toolchain Hardening Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)\n- [CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')](https://cwe.mitre.org/data/definitions/120.html)\n- [CWE-787: Out-of-bounds Write](https://cwe.mitre.org/data/definitions/787.html)\n- [OWASP Buffer Overflow](https://owasp.org/www-community/vulnerabilities/Buffer_Overflow)\n\n___\n"
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "d6c15241-a3c7-3d0f-99d9-92d0ab1403e0",
              "help": {
                "text": "",
                "markdown": "This finding is classified as a genuine vulnerability because the analysis identified a risk of undefined behavior due to possible overlap between the source and destination memory regions in the memory copy operation. The verdict is supported by the classification indicating undefined behavior risk and the explicit 'GENUINE' verdict. The analysis determined that the source and destination may overlap based on data flow, which can cause unpredictable results with memory copy functions. Additionally, there is a risk that the source pointer may be null at this point in the code, as there is no prior check ensuring it is non-null. The destination is less likely to be null, but the main concern is the potential for overlapping memory regions, which is not handled by the standard memory copy function. No explicit length or capacity checks are present, and the size argument is not derived from the destination's capacity, increasing the risk of incorrect memory operations. These factors indicate a high likelihood of a real issue that could lead to application instability or security vulnerabilities.\n\n## In Context Remediation\nTo prevent undefined behavior when the source and destination memory regions may overlap, replace the memory copy function with a memory move function, which is designed to handle overlapping regions safely. Additionally, ensure that the source pointer is not null before performing the operation to avoid null pointer dereference.\n\n```cpp\nif (temp_host_ptr != nullptr) {\n    memmove(dest, temp_host_ptr, size);\n}\n```\n\nThis change ensures that the operation is safe even if the source and destination overlap, and avoids undefined behavior due to null pointers.\n\n## References\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)\n- [CWE-787: Out-of-bounds Write](https://cwe.mitre.org/data/definitions/787.html)\n- [OWASP: Buffer Overflow](https://owasp.org/www-community/vulnerabilities/Buffer_Overflow)\n- [OWASP C-Based Toolchain Hardening Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n\n___\n"
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "601ee3fc-eccc-3ab5-a50f-94366a7c9197",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `memcpy` function in C++ is used to copy a block of memory from one location to another. This function is vulnerable to buffer overflow attacks if the size of the data being copied is larger than the size of the destination buffer. This can lead to corruption of valid data, crash the application, or in worst case scenarios, allow an attacker to execute arbitrary code.\n\nIn the provided code snippet, `memcpy(ptr, host_ptr, m->size())`, the vulnerability arises if `m->size()` is larger than the size of `ptr`. This would result in a buffer overflow.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always ensure that the destination buffer is large enough to hold the data being copied. This can be done by checking the size of the data and the size of the buffer before the `memcpy` operation.\n\n## Source Code Fix Recommendation\n\nA safer alternative to `memcpy` is `std::copy` from the `<algorithm>` library, which checks the boundaries of the destination buffer. Here is how you can use it:\n\n```cpp\n#include <algorithm>\n\n// ...\n\nstd::copy(host_ptr, host_ptr + m->size(), ptr);\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstring>` for `memcpy`\n- `<algorithm>` for `std::copy`\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [Common Weakness Enumeration (CWE-120)](https://cwe.mitre.org/data/definitions/120.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "3170153a-8278-34c1-859e-019b28fef4d6",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. These functions are often prohibited in secure coding standards. One such function is `fprintf`.\n\nThe `fprintf` function can lead to vulnerabilities if not used correctly. It can cause format string vulnerabilities if the format string is not a constant, or if it's composed dynamically, it can lead to buffer overflows if the output is larger than the buffer.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to `fprintf` such as `snprintf` or `vsnprintf`. These functions include the size of the buffer as an argument, which can prevent buffer overflows.\n\n## Source Code Fix Recommendation\n\nInstead of using `fprintf`, use `snprintf` or `vsnprintf`. Here is an example:\n\n```cpp\n#include <stdio.h>\n\nvoid safe_function(const char* format, ...) {\n    char buffer[1024];\n    va_list args;\n    va_start(args, format);\n    vsnprintf(buffer, sizeof(buffer), format, args);\n    va_end(args);\n    // Now buffer contains the formatted string.\n    // You can write it to file with fwrite or similar\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library:\n\n- stdio.h\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n\n## CWE\n\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "59975543-b789-33a4-9607-621d6d9a6f7f",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `memcpy` function in C++ is used to copy a block of memory from one location to another. This function is vulnerable to buffer overflow attacks if the size of the data being copied is larger than the size of the destination buffer. This can lead to corruption of data, crash of the program, or even execution of arbitrary code.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to always ensure that the size of the data being copied does not exceed the size of the destination buffer. This can be done by checking the size of the data and the size of the buffer before calling the `memcpy` function. Additionally, consider using safer functions that include buffer size checks, such as `strncpy` or `memcpy_s` (in C11).\n\n## Source Code Fix Recommendation\n\nHere is a simple fix for the vulnerability:\n\n```cpp\n#include <cstring>\n\nvoid safe_memcpy(void* dest, const void* src, size_t dest_size, size_t src_size) {\n    if (src_size <= dest_size) {\n        memcpy(dest, src, src_size);\n    } else {\n        // Handle the error, e.g., by throwing an exception or returning an error code\n    }\n}\n```\n\n## Library Dependencies\n\nThe `memcpy` function is part of the C standard library, so no additional libraries are needed.\n\n## References\n\n- [OWASP Buffer Overflow](https://owasp.org/www-community/vulnerabilities/Buffer_Overflow)\n- [CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')](https://cwe.mitre.org/data/definitions/120.html)"
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "b24ff205-d72b-397a-8bc0-a6f83669e616",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure or unsafe C library functions in C++ code. These functions are often prone to buffer overflow attacks, format string vulnerabilities, or other types of security issues. In the provided code, the `fprintf` function is used, which can lead to vulnerabilities if not used carefully.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to these functions. For instance, instead of `fprintf`, consider using `snprintf` or `vsnprintf` which are safer as they take the size of the buffer as an argument, preventing buffer overflow.\n\n## Source Code Fix Recommendation\n\nReplace the `fprintf` function with a safer alternative. For instance, you can use `snprintf` or `vsnprintf` as follows:\n\n```cpp\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"your string here\");\nfwrite(buffer, sizeof(char), sizeof(buffer), fp);\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies to execute properly:\n\n- hsa_cl.h\n- atmi.h\n- atmi_kl.h\n\nThese libraries are not standard C++ libraries and may need to be installed or linked separately.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)\n\nPlease note that the links provided are active and accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "2545d806-518e-3a28-b191-97f6fbab915c",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. These functions are often prohibited in secure coding standards. One such function is `fprintf`.\n\nThe `fprintf` function can lead to vulnerabilities if not used correctly. It can cause format string vulnerabilities if the format string is not a constant, or if it's composed dynamically, it can lead to buffer overflows if the output is larger than the buffer.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to `fprintf` such as `snprintf` or `vsnprintf`. These functions include the size of the buffer as an argument, which can prevent buffer overflows.\n\n## Source Code Fix Recommendation\n\nInstead of using `fprintf`, use `snprintf` or `vsnprintf`. Here is an example:\n\n```cpp\n#include <stdio.h>\n\nvoid safe_function(const char* format, ...) {\n    char buffer[1024];\n    va_list args;\n    va_start(args, format);\n    vsnprintf(buffer, sizeof(buffer), format, args);\n    va_end(args);\n    // Now buffer contains the formatted string.\n    // You can write it to file with fwrite or similar\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library:\n\n- stdio.h\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n\n## CWE\n\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "a9f33743-a173-3aaf-9eb6-69645b82676d",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe \"Prohibited C Function Identified\" vulnerability in C++ refers to the use of C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other issues. In the provided code, the `fprintf` function is used, which can lead to format string vulnerabilities if not used carefully.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to avoid using dangerous C standard library functions. Instead, use safer alternatives that perform bounds checking or other safety measures. For example, instead of `fprintf`, consider using `snprintf` or `asprintf`, which are safer as they check the size of the output buffer.\n\n## Source Code Fix Recommendation\n\nReplace the `fprintf` function with a safer alternative. For example:\n\n```cpp\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"Your format string\", your, variables);\nfwrite(buffer, sizeof(char), strlen(buffer), fp);\n```\n\n## Library Dependencies\n\nThe provided code appears to depend on the following libraries:\n\n- Standard C library (for `fprintf`)\n- HSA (Heterogeneous System Architecture) library (for `hsa_agent_dispatch_packet_t`, `hsa_queue_t`, `hsa_signal_t`, `hsa_queue_add_write_index_relaxed`)\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "be44c7ad-93b7-313f-a59e-3587eeb336f5",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of functions that are considered unsafe due to their potential to cause buffer overflow, format string vulnerabilities, or other types of security issues. In the provided code, the function `fprintf` is used, which can lead to format string vulnerabilities if not used carefully.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to these functions. For instance, instead of `fprintf`, consider using `snprintf` or `vsnprintf`, which allow you to specify the maximum number of characters to be written to the output string, thus preventing buffer overflow.\n\n## Source Code Fix Recommendation\n\nReplace the `fprintf` function with `snprintf` or `vsnprintf` as shown below:\n\n```cpp\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"Your format string\", your_variables);\nfwrite(buffer, sizeof(char), strlen(buffer), fp);\n```\n\n## Library Dependencies\n\nThe code example seems to be using the following libraries:\n\n- ATMI: The Heterogeneous System Architecture (HSA) Runtime for Multi-GPU systems.\n- HSA: Heterogeneous System Architecture.\n\nPlease ensure these libraries are installed and properly linked in your build system.\n\n## References\n\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)\n\nPlease note that the links provided are active and accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "e333977c-a625-31cf-a5c5-51765a001fcb",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" is a vulnerability that arises when a C++ program uses certain C standard library functions that are known to be insecure. These functions are often referred to as \"banned\" functions. One such function is `sprintf`.\n\nThe `sprintf` function is used to write formatted data to a string. However, it does not check the size of the destination buffer, which can lead to buffer overflow if the source data exceeds the size of the destination buffer. This can cause crashes, data corruption, and potentially allow an attacker to execute arbitrary code.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using the `sprintf` function. Instead, use safer alternatives that check the size of the destination buffer, such as `snprintf`.\n\n## Source Code Fix Recommendation\n\nReplace `sprintf` with `snprintf`. Here is an example:\n\n```cpp\n// Vulnerable code\nchar buffer[50];\nsprintf(buffer, \"%s\", someString);\n\n// Fixed code\nchar buffer[50];\nsnprintf(buffer, sizeof(buffer), \"%s\", someString);\n```\n\nIn the fixed code, `snprintf` checks that it does not write more than `sizeof(buffer)` characters, including the null terminator, preventing buffer overflow.\n\n## Library Dependencies\n\nThe `sprintf` and `snprintf` functions are part of the C standard library, so no additional library dependencies are required.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')](https://cwe.mitre.org/data/definitions/120.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "20c1a36f-abdf-3e41-ad89-aed1416c2b2e",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other issues. These functions are often prohibited in secure coding standards. The `fopen` function is one of these prohibited functions. It is used to open a file, but it does not check for errors that could lead to vulnerabilities.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to these prohibited functions. For `fopen`, a safer alternative could be `fopen_s` which is a part of the C11 standard. This function includes error handling and is therefore less likely to lead to vulnerabilities.\n\n## Source Code Fix Recommendation\n\nReplace the `fopen` function with `fopen_s`. Here is an example:\n\n```cpp\nFILE* file;\nerrno_t err = fopen_s(&file, \"file.txt\", \"r\");\nif (err != 0) {\n    // Handle error\n} else {\n    // Use file\n    fclose(file);\n}\n```\n\n## Library Dependencies\n\nThe code example requires the `stdio.h` library.\n\n## References\n\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "ca8bd930-fedc-3a72-8d43-03b87c37a659",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `memcpy` function in C++ is used to copy a block of memory from one location to another. It takes three arguments: a pointer to the destination, a pointer to the source, and the number of bytes to copy. The vulnerability arises when the size of the destination buffer is less than the number of bytes to be copied from the source buffer. This can lead to a buffer overflow, which can cause the program to crash or, in the worst case, allow an attacker to execute arbitrary code.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always ensure that the destination buffer is large enough to hold the data being copied from the source buffer. This can be done by checking the size of the destination buffer before calling `memcpy`. If the size of the source data is larger than the destination buffer, either increase the size of the destination buffer or reduce the amount of data being copied.\n\n## Source Code Fix Recommendation\n\nHere is an example of how to safely use `memcpy`:\n\n```cpp\n#include <cstring>\n\nvoid safe_memcpy(void *dest, size_t dest_size, void *src, size_t src_size) {\n    if (src_size <= dest_size) {\n        memcpy(dest, src, src_size);\n    } else {\n        // Handle the error, e.g., by throwing an exception or returning an error code\n    }\n}\n```\n\nIn this example, the size of the source data (`src_size`) is compared to the size of the destination buffer (`dest_size`) before `memcpy` is called. If `src_size` is larger than `dest_size`, the function does not call `memcpy` and instead handles the error.\n\n## Library Dependencies\n\nThe `memcpy` function is part of the C standard library, so no additional libraries are needed.\n\n## OWASP and CWE Links\n\n- [CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')](https://cwe.mitre.org/data/definitions/120.html)"
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "f85ffd77-5cf5-3717-9805-a1e2fa88c19c",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure C library functions in C++ code. These functions are often prone to buffer overflow attacks, format string vulnerabilities, or other types of security issues. In the provided code, the `fopen` function is used, which can lead to vulnerabilities if the file name is manipulated by an attacker.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to these functions. In the case of `fopen`, it is recommended to use file I/O functions provided by the C++ Standard Library, such as `std::fstream`. These functions provide better type safety and exception handling.\n\n## Source Code Fix Recommendation\n\nReplace the `fopen` function with `std::ofstream`. Here is the fixed code:\n\n```cpp\n#include <fstream>\n\nstd::ofstream fp_pifdefs_genw(g_output_pifdefs_filename.c_str());\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<fstream>`: This is a standard C++ library for file handling.\n\n## OWASP and CWE Links\n\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)\n\nPlease note that these links are active and accessible for anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "aa5d232d-6483-3d05-82dd-07e4b32ebe1b",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. These functions are often prohibited in secure coding standards. One such function is `fprintf`.\n\nThe `fprintf` function can lead to vulnerabilities if not used correctly. It can cause format string vulnerabilities if the format string is not a constant, or if it's composed dynamically, it can lead to buffer overflows if the output is larger than the buffer.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to `fprintf` such as `snprintf` or `vsnprintf`. These functions include the size of the buffer as an argument, which can prevent buffer overflows.\n\n## Source Code Fix Recommendation\n\nInstead of using `fprintf`, use `snprintf` or `vsnprintf`. Here is an example:\n\n```cpp\n#include <stdio.h>\n\nvoid safe_function(const char* format, ...) {\n    char buffer[1024];\n    va_list args;\n    va_start(args, format);\n    vsnprintf(buffer, sizeof(buffer), format, args);\n    va_end(args);\n    // Now buffer contains the formatted string.\n    // You can write it to file with fwrite or similar\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library:\n\n- stdio.h\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n\n## CWE\n\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "00c7272e-179c-3a2a-aa0c-cfb3301a2a53",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. These functions are often prohibited in secure coding standards. One such function is `fprintf`.\n\nThe `fprintf` function can lead to vulnerabilities if not used correctly. It can cause format string vulnerabilities if the format string is not a constant, or if it's composed dynamically, it can lead to buffer overflows if the output is larger than the buffer.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to `fprintf` such as `snprintf` or `vsnprintf`. These functions include the size of the buffer as an argument, which can prevent buffer overflows.\n\n## Source Code Fix Recommendation\n\nInstead of using `fprintf`, use `snprintf` or `vsnprintf`. Here is an example:\n\n```cpp\n#include <stdio.h>\n\nvoid safe_function(const char* format, ...) {\n    char buffer[1024];\n    va_list args;\n    va_start(args, format);\n    vsnprintf(buffer, sizeof(buffer), format, args);\n    va_end(args);\n    // Now buffer contains the formatted string.\n    // You can write it to file with fwrite or similar\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library:\n\n- stdio.h\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n\n## CWE\n\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "03eb2b88-3927-36cc-955d-815035af860f",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure C library functions in C++ code. These functions are often prone to buffer overflow attacks, format string vulnerabilities, or other types of security issues. In the provided code snippet, the `fopen` function is used, which can lead to vulnerabilities if the filename is manipulated by an attacker.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to these functions. For instance, instead of `fopen`, consider using `fopen_s` which is a safer version of `fopen`. Always validate and sanitize inputs to these functions to prevent any potential security issues.\n\n## Source Code Fix Recommendation\n\nHere is a safer version of the code using `fopen_s`:\n\n```cpp\nerrno_t err = fopen_s(&fp_pifdefs_genw, pifdefs_filename, \"w\");\nif (err != 0) {\n    // Handle error\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library:\n\n- `stdio.h`\n\n## References\n\n- [OWASP C++](https://owasp.org/www-community/attacks/Buffer_overflow_attack)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "fba316fd-8e3b-3c74-884c-87c952be232c",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcat` function in C++ is used to concatenate strings. However, it is considered unsafe because it does not perform bounds checking, and thus can lead to buffer overflow vulnerabilities. If the destination buffer is not large enough to contain the concatenated result, this can lead to overwriting of adjacent memory, leading to unpredictable program behavior, crashes, and potential code execution.\n\nThe specific vulnerability sink in the provided code is:\n\n```cpp\nstrcat(pifdefs_filename, \".pifdefs.c\");\n```\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use safer string handling functions that perform bounds checking, such as `strncat` or `strlcat`. These functions take an additional parameter specifying the maximum length of the destination buffer, preventing buffer overflow.\n\n## Source Code Fix Recommendation\n\nHere is a recommended fix for the provided code:\n\n```cpp\nstrncat(pifdefs_filename, \".pifdefs.c\", sizeof(pifdefs_filename) - strlen(pifdefs_filename) - 1);\n```\n\nThis code uses `strncat` to safely concatenate the strings, ensuring that the destination buffer is not overflowed.\n\n## Library Dependencies\n\nThe provided code requires the `<cstring>` library to execute properly.\n\n## OWASP and CWE Links\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)\n\nPlease note that these links are subject to change and may not always be accessible."
              },
              "properties": {
                "tags": [
                  "DS141863"
                ]
              }
            },
            {
              "id": "7bcce204-4d19-374f-bd93-02787a906208",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcpy` function in C++ is a standard library function that copies a string from source to destination. It is considered dangerous because it does not check the array bounds of the two strings, which can lead to buffer overflow vulnerabilities if the source string is larger than the destination string. This can potentially allow an attacker to execute arbitrary code or cause a denial of service.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer string copy functions that check the size of the destination buffer such as `strncpy`, `strlcpy` or `memcpy`. These functions require the size of the destination buffer as an argument, which can prevent buffer overflow vulnerabilities.\n\n## Source Code Fix Recommendation\n\nReplace the `strcpy` function with `strncpy` function:\n\n```cpp\nstrncpy(pifdefs_filename, main_input_filename, sizeof(pifdefs_filename));\npifdefs_filename[sizeof(pifdefs_filename) - 1] = '\\0'; // Ensure null-termination\n```\n\nIn this code, `strncpy` copies up to `sizeof(pifdefs_filename)` characters from `main_input_filename` to `pifdefs_filename`. The line after ensures that `pifdefs_filename` is null-terminated, as `strncpy` does not null-terminate the destination string if the source string is larger than or equal to the size argument.\n\n## Library Dependencies\n\nThe code example requires the `<cstring>` library for the `strncpy` function.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)"
              },
              "properties": {
                "tags": [
                  "DS185832"
                ]
              }
            },
            {
              "id": "54b8862d-9da5-313c-ae65-7398b88ca58e",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of certain C standard library functions that are known to be risky. These functions are often prohibited because they can lead to buffer overflows, format string vulnerabilities, or other types of security issues. The specific vulnerability sink `ret_del != 0` does not directly relate to this vulnerability, as it's a simple comparison operation, not a function call.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using risky C standard library functions. Instead, use safer alternatives provided by the C++ Standard Library. For example, instead of using `strcpy()`, use `std::string`. Instead of `sprintf()`, use `std::stringstream` or `std::to_string()`. Always validate and sanitize input data.\n\n## Source Code Fix Recommendation\n\nAs the provided code `ret_del != 0` is a comparison operation, not a function call, it doesn't directly relate to the \"Detected Prohibited C Function\" vulnerability. Therefore, no specific fix can be recommended for this code.\n\n## Library Dependencies\n\nThe provided code does not require any specific library dependencies.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)\n\nPlease note that the links are active and accessible for anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "9fcfd19b-2bff-3c74-a44a-7129b4203a10",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. These functions are often prohibited in secure coding standards. One such function is `fprintf`.\n\nThe `fprintf` function can lead to vulnerabilities if not used correctly. It can cause format string vulnerabilities if the format string is not a constant, or if it's composed dynamically, it can lead to buffer overflows if the output is larger than the buffer.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to `fprintf` such as `snprintf` or `vsnprintf`. These functions include the size of the buffer as an argument, which can prevent buffer overflows.\n\n## Source Code Fix Recommendation\n\nInstead of using `fprintf`, use `snprintf` or `vsnprintf`. Here is an example:\n\n```cpp\n#include <stdio.h>\n\nvoid safe_function(const char* format, ...) {\n    char buffer[1024];\n    va_list args;\n    va_start(args, format);\n    vsnprintf(buffer, sizeof(buffer), format, args);\n    va_end(args);\n    // Now buffer contains the formatted string.\n    // You can write it to file with fwrite or similar\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library:\n\n- stdio.h\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n\n## CWE\n\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "9ad543e7-9c43-3268-bbb6-10bf5ca515f0",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strlen` function in C++ is used to calculate the length of a string. However, it can lead to vulnerabilities if not used properly. The function counts the number of characters in a string until it reaches a null character (`\\0`). If the string is not null-terminated, `strlen` will continue reading memory until it encounters a null character, potentially leading to buffer overflows, memory corruption, and other undefined behaviors. This is a common vulnerability in C and C++ programming.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always ensure that your strings are null-terminated. This can be done by initializing your strings with a null character or by manually adding a null character at the end of your string. Additionally, consider using safer alternatives to `strlen` such as `strnlen`, which takes an additional parameter to specify the maximum length of the string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\ntext_sz = strlen(text);\n```\n\nYou could use:\n\n```cpp\ntext_sz = strnlen(text, MAX_SIZE);\n```\n\nWhere `MAX_SIZE` is the maximum expected size of your string. This will prevent `strnlen` from reading memory beyond this limit.\n\n## Library Dependencies\n\nThe `strlen` function is part of the C standard library, so you need to include the `cstring` header:\n\n```cpp\n#include <cstring>\n```\n\nFor `strnlen`, you need to include the `string.h` header:\n\n```cpp\n#include <string.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-126: Buffer Over-read](https://cwe.mitre.org/data/definitions/126.html)"
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "29fc0702-e433-389b-9074-b1531aa65dda",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, integer overflows, etc. In this case, the `fopen` function is used, which can lead to vulnerabilities if the file name is not properly validated or controlled.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to these functions. For instance, instead of `fopen`, you can use `fopen_s` which is a safer version of `fopen`. Also, always validate and sanitize inputs to these functions to prevent potential security issues.\n\n## Source Code Fix Recommendation\n\nHere is a fixed version of the code:\n\n```cpp\nerrno_t err;\nFILE* f_tmp;\n\nerr = fopen_s(&f_tmp, \"tmp.pif.def.c\", \"w\");\nif (err != 0) {\n    // Handle error\n}\n```\n\n## Library Dependencies\n\nThe code example requires the `stdio.h` or `cstdio` library for the `fopen` function.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)\n\nPlease note that the links provided are active and accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "2ea29751-1304-34bf-a3fa-45eb5d7666fc",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcpy` function in C++ is a standard library function that copies a string. However, it is considered unsafe because it does not check the size of the destination buffer, which can lead to buffer overflow if the source string is larger than the destination buffer. This can cause a program to crash or, in the worst case, allow an attacker to execute arbitrary code.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use safer string copy functions that check the size of the destination buffer. These include `strncpy`, `strlcpy`, or `memcpy`. However, these functions also have their own caveats and must be used correctly.\n\n## Source Code Fix Recommendation\n\nReplace the `strcpy` function with a safer function like `strncpy`. Here is an example:\n\n```cpp\n#include <cstring>\n\nchar text_dup_2[SIZE];\nchar text[SIZE];\n\n// strcpy(text_dup_2, text);\nstrncpy(text_dup_2, text, sizeof(text_dup_2));\ntext_dup_2[sizeof(text_dup_2) - 1] = '\\0'; // Ensure null-termination\n```\n\nIn this example, `strncpy` copies at most `sizeof(text_dup_2)` characters from `text` to `text_dup_2`. If `text` is longer than `sizeof(text_dup_2)`, the destination string will not be null-terminated, so we manually add the null terminator.\n\n## Library Dependencies\n\nThe code example requires the `<cstring>` library for the `strncpy` function.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)"
              },
              "properties": {
                "tags": [
                  "DS185832"
                ]
              }
            },
            {
              "id": "9aef2086-7481-3fc5-a4f6-20080fdad47b",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcat` function in C++ is used to concatenate strings. However, it is considered unsafe because it does not perform bounds checking, and thus can lead to buffer overflow vulnerabilities. This can potentially allow an attacker to execute arbitrary code or cause a denial of service.\n\nThe specific vulnerability sink in the provided code is:\n\n```cpp\nstrcat(fn_decl, \")\")\n```\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer string handling functions that perform bounds checking, such as `strncat`. This function takes an additional parameter that specifies the maximum number of characters to be appended, thus preventing buffer overflow.\n\n## Source Code Fix Recommendation\n\nHere is a recommended fix for the provided code:\n\n```cpp\nstrncat(fn_decl, \")\", sizeof(fn_decl) - strlen(fn_decl) - 1);\n```\n\nThis code will append the string \")\" to `fn_decl`, but not more than `sizeof(fn_decl) - strlen(fn_decl) - 1` characters, thus ensuring that the buffer cannot overflow.\n\n## Library Dependencies\n\nThe `strcat` and `strncat` functions are part of the C standard library, so no additional library dependencies are required.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)\n\nPlease note that the links provided are active and accessible to anonymous users at the time of writing."
              },
              "properties": {
                "tags": [
                  "DS141863"
                ]
              }
            },
            {
              "id": "20cd51f4-c6b2-3c7c-8d16-c387c74c8d4d",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcat` function in C++ is used to concatenate strings. However, it does not perform any bounds checking, and thus can lead to buffer overflow vulnerabilities. This is because `strcat` will keep appending data until it hits a null byte (`\\0`), potentially writing past the end of the allocated buffer.\n\nThis vulnerability is known as \"Detected Prohibited C Function (strcat) Vulnerability\". It can lead to serious security issues such as code execution, denial of service, or information disclosure.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should avoid using `strcat` and instead use safer string handling functions that perform bounds checking, such as `strncat`, `strlcat`, or `snprintf`. \n\n## Source Code Fix Recommendation\n\nReplace the `strcat` function with `strncat` or `snprintf`. Here is an example of how to do it with `strncat`:\n\n```cpp\nsize_t len = strlen(fn_decl);\nstrncat(fn_decl, var_decl, sizeof(fn_decl) - len - 1);\n```\n\nAnd here is an example with `snprintf`:\n\n```cpp\nsnprintf(fn_decl, sizeof(fn_decl), \"%s%s\", fn_decl, var_decl);\n```\n\n## Library Dependencies\n\nThe code example requires the `<cstring>` library for the `strcat` function, and the `<cstdio>` library for the `snprintf` function.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS141863"
                ]
              }
            },
            {
              "id": "a8a16686-b415-35a2-8558-923e1a9c8155",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcat` function in C++ is used to concatenate strings. However, it is considered unsafe because it does not perform bounds checking, and thus can lead to buffer overflow vulnerabilities. This can potentially allow an attacker to execute arbitrary code or cause a denial of service.\n\nThe function `strcat(fn_decl, pch)` is concatenating the string `pch` to the end of the string `fn_decl`. If the size of `fn_decl` is not large enough to accommodate the additional characters, it can lead to a buffer overflow.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should use safer string handling functions that perform bounds checking, such as `strncat`, `strlcat`, or `snprintf`. These functions take an additional parameter that specifies the maximum number of characters to be appended, thus preventing buffer overflow.\n\n## Source Code Fix Recommendation\n\nReplace the `strcat` function with `strncat` or `snprintf` as shown below:\n\n```cpp\n// Using strncat\nsize_t len = strlen(fn_decl);\nstrncat(fn_decl, pch, sizeof(fn_decl) - len - 1);\n\n// Using snprintf\nsnprintf(fn_decl, sizeof(fn_decl), \"%s%s\", fn_decl, pch);\n```\n\n## Library Dependencies\n\nThe code example requires the `<cstring>` library for the `strcat` function and the `<cstdio>` library for the `snprintf` function.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS141863"
                ]
              }
            },
            {
              "id": "e2a5d497-cd7d-3a6f-8996-73d0be4add23",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcpy` function in C++ is a standard library function that copies a string. It is considered unsafe because it does not check the size of the destination buffer, which can lead to buffer overflow if the source string is larger than the destination buffer. This can cause a program to crash or, in the worst case, allow an attacker to execute arbitrary code.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use safer string copy functions that check the size of the destination buffer. These include `strncpy`, `strlcpy`, or `memcpy`. However, these functions can also be misused, so it's important to always ensure that the destination buffer is large enough to hold the source string and the null terminator.\n\n## Source Code Fix Recommendation\n\nReplace the `strcpy` function with a safer function, such as `strncpy`. Here's how you can do it:\n\n```cpp\nstrncpy(text_dup, text, sizeof(text_dup));\ntext_dup[sizeof(text_dup) - 1] = '\\0';\n```\n\nIn this code, `strncpy` copies at most `sizeof(text_dup)` characters from `text` to `text_dup`. The next line ensures that `text_dup` is null-terminated.\n\n## Library Dependencies\n\nThe `strcpy` and `strncpy` functions are part of the C standard library, so you need to include the `cstring` header:\n\n```cpp\n#include <cstring>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)"
              },
              "properties": {
                "tags": [
                  "DS185832"
                ]
              }
            },
            {
              "id": "94944e80-cf44-3479-bf06-bb627c04b2e2",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe \"Prohibited C Function Identified\" vulnerability refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, integer overflows, etc. In this case, the `strtok` function is used, which is not thread-safe and can lead to data races in multi-threaded programs.\n\n## Mitigation Advice\n\nAvoid using non-reentrant functions like `strtok`. Instead, use thread-safe alternatives such as `strtok_r` or `strtok_s` if available. Also, consider using higher-level string parsing functions that are less error-prone.\n\n## Source Code Fix Recommendation\n\nReplace the `strtok` function with its thread-safe counterpart `strtok_r`. Here is an example of how to do it:\n\n```cpp\nchar *pch;\nchar *saveptr;\nchar str[] = \"A string, to be tokenized\";\nchar delimiters[] = \",)\";\n\npch = strtok_r(str, delimiters, &saveptr);\n```\n\n## Library Dependencies\n\nThe code example requires the `cstring` library.\n\n```cpp\n#include <cstring>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "1ea11485-bf2d-389f-b44d-76d7efca58a2",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcat` function in C++ is used to concatenate strings. However, it is considered unsafe because it does not perform bounds checking, and thus can lead to buffer overflow vulnerabilities. This can potentially allow an attacker to execute arbitrary code or cause a denial of service.\n\nThe specific vulnerability sink in the provided code is:\n\n```cpp\nstrcat(fn_decl, \"(atmi_lparm_t *lparm)\");\n```\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer string handling functions that perform bounds checking, such as `strncat`, `strlcat`, or `snprintf`. These functions prevent buffer overflow by ensuring that the destination buffer size is not exceeded.\n\n## Source Code Fix Recommendation\n\nHere is a recommended fix for the provided code using `strncat`:\n\n```cpp\nsize_t len = strlen(fn_decl);\nstrncat(fn_decl, \"(atmi_lparm_t *lparm)\", sizeof(fn_decl) - len - 1);\n```\n\n## Library Dependencies\n\nThe code example requires the `<cstring>` library for the `strcat` function and the `strlen` function.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS141863"
                ]
              }
            },
            {
              "id": "20c10b1e-6d8e-3074-91d8-cec1ab1a2637",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcpy` function in C++ is a standard library function that copies a string. However, it is considered unsafe because it does not check the size of the destination buffer, which can lead to buffer overflow if the source string is larger than the destination buffer. This can cause a program to crash or, in the worst case, allow an attacker to execute arbitrary code.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use safer string copy functions that check the size of the destination buffer. These include `strncpy`, `strlcpy`, or `memcpy`. However, these functions also have their own caveats and must be used correctly.\n\n## Source Code Fix Recommendation\n\nReplace the `strcpy` function with `strncpy` function, which includes the size of the destination buffer as a parameter:\n\n```cpp\nstrncpy(pif_name, TREE_STRING_POINTER (TREE_VALUE ( itrArgument )), sizeof(pif_name));\npif_name[sizeof(pif_name) - 1] = '\\0'; // Ensure null termination\n```\n\nNote: This assumes `pif_name` is an array. If it's a pointer, you need to know the size of the memory block it points to.\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `cstring` or `string.h` for `strcpy` or `strncpy`\n- The library that provides `TREE_STRING_POINTER` and `TREE_VALUE`\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS185832"
                ]
              }
            },
            {
              "id": "0290aab3-7a15-3d9c-9590-a7aab90ac6ee",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcat` function in C++ is used to concatenate strings. However, it is considered unsafe because it does not perform bounds checking, and thus can lead to buffer overflow vulnerabilities. This can potentially allow an attacker to execute arbitrary code or cause a denial of service.\n\nThe specific vulnerability sink in the provided code is:\n\n```cpp\nstrcat(fn_decl, fn_name);\n```\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer string handling functions that perform bounds checking, such as `strncat`, `strlcat`, or `snprintf`. These functions prevent buffer overflow by ensuring that the destination buffer is large enough to hold the concatenated string.\n\n## Source Code Fix Recommendation\n\nHere is a recommended fix for the provided code using `strncat`:\n\n```cpp\nsize_t len = strlen(fn_decl);\nstrncat(fn_decl, fn_name, sizeof(fn_decl) - len - 1);\n```\n\nThis code ensures that `fn_decl` has enough space to hold the concatenated string. The `sizeof(fn_decl) - len - 1` expression calculates the remaining space in the `fn_decl` buffer.\n\n## Library Dependencies\n\nThe code example requires the `<cstring>` library for the `strcat` function and the `strlen` function.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')](https://cwe.mitre.org/data/definitions/120.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS141863"
                ]
              }
            },
            {
              "id": "165436b7-7c92-3aca-8e53-3321adbc8f82",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe \"Detected Prohibited C Function\" vulnerability refers to the use of unsafe C library functions in C++ code. These functions are considered unsafe because they can lead to various security issues such as buffer overflows, format string vulnerabilities, or integer overflows. In this case, the `strtok` function is used, which is not thread-safe and can lead to data races if used in a multi-threaded context.\n\n## Mitigation Advice\n\nAvoid using unsafe C library functions. Instead, use safer alternatives provided by the C++ Standard Library. For instance, instead of `strtok`, you can use `std::string` and `std::istringstream` to tokenize a string in a safer and more idiomatic way.\n\n## Source Code Fix Recommendation\n\nHere is a safer alternative using `std::string` and `std::istringstream`:\n\n```cpp\n#include <string>\n#include <sstream>\n#include <vector>\n\nstd::string s;\nstd::getline(std::cin, s);\nstd::istringstream iss(s);\nstd::vector<std::string> tokens;\nstd::string token;\nwhile (std::getline(iss, token, '(')) {\n    tokens.push_back(token);\n}\n```\n\n## Library Dependencies\n\nThe original code example requires the `cstring` library. The fixed code example requires the `string`, `sstream`, and `vector` libraries.\n\n## References\n\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "a5707602-59ad-3b9c-9d56-3be2441e1ba8",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure or unsafe C functions in C++ code. In this case, the `strtok` function is used, which is not thread-safe and can lead to data races and other concurrency issues. This function also modifies the input string, which can lead to unexpected behavior if the string is used elsewhere in the program.\n\n## Mitigation Advice\n\nAvoid using `strtok` function. Instead, consider using safer alternatives such as `strtok_r` or `strtok_s` which are reentrant and safer to use in a multithreaded environment. Also, consider using C++ string handling functions or libraries which are safer and less prone to vulnerabilities.\n\n## Source Code Fix Recommendation\n\nReplace `strtok` with `strtok_r` or `strtok_s`:\n\n```cpp\nchar *pch;\nchar *saveptr;\npch = strtok_r(NULL, \">\", &saveptr);\n```\n\n## Library Dependencies\n\nThe code example requires the `cstring` library.\n\n```cpp\n#include <cstring>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "acfc5143-2383-3f0b-bcaf-29ff258645a7",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, and integer overflows. In this case, the `strtok` function is used, which is not thread-safe and can lead to data races in multi-threaded programs.\n\n## Mitigation Advice\n\nAvoid using non-reentrant functions like `strtok`. Instead, use thread-safe alternatives such as `strtok_r` or `strtok_s` if available. Also, consider using higher-level string parsing functions that are less error-prone.\n\n## Source Code Fix Recommendation\n\nReplace `strtok` with `strtok_r`:\n\n```cpp\nchar *saveptr;\n*pch = strtok_r(text, \"<\", &saveptr);\n```\n\n## Library Dependencies\n\nThe code example requires the `cstring` library.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "199993d2-10ab-3c57-9f22-8e0f15052b41",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcat` function in C++ is used to concatenate strings. However, it is considered unsafe because it does not perform bounds checking, and thus can lead to buffer overflow vulnerabilities. This can potentially allow an attacker to execute arbitrary code or cause a denial of service.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer string handling functions that perform bounds checking, such as `strncat`. This function takes an additional parameter that specifies the maximum number of characters to be appended, thus preventing buffer overflow.\n\n## Source Code Fix Recommendation\n\nReplace the `strcat` function with `strncat` as shown below:\n\n```cpp\nchar dest[50] = \"Hello\";\nchar src[50] = \"World\";\nstrncat(dest, src, sizeof(dest)-strlen(dest)-1);\n```\n\nIn the above code, `sizeof(dest)-strlen(dest)-1` ensures that the number of characters appended does not exceed the size of the destination buffer, thus preventing buffer overflow.\n\n## Library Dependencies\n\nThe code example does not have any specific library dependencies apart from the standard C++ libraries.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS141863"
                ]
              }
            },
            {
              "id": "553c001a-36a9-3920-bb2f-5c50889c1154",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcat` function in C++ is used to concatenate strings. However, it is considered unsafe because it does not perform bounds checking, and thus can lead to buffer overflow vulnerabilities. This can potentially allow an attacker to execute arbitrary code or cause a denial of service.\n\nThe specific vulnerability sink in the provided code is:\n\n```cpp\nstrcat(fn_decl, \")\")\n```\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer string handling functions that perform bounds checking, such as `strncat`. This function takes an additional parameter that specifies the maximum number of characters to be appended, thus preventing buffer overflow.\n\n## Source Code Fix Recommendation\n\nHere is a recommended fix for the provided code:\n\n```cpp\nstrncat(fn_decl, \")\", sizeof(fn_decl) - strlen(fn_decl) - 1);\n```\n\nThis code will append the string \")\" to `fn_decl`, but not more than `sizeof(fn_decl) - strlen(fn_decl) - 1` characters, thus ensuring that the buffer cannot overflow.\n\n## Library Dependencies\n\nThe `strcat` and `strncat` functions are part of the C standard library, so no additional library dependencies are required.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)\n\nPlease note that the links provided are active and accessible to anonymous users at the time of writing."
              },
              "properties": {
                "tags": [
                  "DS141863"
                ]
              }
            },
            {
              "id": "f19a004a-36f0-3ff6-9873-95cd8f2a0818",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe \"Prohibited C Function Identified\" vulnerability refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, or integer overflows. In this case, the function `getenv()` is used, which can lead to security vulnerabilities. The `getenv()` function returns a pointer to a string that is associated with the matched environment variable name. This can lead to potential issues if the environment variable is controlled by an attacker.\n\n## Mitigation Advice\n\nAvoid using insecure C library functions. Instead, use safer alternatives that perform bounds checking or other forms of validation. In the case of `getenv()`, consider the security implications of using environment variables in your application. If possible, use other methods to configure your application.\n\n## Source Code Fix Recommendation\n\nThe `getenv()` function itself is not inherently insecure, but its misuse can lead to problems. If you must use `getenv()`, ensure that you validate and sanitize its output. Never trust its output without validation.\n\n```cpp\nconst char* name = \"ENV_VAR\";\nchar* env = getenv(name);\nif (env != NULL) {\n    // Validate and sanitize 'env' before using it\n}\n```\n\n## Library Dependencies\n\nThe `getenv()` function is part of the C standard library, so no additional libraries are needed.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "9302a949-44fa-3acb-b41b-cf916a5bc8e6",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcpy` function in C++ is a standard library function that copies a string. However, it is considered unsafe because it does not check the size of the destination buffer, which can lead to buffer overflow vulnerabilities if the source string is larger than the destination buffer. This can lead to arbitrary code execution, denial of service, or information disclosure vulnerabilities.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use safer string copy functions that check the size of the destination buffer. These include `strncpy`, `strlcpy`, or `memcpy`. However, these functions can also be misused, so it's important to always ensure that the destination buffer is large enough to hold the source string and the null terminator.\n\n## Source Code Fix Recommendation\n\nReplace `strcpy` with `strncpy` or `memcpy` and ensure the destination buffer is large enough. For example, if `dest` is the destination buffer and `src` is the source string:\n\n```cpp\nchar dest[SIZE];\nconst char *src = \"source string\";\n// Ensure dest is large enough to hold src and the null terminator\nif (strlen(src) + 1 > SIZE) {\n    // Handle the error, e.g., by truncating src or allocating a larger buffer for dest\n} else {\n    strncpy(dest, src, SIZE - 1);\n    dest[SIZE - 1] = '\\0';  // Ensure dest is null-terminated\n}\n```\n\n## Library Dependencies\n\nThe code example does not have any library dependencies.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS185832"
                ]
              }
            },
            {
              "id": "47590e02-7433-3abe-989c-5e12c48be81a",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcat` function in C++ is used to concatenate strings. However, it is considered unsafe because it does not perform bounds checking, and thus can lead to buffer overflow vulnerabilities. This can potentially allow an attacker to execute arbitrary code or cause a denial of service.\n\nThe specific vulnerability sink `strcat(fn_decl, \";\")` is problematic because it appends a semicolon to the `fn_decl` string without checking if there is enough space in the buffer pointed to by `fn_decl` to hold the additional characters.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use safer string handling functions that perform bounds checking, such as `strncat` or `strlcat`. These functions take an additional parameter that specifies the maximum number of characters to append, thus preventing buffer overflow.\n\n## Source Code Fix Recommendation\n\nReplace the `strcat` function with `strncat` or `strlcat` as follows:\n\n```cpp\n// Assuming fn_decl is a char array with sufficient space\nstrncat(fn_decl, \";\", sizeof(fn_decl) - strlen(fn_decl) - 1);\n```\n\nThis code will append a semicolon to `fn_decl`, but not more than `sizeof(fn_decl) - strlen(fn_decl) - 1` characters, thus ensuring that the buffer does not overflow.\n\n## Library Dependencies\n\nThe code example requires the `<cstring>` library in C++.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS141863"
                ]
              }
            },
            {
              "id": "3528deed-3ec5-31b1-9e57-2af33fdbc54f",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcat` function in C++ is used to concatenate strings. However, it is considered unsafe because it does not perform bounds checking, and thus can lead to buffer overflow vulnerabilities. This can potentially allow an attacker to execute arbitrary code or cause a denial of service.\n\nThe function `strcat(fn_decl, pch)` is concatenating the string `pch` to the end of the string `fn_decl`. If the size of `fn_decl` is not large enough to accommodate the additional characters, it can lead to a buffer overflow.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should use safer string handling functions that perform bounds checking, such as `strncat`, `strlcat`, or `snprintf`. These functions take an additional parameter that specifies the maximum number of characters to be appended, thus preventing buffer overflow.\n\n## Source Code Fix Recommendation\n\nReplace the `strcat` function with `strncat` or `snprintf` as shown below:\n\n```cpp\n// Using strncat\nsize_t len = strlen(fn_decl);\nstrncat(fn_decl, pch, sizeof(fn_decl) - len - 1);\n\n// Using snprintf\nsnprintf(fn_decl, sizeof(fn_decl), \"%s%s\", fn_decl, pch);\n```\n\n## Library Dependencies\n\nThe code example requires the `<cstring>` library for the `strcat` function and the `<cstdio>` library for the `snprintf` function.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS141863"
                ]
              }
            },
            {
              "id": "039e9e3c-f369-3c51-8f8c-6f4a11cb3df9",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcat` function in C++ is used to concatenate strings. However, it is considered unsafe because it does not perform bounds checking, and thus can lead to buffer overflow vulnerabilities. This can potentially allow an attacker to execute arbitrary code or cause a denial of service.\n\nThe specific vulnerability sink in question is:\n\n```cpp\nstrcat(fn_decl, \"(\")\n```\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer string handling functions that perform bounds checking, such as `strncat` or `strlcat`. These functions take an additional parameter that specifies the maximum number of characters to be appended, thus preventing buffer overflow.\n\n## Source Code Fix Recommendation\n\nHere is a recommended fix for the vulnerability sink:\n\n```cpp\nstrncat(fn_decl, \"(\", sizeof(fn_decl) - strlen(fn_decl) - 1);\n```\n\nThis code will append the string `\"(\"` to `fn_decl`, but not more than `sizeof(fn_decl) - strlen(fn_decl) - 1` characters, thus ensuring that the buffer cannot overflow.\n\n## Library Dependencies\n\nThe code example requires the `<cstring>` library to execute properly.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')](https://cwe.mitre.org/data/definitions/120.html)\n\nPlease note that the links provided are valid and active for anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS141863"
                ]
              }
            },
            {
              "id": "14164cbb-1953-37a6-a12f-1e0786293e2a",
              "help": {
                "text": "",
                "markdown": "This finding is classified as 'Likely Vulnerable: malloc result used without null check (possible null deref)', and the call verdict is 'GENUINE', indicating a high-confidence, actionable issue. The malloc call assigns its result to 'tmp_module' using a non-literal, unchecked size expression ('module_size'). The first use of the pointer is as the destination in a memcpy call, and there is no null guard present before this use. This means that if malloc fails and returns NULL, the subsequent memcpy will dereference a null pointer, leading to undefined behavior or a crash. The pointer is freed in the same method and also passed to another call, but these do not mitigate the immediate risk of null dereference. No zero guard or overflow guard is present, and the allocation size is not validated. These factors all contribute to the assessment that this is a genuine vulnerability.\n\n## In Context Remediation\nTo prevent a null pointer dereference after a failed memory allocation, always check the result of malloc before using the allocated memory. For example, if your original code is:\n\n```c\nvoid *tmp_module = malloc(module_size);\nmemcpy(tmp_module, src, module_size);\n```\n\nYou should add a null check immediately after the malloc call:\n\n```c\nvoid *tmp_module = malloc(module_size);\nif (tmp_module == NULL) {\n    // Handle allocation failure, e.g., return an error or clean up\n    return ATMI_STATUS_ERROR;\n}\nmemcpy(tmp_module, src, module_size);\n```\n\nThis ensures that if malloc fails and returns NULL, the code does not attempt to dereference a null pointer, which would cause undefined behavior or a crash. Always handle allocation failures gracefully and propagate errors as appropriate for your application.\n\n## References\n- [OWASP C-Based Toolchain Hardening Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [CWE-690: Unchecked Return Value to NULL Pointer Dereference](https://cwe.mitre.org/data/definitions/690.html)\n\n___\n"
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "a3ac6a21-dc23-32f5-af3f-d0c3cbe1626e",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcat` function in C++ is used to concatenate strings. However, it does not perform any bounds checking, and thus can lead to buffer overflow vulnerabilities. This is because `strcat` will keep appending data until it hits a null byte (`\\0`), potentially writing past the end of the allocated buffer.\n\nThis vulnerability is known as \"Detected Prohibited C Function (strcat) Vulnerability\". It can lead to serious security issues such as code execution, denial of service, or information disclosure.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should avoid using `strcat` and instead use safer string handling functions that perform bounds checking, such as `strncat`, `strlcat`, or `snprintf`. \n\n## Source Code Fix Recommendation\n\nReplace the `strcat` function with `strncat` or `snprintf`. Here is an example of how to do it with `strncat`:\n\n```cpp\nsize_t len = strlen(fn_decl);\nstrncat(fn_decl, var_decl, sizeof(fn_decl) - len - 1);\n```\n\nAnd here is an example with `snprintf`:\n\n```cpp\nsnprintf(fn_decl, sizeof(fn_decl), \"%s%s\", fn_decl, var_decl);\n```\n\n## Library Dependencies\n\nThe code example requires the `<cstring>` library for the `strcat` function, and the `<cstdio>` library for the `snprintf` function.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS141863"
                ]
              }
            },
            {
              "id": "1a5244ba-bbbc-3787-8311-845ba7d04c1c",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe \"Prohibited C Function Identified\" vulnerability refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, integer overflows, etc. In this case, the `strtok` function is used, which is not thread-safe and can lead to data races in multi-threaded programs.\n\n## Mitigation Advice\n\nAvoid using non-reentrant functions like `strtok`. Instead, use thread-safe alternatives such as `strtok_r` or `strtok_s` if available. Also, consider using higher-level string parsing functions that are less error-prone.\n\n## Source Code Fix Recommendation\n\nReplace the `strtok` function with its thread-safe counterpart `strtok_r`. Here is an example of how to do it:\n\n```cpp\nchar *pch;\nchar *saveptr;\nchar str[] = \"A string, to be tokenized\";\nchar delimiters[] = \",)\";\n\npch = strtok_r(str, delimiters, &saveptr);\n```\n\n## Library Dependencies\n\nThe code example requires the `cstring` library.\n\n```cpp\n#include <cstring>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "24cec187-6ac0-32a1-ac1c-f63eea7b27d4",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcat` function in C++ is used to concatenate strings. However, it is considered unsafe because it does not perform bounds checking, and thus can lead to buffer overflow vulnerabilities. This can potentially allow an attacker to execute arbitrary code or cause a denial of service.\n\nThe `strcat(fn_decl, \"()\")` function call is vulnerable because it appends the string \"()\" to the `fn_decl` string without checking if there is enough space in the `fn_decl` buffer to hold the additional characters.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use safer string handling functions that perform bounds checking, such as `strncat`, `strlcat`, or `snprintf`. These functions take an additional parameter specifying the maximum number of characters to append, preventing buffer overflow.\n\n## Source Code Fix Recommendation\n\nReplace the `strcat` function call with a safer function, such as `strncat`:\n\n```cpp\n// Assuming fn_decl is a char array with sufficient space\nstrncat(fn_decl, \"()\", sizeof(fn_decl) - strlen(fn_decl) - 1);\n```\n\nThis code will append at most `sizeof(fn_decl) - strlen(fn_decl) - 1` characters from the string \"()\" to `fn_decl`, ensuring that the `fn_decl` buffer does not overflow.\n\n## Library Dependencies\n\nThe code example requires the `<cstring>` library, which provides the `strcat` and `strncat` functions.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')](https://cwe.mitre.org/data/definitions/120.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS141863"
                ]
              }
            },
            {
              "id": "c82f6496-0fa9-3972-bdfc-7fc03af20652",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcat` function in C++ is used to concatenate strings. However, it is considered unsafe because it does not perform bounds checking, and thus can lead to buffer overflow vulnerabilities. This can potentially allow an attacker to execute arbitrary code or cause a denial of service.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer string handling functions that perform bounds checking, such as `strncat`. This function takes an additional parameter that specifies the maximum number of characters to be appended, thus preventing buffer overflow.\n\n## Source Code Fix Recommendation\n\nReplace the `strcat` function with `strncat` as shown below:\n\n```cpp\nchar dest[50] = \"Hello\";\nchar src[50] = \"World\";\nstrncat(dest, src, sizeof(dest)-strlen(dest)-1);\n```\n\nIn the above code, `sizeof(dest)-strlen(dest)-1` ensures that the number of characters appended does not exceed the size of the destination buffer, thus preventing buffer overflow.\n\n## Library Dependencies\n\nThe code example does not have any specific library dependencies apart from the standard C++ libraries.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS141863"
                ]
              }
            },
            {
              "id": "e650a335-33e3-31b6-ae69-151b4f8da854",
              "help": {
                "text": "",
                "markdown": "This finding is classified as a genuine vulnerability because the analysis identified a risk of undefined behavior due to possible overlap between the source and destination memory regions in the memory copy operation. The destination and source expressions are both identifiers, and dataflow analysis indicates that the destination may be derived from the source, which can lead to overlapping memory regions. The use of a standard memory copy function in such a scenario is unsafe, as it does not handle overlapping regions correctly. Additionally, there is no evidence of a guard to ensure the source is non-null, which further increases the risk of undefined behavior. The destination is not likely to be null, but the source may be, as there is no prior check. These factors together indicate a high-confidence, actionable issue that should be addressed to prevent potential memory corruption or crashes.\n\n## In Context Remediation\nTo remediate the risk of undefined behavior when the source and destination memory regions may overlap, replace the standard memory copy function with a function that safely handles overlapping regions. In C/C++, use `memmove` instead of `memcpy`, as `memmove` is designed to handle overlapping memory areas safely. Additionally, ensure that the source pointer is not null before performing the copy to prevent null pointer dereference.\n\n```cpp\nif (module_bytes != NULL) {\n    memmove(tmp_module, module_bytes, module_size);\n}\n```\n\nThis change ensures that the memory copy is safe even if the source and destination overlap, and it also guards against null pointer dereference for the source.\n\n## References\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)\n- [CWE-787: Out-of-bounds Write](https://cwe.mitre.org/data/definitions/787.html)\n- [OWASP: Buffer Overflow](https://owasp.org/www-community/vulnerabilities/Buffer_Overflow)\n- [OWASP C-Based Toolchain Hardening Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n\n___\n"
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "293e20f1-1aaa-39a8-bdb6-134551e89596",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe \"Detected Prohibited C Function\" vulnerability refers to the use of unsafe C library functions in C++ code. These functions are considered unsafe because they can lead to various security issues such as buffer overflows, format string vulnerabilities, or integer overflows. In this case, the `strtok` function is used, which is not thread-safe and can lead to data races if used in a multi-threaded context.\n\n## Mitigation Advice\n\nAvoid using unsafe C library functions. Instead, use safer alternatives provided by the C++ Standard Library. For instance, instead of `strtok`, you can use `std::string` and `std::istringstream` to tokenize a string in a safer and more idiomatic way.\n\n## Source Code Fix Recommendation\n\nHere is a safer alternative using `std::string` and `std::istringstream`:\n\n```cpp\n#include <string>\n#include <sstream>\n#include <vector>\n\nstd::string s;\nstd::getline(std::cin, s);\nstd::istringstream iss(s);\nstd::vector<std::string> tokens;\nstd::string token;\nwhile (std::getline(iss, token, '(')) {\n    tokens.push_back(token);\n}\n```\n\n## Library Dependencies\n\nThe original code example requires the `cstring` library. The fixed code example requires the `string`, `sstream`, and `vector` libraries.\n\n## References\n\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "b38d84fc-731a-365c-a62f-ecefd5f5f79e",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure or unsafe C functions in C++ code. In this case, the `strtok` function is used, which is not thread-safe and can lead to data races and other concurrency issues. This function also modifies the input string, which can lead to unexpected behavior if the string is used elsewhere in the program.\n\n## Mitigation Advice\n\nAvoid using `strtok` function. Instead, consider using safer alternatives such as `strtok_r` or `strtok_s` which are reentrant and safer to use in a multithreaded environment. Also, consider using C++ string handling functions or libraries which are safer and less prone to vulnerabilities.\n\n## Source Code Fix Recommendation\n\nReplace `strtok` with `strtok_r` or `strtok_s`:\n\n```cpp\nchar *pch;\nchar *saveptr;\npch = strtok_r(NULL, \">\", &saveptr);\n```\n\n## Library Dependencies\n\nThe code example requires the `cstring` library.\n\n```cpp\n#include <cstring>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "d27b67ae-cefd-3c60-b5f9-c97f91d9e967",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, and integer overflows. In this case, the `strtok` function is used, which is not thread-safe and can lead to data races in multi-threaded programs.\n\n## Mitigation Advice\n\nAvoid using non-reentrant functions like `strtok`. Instead, use thread-safe alternatives such as `strtok_r` or `strtok_s` if available. Also, consider using higher-level string parsing functions that are less error-prone.\n\n## Source Code Fix Recommendation\n\nReplace `strtok` with `strtok_r`:\n\n```cpp\nchar *saveptr;\n*pch = strtok_r(text, \"<\", &saveptr);\n```\n\n## Library Dependencies\n\nThe code example requires the `cstring` library.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "8db5db4e-62cd-3d02-8fb9-6869db355d55",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcat` function in C++ is used to concatenate strings. However, it is considered unsafe because it does not perform bounds checking, and thus can lead to buffer overflow vulnerabilities. This can potentially allow an attacker to execute arbitrary code or cause a denial of service.\n\nThe specific vulnerability sink in the provided code is:\n\n```cpp\nstrcat(fn_decl, \")\")\n```\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer string handling functions that perform bounds checking, such as `strncat`. This function takes an additional parameter that specifies the maximum number of characters to be appended, thus preventing buffer overflow.\n\n## Source Code Fix Recommendation\n\nHere is a recommended fix for the provided code:\n\n```cpp\nstrncat(fn_decl, \")\", sizeof(fn_decl) - strlen(fn_decl) - 1);\n```\n\nThis code will append the string \")\" to `fn_decl`, but not more than `sizeof(fn_decl) - strlen(fn_decl) - 1` characters, thus ensuring that the buffer cannot overflow.\n\n## Library Dependencies\n\nThe `strcat` and `strncat` functions are part of the C standard library, so no additional library dependencies are required.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)\n\nPlease note that the links provided are active and accessible to anonymous users at the time of writing."
              },
              "properties": {
                "tags": [
                  "DS141863"
                ]
              }
            },
            {
              "id": "38415447-3bb8-3e3f-9d04-3f3712ea2751",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcat` function in C++ is used to concatenate strings. However, it is considered unsafe because it does not perform bounds checking, and thus can lead to buffer overflow vulnerabilities. This can potentially allow an attacker to execute arbitrary code or cause a denial of service.\n\nThe function `strcat(fn_decl, pch)` is concatenating the string `pch` to the end of the string `fn_decl`. If the size of `fn_decl` is not large enough to accommodate the additional characters, it can lead to a buffer overflow.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should use safer string handling functions that perform bounds checking, such as `strncat`, `strlcat`, or `snprintf`. These functions take an additional parameter that specifies the maximum number of characters to be appended, thus preventing buffer overflow.\n\n## Source Code Fix Recommendation\n\nReplace the `strcat` function with `strncat` or `snprintf` as shown below:\n\n```cpp\n// Using strncat\nsize_t len = strlen(fn_decl);\nstrncat(fn_decl, pch, sizeof(fn_decl) - len - 1);\n\n// Using snprintf\nsnprintf(fn_decl, sizeof(fn_decl), \"%s%s\", fn_decl, pch);\n```\n\n## Library Dependencies\n\nThe code example requires the `<cstring>` library for the `strcat` function and the `<cstdio>` library for the `snprintf` function.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS141863"
                ]
              }
            },
            {
              "id": "c86e70b7-d8d1-37f4-b30f-6ea807e4e122",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcat` function in C++ is used to concatenate strings. However, it is considered unsafe because it does not perform bounds checking, and thus can lead to buffer overflow vulnerabilities. This can potentially allow an attacker to execute arbitrary code or cause a denial of service.\n\nThe specific vulnerability sink in the provided code is:\n\n```cpp\nstrcat(fn_decl, fn_name);\n```\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer string handling functions that perform bounds checking, such as `strncat`, `strlcat`, or `snprintf`. These functions prevent buffer overflow by ensuring that the destination buffer is large enough to hold the concatenated string.\n\n## Source Code Fix Recommendation\n\nHere is a recommended fix for the provided code using `strncat`:\n\n```cpp\nsize_t len = strlen(fn_decl);\nstrncat(fn_decl, fn_name, sizeof(fn_decl) - len - 1);\n```\n\nThis code ensures that `fn_decl` has enough space to hold the concatenated string. The `sizeof(fn_decl) - len - 1` expression calculates the remaining space in the `fn_decl` buffer.\n\n## Library Dependencies\n\nThe code example requires the `<cstring>` library for the `strcat` function and the `strlen` function.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')](https://cwe.mitre.org/data/definitions/120.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS141863"
                ]
              }
            },
            {
              "id": "e02ad51b-0155-3a0f-9c17-f4977446f95b",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcpy` function in C++ is a standard library function that copies a string. However, it is considered unsafe because it does not check the size of the destination buffer, which can lead to buffer overflow vulnerabilities if the source string is larger than the destination buffer. This can lead to arbitrary code execution, denial of service, or information disclosure vulnerabilities.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use safer string copy functions that check the size of the destination buffer. These include `strncpy`, `strlcpy`, or `memcpy`. However, these functions can also be misused, so it's important to always ensure that the destination buffer is large enough to hold the source string and the null terminator.\n\n## Source Code Fix Recommendation\n\nReplace `strcpy` with `strncpy` or `memcpy` and ensure the destination buffer is large enough. For example, if `dest` is the destination buffer and `src` is the source string:\n\n```cpp\nchar dest[SIZE];\nconst char *src = \"source string\";\n// Ensure dest is large enough to hold src and the null terminator\nif (strlen(src) + 1 > SIZE) {\n    // Handle the error, e.g., by truncating src or allocating a larger buffer for dest\n} else {\n    strncpy(dest, src, SIZE - 1);\n    dest[SIZE - 1] = '\\0';  // Ensure dest is null-terminated\n}\n```\n\n## Library Dependencies\n\nThe code example does not have any library dependencies.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS185832"
                ]
              }
            },
            {
              "id": "878b3226-a975-306d-9759-3667cf78da90",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcat` function in C++ is used to concatenate strings. However, it does not perform any bounds checking, and thus can lead to buffer overflow vulnerabilities. This is because `strcat` will keep appending data until it hits a null byte (`\\0`), potentially writing past the end of the allocated buffer.\n\nThis vulnerability is known as \"Detected Prohibited C Function (strcat) Vulnerability\". It can lead to serious security issues such as code execution, denial of service, or information disclosure.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should avoid using `strcat` and instead use safer string handling functions that perform bounds checking, such as `strncat`, `strlcat`, or `snprintf`. \n\n## Source Code Fix Recommendation\n\nReplace the `strcat` function with `strncat` or `snprintf`. Here is an example of how to do it with `strncat`:\n\n```cpp\nsize_t len = strlen(fn_decl);\nstrncat(fn_decl, var_decl, sizeof(fn_decl) - len - 1);\n```\n\nAnd here is an example with `snprintf`:\n\n```cpp\nsnprintf(fn_decl, sizeof(fn_decl), \"%s%s\", fn_decl, var_decl);\n```\n\n## Library Dependencies\n\nThe code example requires the `<cstring>` library for the `strcat` function, and the `<cstdio>` library for the `snprintf` function.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS141863"
                ]
              }
            },
            {
              "id": "4ebc3c29-8f20-3a63-8de6-cf9b31c0d5ce",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe \"Prohibited C Function Identified\" vulnerability refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, integer overflows, etc. In this case, the `strtok` function is used, which is not thread-safe and can lead to data races in multi-threaded programs.\n\n## Mitigation Advice\n\nAvoid using non-reentrant functions like `strtok`. Instead, use thread-safe alternatives such as `strtok_r` or `strtok_s` if available. Also, consider using higher-level string parsing functions that are less error-prone.\n\n## Source Code Fix Recommendation\n\nReplace the `strtok` function with its thread-safe counterpart `strtok_r`. Here is an example of how to do it:\n\n```cpp\nchar *pch;\nchar *saveptr;\nchar str[] = \"A string, to be tokenized\";\nchar delimiters[] = \",)\";\n\npch = strtok_r(str, delimiters, &saveptr);\n```\n\n## Library Dependencies\n\nThe code example requires the `cstring` library.\n\n```cpp\n#include <cstring>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "538db8f8-9cda-30f5-8ecf-4c81b13c677d",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcat` function in C++ is used to concatenate strings. However, it is considered unsafe because it does not perform bounds checking, and thus can lead to buffer overflow vulnerabilities. This can potentially allow an attacker to execute arbitrary code or cause a denial of service.\n\nThe specific vulnerability sink in question is:\n\n```cpp\nstrcat(fn_decl, \"(\")\n```\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer string handling functions that perform bounds checking, such as `strncat` or `strlcat`. These functions take an additional parameter that specifies the maximum number of characters to be appended, thus preventing buffer overflow.\n\n## Source Code Fix Recommendation\n\nHere is a recommended fix for the vulnerability sink:\n\n```cpp\nstrncat(fn_decl, \"(\", sizeof(fn_decl) - strlen(fn_decl) - 1);\n```\n\nThis code will append the string `\"(\"` to `fn_decl`, but not more than `sizeof(fn_decl) - strlen(fn_decl) - 1` characters, thus ensuring that the buffer cannot overflow.\n\n## Library Dependencies\n\nThe code example requires the `<cstring>` library to execute properly.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')](https://cwe.mitre.org/data/definitions/120.html)\n\nPlease note that the links provided are valid and active for anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS141863"
                ]
              }
            },
            {
              "id": "c5a9580b-7513-34fe-8f64-c7544cdcef37",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcat` function in C++ is used to concatenate strings. However, it is considered unsafe because it does not perform bounds checking, and thus can lead to buffer overflow vulnerabilities. This can potentially allow an attacker to execute arbitrary code or cause a denial of service.\n\nThe `strcat(fn_decl, \"()\")` function call is vulnerable because it appends the string \"()\" to the `fn_decl` string without checking if there is enough space in the `fn_decl` buffer to hold the additional characters.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use safer string handling functions that perform bounds checking, such as `strncat`, `strlcat`, or `snprintf`. These functions take an additional parameter specifying the maximum number of characters to append, preventing buffer overflow.\n\n## Source Code Fix Recommendation\n\nReplace the `strcat` function call with a safer function, such as `strncat`:\n\n```cpp\n// Assuming fn_decl is a char array with sufficient space\nstrncat(fn_decl, \"()\", sizeof(fn_decl) - strlen(fn_decl) - 1);\n```\n\nThis code will append at most `sizeof(fn_decl) - strlen(fn_decl) - 1` characters from the string \"()\" to `fn_decl`, ensuring that the `fn_decl` buffer does not overflow.\n\n## Library Dependencies\n\nThe code example requires the `<cstring>` library, which provides the `strcat` and `strncat` functions.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')](https://cwe.mitre.org/data/definitions/120.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS141863"
                ]
              }
            },
            {
              "id": "92b1e6c6-4b60-3a2a-9c89-cdf2c375cb2a",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcat` function in C++ is used to concatenate strings. However, it is considered unsafe because it does not perform bounds checking, and thus can lead to buffer overflow vulnerabilities. This can potentially allow an attacker to execute arbitrary code or cause a denial of service.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer string handling functions that perform bounds checking, such as `strncat`. This function takes an additional parameter that specifies the maximum number of characters to be appended, thus preventing buffer overflow.\n\n## Source Code Fix Recommendation\n\nReplace the `strcat` function with `strncat` as shown below:\n\n```cpp\nchar dest[50] = \"Hello\";\nchar src[50] = \"World\";\nstrncat(dest, src, sizeof(dest)-strlen(dest)-1);\n```\n\nIn the above code, `sizeof(dest)-strlen(dest)-1` ensures that the number of characters appended does not exceed the size of the destination buffer, thus preventing buffer overflow.\n\n## Library Dependencies\n\nThe code example does not have any specific library dependencies apart from the standard C++ libraries.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS141863"
                ]
              }
            },
            {
              "id": "c10676aa-0a29-3209-bb91-9bec381c1883",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe \"Detected Prohibited C Function\" vulnerability refers to the use of unsafe C library functions in C++ code. These functions are considered unsafe because they can lead to various security issues such as buffer overflows, format string vulnerabilities, or integer overflows. In this case, the `strtok` function is used, which is not thread-safe and can lead to data races if used in a multi-threaded context.\n\n## Mitigation Advice\n\nAvoid using unsafe C library functions. Instead, use safer alternatives provided by the C++ Standard Library. For instance, instead of `strtok`, you can use `std::string` and `std::istringstream` to tokenize a string in a safer and more idiomatic way.\n\n## Source Code Fix Recommendation\n\nHere is a safer alternative using `std::string` and `std::istringstream`:\n\n```cpp\n#include <string>\n#include <sstream>\n#include <vector>\n\nstd::string s;\nstd::getline(std::cin, s);\nstd::istringstream iss(s);\nstd::vector<std::string> tokens;\nstd::string token;\nwhile (std::getline(iss, token, '(')) {\n    tokens.push_back(token);\n}\n```\n\n## Library Dependencies\n\nThe original code example requires the `cstring` library. The fixed code example requires the `string`, `sstream`, and `vector` libraries.\n\n## References\n\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "168de7d5-519d-30e4-8c29-12528f697003",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcat` function in C++ is used to concatenate strings. However, it is considered unsafe because it does not perform bounds checking, and thus can lead to buffer overflow vulnerabilities. This can potentially allow an attacker to execute arbitrary code or cause a denial of service.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer string handling functions that perform bounds checking, such as `strncat`, `strlcat`, or `snprintf`. These functions take an additional parameter that specifies the maximum number of characters to be appended, thus preventing buffer overflow.\n\n## Source Code Fix Recommendation\n\nReplace the `strcat` function with `strncat`:\n\n```cpp\nsize_t len = strlen(fn_decl);\nstrncat(fn_decl, \"_wrapper\", sizeof(fn_decl) - len - 1);\n```\n\nThis code will append \"_wrapper\" to `fn_decl`, but not more than `sizeof(fn_decl) - len - 1` characters, leaving room for the null terminator.\n\n## Library Dependencies\n\nThe code example requires the `<cstring>` library for the `strcat` function and the `strlen` function.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS141863"
                ]
              }
            },
            {
              "id": "a3dfc635-2763-3505-be00-0f33cd89dbe3",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure or unsafe C functions in C++ code. In this case, the `strtok` function is used, which is not thread-safe and can lead to data races and other concurrency issues. This function also modifies the input string, which can lead to unexpected behavior if the string is used elsewhere in the program.\n\n## Mitigation Advice\n\nAvoid using `strtok` function. Instead, consider using safer alternatives such as `strtok_r` or `strtok_s` which are reentrant and safer to use in a multithreaded environment. Also, consider using C++ string handling functions or libraries which are safer and less prone to vulnerabilities.\n\n## Source Code Fix Recommendation\n\nReplace `strtok` with `strtok_r` or `strtok_s`:\n\n```cpp\nchar *pch;\nchar *saveptr;\npch = strtok_r(NULL, \">\", &saveptr);\n```\n\n## Library Dependencies\n\nThe code example requires the `cstring` library.\n\n```cpp\n#include <cstring>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "2c067fdc-a4f6-3174-8e3c-072e943938f5",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcat` function in C++ is used to concatenate strings. However, it is considered unsafe because it does not perform bounds checking, and thus can lead to buffer overflow vulnerabilities. This can potentially allow an attacker to execute arbitrary code or cause a denial of service.\n\nThe specific vulnerability sink in the provided code is:\n\n```cpp\nstrcat(fn_decl, fn_name);\n```\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer string handling functions that perform bounds checking, such as `strncat`, `strlcat`, or `snprintf`. These functions prevent buffer overflow by ensuring that the destination buffer is large enough to hold the concatenated string.\n\n## Source Code Fix Recommendation\n\nHere is a recommended fix for the provided code using `strncat`:\n\n```cpp\nsize_t len = strlen(fn_decl);\nstrncat(fn_decl, fn_name, sizeof(fn_decl) - len - 1);\n```\n\nThis code ensures that `fn_decl` has enough space to hold the concatenated string. The `sizeof(fn_decl) - len - 1` expression calculates the remaining space in the `fn_decl` buffer.\n\n## Library Dependencies\n\nThe code example requires the `<cstring>` library for the `strcat` function and the `strlen` function.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')](https://cwe.mitre.org/data/definitions/120.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS141863"
                ]
              }
            },
            {
              "id": "c9493e99-9419-33b9-8adb-c693a615957e",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcpy` function in C++ is a standard library function that copies a string. However, it is considered unsafe because it does not check the size of the destination buffer, which can lead to buffer overflow vulnerabilities if the source string is larger than the destination buffer. This can lead to arbitrary code execution, denial of service, or information disclosure vulnerabilities.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use safer string copy functions that check the size of the destination buffer. These include `strncpy`, `strlcpy`, or `memcpy`. However, these functions can also be misused, so it's important to always ensure that the destination buffer is large enough to hold the source string and the null terminator.\n\n## Source Code Fix Recommendation\n\nReplace `strcpy` with `strncpy` or `memcpy` and ensure the destination buffer is large enough. For example, if `dest` is the destination buffer and `src` is the source string:\n\n```cpp\nchar dest[SIZE];\nconst char *src = \"source string\";\n// Ensure dest is large enough to hold src and the null terminator\nif (strlen(src) + 1 > SIZE) {\n    // Handle the error, e.g., by truncating src or allocating a larger buffer for dest\n} else {\n    strncpy(dest, src, SIZE - 1);\n    dest[SIZE - 1] = '\\0';  // Ensure dest is null-terminated\n}\n```\n\n## Library Dependencies\n\nThe code example does not have any library dependencies.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS185832"
                ]
              }
            },
            {
              "id": "e7aab4c6-5a47-3ea5-b3fe-0b42a7b471d7",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, and integer overflows. In this case, the `strtok` function is used, which is not thread-safe and can lead to data races in multi-threaded programs.\n\n## Mitigation Advice\n\nAvoid using non-reentrant functions like `strtok`. Instead, use thread-safe alternatives such as `strtok_r` or `strtok_s` if available. Also, consider using higher-level string parsing functions that are less error-prone.\n\n## Source Code Fix Recommendation\n\nReplace `strtok` with `strtok_r`:\n\n```cpp\nchar *saveptr;\n*pch = strtok_r(text, \"<\", &saveptr);\n```\n\n## Library Dependencies\n\nThe code example requires the `cstring` library.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "48e55db4-d7b3-331f-bc95-9f4e46eb706d",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcat` function in C++ is used to concatenate strings. However, it is considered unsafe because it does not perform bounds checking, and thus can lead to buffer overflow vulnerabilities. This can potentially allow an attacker to execute arbitrary code or cause a denial of service.\n\nThe specific vulnerability sink in question is `strcat(cmd_c, clfilename)`. Here, `cmd_c` is the destination string and `clfilename` is the source string. If the size of `clfilename` is greater than the remaining space in `cmd_c`, it can lead to a buffer overflow.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use safer string handling functions that perform bounds checking, such as `strncat` or `strlcat`. These functions take an additional parameter that specifies the maximum number of characters to be appended.\n\n## Source Code Fix Recommendation\n\nReplace the `strcat` function with `strncat` or `strlcat` as shown below:\n\n```cpp\n// Assuming cmd_c has size cmd_c_size\nstrncat(cmd_c, clfilename, cmd_c_size - strlen(cmd_c) - 1);\n```\n\n## Library Dependencies\n\nThe `strcat` function is part of the C standard library, so you need to include the `cstring` header:\n\n```cpp\n#include <cstring>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')](https://cwe.mitre.org/data/definitions/120.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS141863"
                ]
              }
            },
            {
              "id": "d01e8482-1118-3dc2-83aa-f6e38bbcc3d4",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of certain C standard library functions that are considered unsafe due to their potential to cause buffer overflows, format string vulnerabilities, or other issues that can lead to arbitrary code execution or denial of service. \n\nOne such function is `atoi()`, which converts a string to an integer. The `atoi()` function does not perform any error checking, so if the string cannot be converted into an integer, it will return zero, which can lead to unexpected behavior if not handled properly.\n\n## Mitigation Advice\n\nAvoid using unsafe C functions like `atoi()`. Instead, use safer alternatives that perform error checking. In the case of `atoi()`, a safer alternative is `strtol()`, which allows you to check if the entire string was successfully converted to an integer.\n\n## Source Code Fix Recommendation\n\nReplace `atoi()` with `strtol()`. Here is an example:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nconst char *str = \"123\";\nchar *end;\nlong num = strtol(str, &end, 10);\n\nif (end == str || *end != '\\0' || errno == ERANGE) {\n    // str was not a valid integer\n} else {\n    // num is the converted integer\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- cstdlib\n- cerrno\n\n## References\n\n- [OWASP C++](https://owasp.org/www-community/attacks/Buffer_overflow_attack)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "2e3e7dda-b843-3fff-a2df-e9cdc2ab183a",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of certain C standard library functions that are considered unsafe due to their potential to cause buffer overflows, format string vulnerabilities, or other issues that can lead to arbitrary code execution or denial of service. \n\nOne such function is `atoi()`, which converts a string to an integer. The `atoi()` function does not perform any error checking, so if the string cannot be converted into an integer, it will return zero, which can lead to unexpected behavior if not handled properly.\n\n## Mitigation Advice\n\nAvoid using unsafe C functions like `atoi()`. Instead, use safer alternatives that perform error checking. In the case of `atoi()`, a safer alternative is `strtol()`, which allows you to check if the entire string was successfully converted to an integer.\n\n## Source Code Fix Recommendation\n\nReplace `atoi()` with `strtol()`. Here is an example:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nconst char *str = \"123\";\nchar *end;\nlong num = strtol(str, &end, 10);\n\nif (end == str || *end != '\\0' || errno == ERANGE) {\n    // str was not a valid integer\n} else {\n    // num is the converted integer\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- cstdlib\n- cerrno\n\n## References\n\n- [OWASP C++](https://owasp.org/www-community/attacks/Buffer_overflow_attack)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "5adbff0c-9284-305a-8ac2-0a8c64992996",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of certain C standard library functions that are considered unsafe due to their potential to cause buffer overflows, format string vulnerabilities, or other issues that can lead to arbitrary code execution or denial of service. \n\nOne such function is `atoi()`, which converts a string to an integer. The `atoi()` function does not perform any error checking, so if the string cannot be converted into an integer, it will return zero, which can lead to unexpected behavior if not handled properly.\n\n## Mitigation Advice\n\nAvoid using unsafe C functions like `atoi()`. Instead, use safer alternatives that perform error checking. In the case of `atoi()`, a safer alternative is `strtol()`, which allows you to check if the entire string was successfully converted to an integer.\n\n## Source Code Fix Recommendation\n\nReplace `atoi()` with `strtol()`. Here is an example:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nconst char *str = \"123\";\nchar *end;\nlong num = strtol(str, &end, 10);\n\nif (end == str || *end != '\\0' || errno == ERANGE) {\n    // str was not a valid integer\n} else {\n    // num is the converted integer\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- cstdlib\n- cerrno\n\n## References\n\n- [OWASP C++](https://owasp.org/www-community/attacks/Buffer_overflow_attack)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "27d3a39f-8c11-3d32-899b-55901a3acd44",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of certain C standard library functions that are considered unsafe due to their potential to cause buffer overflows, format string vulnerabilities, or other issues that can lead to arbitrary code execution or denial of service. \n\nOne such function is `atoi()`, which converts a string to an integer. The `atoi()` function does not perform any error checking, so if the string cannot be converted into an integer, it will return zero, which can lead to unexpected behavior if not handled properly.\n\n## Mitigation Advice\n\nAvoid using unsafe C functions like `atoi()`. Instead, use safer alternatives that perform error checking. In the case of `atoi()`, a safer alternative is `strtol()`, which allows you to check if the entire string was successfully converted to an integer.\n\n## Source Code Fix Recommendation\n\nReplace `atoi()` with `strtol()`. Here is an example:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nconst char *str = \"123\";\nchar *end;\nlong num = strtol(str, &end, 10);\n\nif (end == str || *end != '\\0' || errno == ERANGE) {\n    // str was not a valid integer\n} else {\n    // num is the converted integer\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- cstdlib\n- cerrno\n\n## References\n\n- [OWASP C++](https://owasp.org/www-community/attacks/Buffer_overflow_attack)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "7e2f8462-f030-3edb-bc97-abce2686b4fd",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcat` function in C++ is used to concatenate strings. However, it is considered unsafe because it does not perform bounds checking, and thus can lead to buffer overflow vulnerabilities. This can potentially allow an attacker to execute arbitrary code or cause a denial of service.\n\nThe specific vulnerability sink in question is `strcat(cmd_c, \" -vv \")`. Here, `strcat` is used to append the string \" -vv \" to the string `cmd_c`. If `cmd_c` does not have enough space to hold the additional characters, a buffer overflow will occur.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should avoid using `strcat` and instead use safer string handling functions that perform bounds checking, such as `strncat` or `strlcat`. These functions take an additional parameter that specifies the maximum number of characters to be appended, thus preventing buffer overflow.\n\n## Source Code Fix Recommendation\n\nReplace the `strcat` function with `strncat` or `strlcat` as follows:\n\n```cpp\n// Assuming cmd_c has size cmd_c_size\nstrncat(cmd_c, \" -vv \", cmd_c_size - strlen(cmd_c) - 1);\n```\n\nThis will ensure that no more than `cmd_c_size - strlen(cmd_c) - 1` characters are appended to `cmd_c`, preventing buffer overflow.\n\n## Library Dependencies\n\nThe code example requires the `<cstring>` library in C++.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')](https://cwe.mitre.org/data/definitions/120.html)"
              },
              "properties": {
                "tags": [
                  "DS141863"
                ]
              }
            },
            {
              "id": "750a2c20-5b27-39c3-937c-498222b24db5",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of certain C standard library functions that are considered unsafe due to their potential to cause buffer overflows, format string vulnerabilities, or other issues that can lead to arbitrary code execution or denial of service. \n\nOne such function is `atoi()`, which converts a string to an integer. The `atoi()` function does not perform any error checking, so if the string cannot be converted into an integer, it will return zero, which can lead to unexpected behavior if not handled properly.\n\n## Mitigation Advice\n\nAvoid using unsafe C functions like `atoi()`. Instead, use safer alternatives that perform error checking. In the case of `atoi()`, a safer alternative is `strtol()`, which allows you to check if the entire string was successfully converted to an integer.\n\n## Source Code Fix Recommendation\n\nReplace `atoi()` with `strtol()`. Here is an example:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nconst char *str = \"123\";\nchar *end;\nlong num = strtol(str, &end, 10);\n\nif (end == str || *end != '\\0' || errno == ERANGE) {\n    // str was not a valid integer\n} else {\n    // num is the converted integer\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- cstdlib\n- cerrno\n\n## References\n\n- [OWASP C++](https://owasp.org/www-community/attacks/Buffer_overflow_attack)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "768b2c9a-acad-3e03-ad0d-fe9a0edf153e",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcat` function in C++ is used to concatenate strings. However, it is considered unsafe because it does not perform bounds checking, and thus can lead to buffer overflow vulnerabilities. This can potentially allow an attacker to execute arbitrary code or cause a denial of service.\n\nThe specific vulnerability sink in the provided code is:\n\n```cpp\nstrcat(cmd_c, \" -k \");\n```\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer string handling functions that perform bounds checking, such as `strncat`, `strlcat`, or `snprintf`. These functions prevent buffer overflow by ensuring that the destination buffer is not overrun.\n\n## Source Code Fix Recommendation\n\nHere is a recommended fix for the provided code using `strncat`:\n\n```cpp\nsize_t len = strlen(cmd_c);\nstrncat(cmd_c, \" -k \", sizeof(cmd_c) - len - 1);\n```\n\nThis code ensures that the concatenation does not exceed the size of the destination buffer, thus preventing buffer overflow.\n\n## Library Dependencies\n\nThe code example requires the following library to execute properly:\n\n```cpp\n#include <cstring>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')](https://cwe.mitre.org/data/definitions/120.html)\n\nPlease note that the links provided are active and accessible to anonymous users at the time of writing."
              },
              "properties": {
                "tags": [
                  "DS141863"
                ]
              }
            },
            {
              "id": "d1c93352-875a-3602-8f52-24e8515c10f6",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of certain C standard library functions that are considered unsafe due to their potential to cause buffer overflows, format string vulnerabilities, or other issues that can lead to arbitrary code execution or denial of service. \n\nOne such function is `atoi()`, which converts a string to an integer. The `atoi()` function does not perform any error checking, so if the string cannot be converted into an integer, it will return zero, which can lead to unexpected behavior if not handled properly.\n\n## Mitigation Advice\n\nAvoid using unsafe C functions like `atoi()`. Instead, use safer alternatives that perform error checking. In the case of `atoi()`, a safer alternative is `strtol()`, which allows you to check if the entire string was successfully converted to an integer.\n\n## Source Code Fix Recommendation\n\nReplace `atoi()` with `strtol()`. Here is an example:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nconst char *str = \"123\";\nchar *end;\nlong num = strtol(str, &end, 10);\n\nif (end == str || *end != '\\0' || errno == ERANGE) {\n    // str was not a valid integer\n} else {\n    // num is the converted integer\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- cstdlib\n- cerrno\n\n## References\n\n- [OWASP C++](https://owasp.org/www-community/attacks/Buffer_overflow_attack)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "038eac36-e3d0-3563-b572-bd3f35d81dff",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of certain C standard library functions that are considered unsafe due to their potential to cause buffer overflows, format string vulnerabilities, or other issues that can lead to arbitrary code execution or denial of service. \n\nOne such function is `atoi()`, which converts a string to an integer. The `atoi()` function does not perform any error checking, so if the string cannot be converted into an integer, it will return zero, which can lead to unexpected behavior if not handled properly.\n\n## Mitigation Advice\n\nAvoid using unsafe C functions like `atoi()`. Instead, use safer alternatives that perform error checking. In the case of `atoi()`, a safer alternative is `strtol()`, which allows you to check if the entire string was successfully converted to an integer.\n\n## Source Code Fix Recommendation\n\nReplace `atoi()` with `strtol()`. Here is an example:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nconst char *str = \"123\";\nchar *end;\nlong num = strtol(str, &end, 10);\n\nif (end == str || *end != '\\0' || errno == ERANGE) {\n    // str was not a valid integer\n} else {\n    // num is the converted integer\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- cstdlib\n- cerrno\n\n## References\n\n- [OWASP C++](https://owasp.org/www-community/attacks/Buffer_overflow_attack)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "add56d38-dc5b-3349-8b29-cb9a74b86fdd",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of certain C standard library functions that are considered unsafe due to their potential to cause buffer overflows, format string vulnerabilities, or other issues that can lead to arbitrary code execution or denial of service. \n\nOne such function is `atoi()`, which converts a string to an integer. The `atoi()` function does not perform any error checking, so if the string cannot be converted into an integer, it will return zero, which can lead to unexpected behavior if not handled properly.\n\n## Mitigation Advice\n\nAvoid using unsafe C functions like `atoi()`. Instead, use safer alternatives that perform error checking. In the case of `atoi()`, a safer alternative is `strtol()`, which allows you to check if the entire string was successfully converted to an integer.\n\n## Source Code Fix Recommendation\n\nReplace `atoi()` with `strtol()`. Here is an example:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nconst char *str = \"123\";\nchar *end;\nlong num = strtol(str, &end, 10);\n\nif (end == str || *end != '\\0' || errno == ERANGE) {\n    // str was not a valid integer\n} else {\n    // num is the converted integer\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- cstdlib\n- cerrno\n\n## References\n\n- [OWASP C++](https://owasp.org/www-community/attacks/Buffer_overflow_attack)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "ad361406-a6cb-3d10-a7c3-144a48650f2e",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of certain C standard library functions that are considered unsafe due to their potential to cause buffer overflows, format string vulnerabilities, or other issues that can lead to arbitrary code execution or denial of service. \n\nOne such function is `atoi()`, which converts a string to an integer. The `atoi()` function does not perform any error checking, so if the string cannot be converted into an integer, it will return zero, which can lead to unexpected behavior if not handled properly.\n\n## Mitigation Advice\n\nAvoid using unsafe C functions like `atoi()`. Instead, use safer alternatives that perform error checking. In the case of `atoi()`, a safer alternative is `strtol()`, which allows you to check if the entire string was successfully converted to an integer.\n\n## Source Code Fix Recommendation\n\nReplace `atoi()` with `strtol()`. Here is an example:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nconst char *str = \"123\";\nchar *end;\nlong num = strtol(str, &end, 10);\n\nif (end == str || *end != '\\0' || errno == ERANGE) {\n    // str was not a valid integer\n} else {\n    // num is the converted integer\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- cstdlib\n- cerrno\n\n## References\n\n- [OWASP C++](https://owasp.org/www-community/attacks/Buffer_overflow_attack)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "30265d68-fefb-3b44-b474-a7e2d3c83750",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of certain C standard library functions that are considered unsafe due to their potential to cause buffer overflows, format string vulnerabilities, or other issues that can lead to arbitrary code execution or denial of service. \n\nOne such function is `atoi()`, which converts a string to an integer. The `atoi()` function does not perform any error checking, so if the string cannot be converted into an integer, it will return zero, which can lead to unexpected behavior if not handled properly.\n\n## Mitigation Advice\n\nAvoid using unsafe C functions like `atoi()`. Instead, use safer alternatives that perform error checking. In the case of `atoi()`, a safer alternative is `strtol()`, which allows you to check if the entire string was successfully converted to an integer.\n\n## Source Code Fix Recommendation\n\nReplace `atoi()` with `strtol()`. Here is an example:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nconst char *str = \"123\";\nchar *end;\nlong num = strtol(str, &end, 10);\n\nif (end == str || *end != '\\0' || errno == ERANGE) {\n    // str was not a valid integer\n} else {\n    // num is the converted integer\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- cstdlib\n- cerrno\n\n## References\n\n- [OWASP C++](https://owasp.org/www-community/attacks/Buffer_overflow_attack)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "36e1b8ab-234f-38b4-a31b-722c8ae30384",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, integer overflows, etc. In the provided code snippet, the function `atoi()` is used, which is a prohibited C function. The `atoi()` function converts a string to an integer and it does not perform any error checking. This can lead to integer overflow or underflow if the string represents a number outside the range of representable integer values.\n\n## Mitigation Advice\n\nAvoid using insecure C library functions. Instead, use safer alternatives that perform error checking. For example, instead of `atoi()`, you can use `strtol()` or `sscanf()`, which provide error checking.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi()` function with `strtol()`. Here is the fixed code:\n\n```cpp\nchar *end;\nlong int value = strtol(buf.c_str(), &end, 10);\nif (end == buf.c_str()) {\n    // handle error: no conversion could be performed\n} else if ('\\0' != *end) {\n    // handle error: further characters after number\n} else if ((LONG_MAX == value || LONG_MIN == value) && ERANGE == errno) {\n    // handle error: out of range\n} else {\n    kernelMD->kernargSegmentSize_ = value;\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following libraries:\n\n- `#include <climits>` for `LONG_MAX` and `LONG_MIN`\n- `#include <cerrno>` for `errno`\n- `#include <cstdlib>` for `strtol()`\n\n## References\n\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "616d86bd-04b8-36af-908a-a6925430c25b",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, integer overflows, etc. In this case, the function `atoi()` is used, which can lead to integer overflow if the input string represents a number larger than `INT_MAX`.\n\n## Mitigation Advice\n\nAvoid using C library functions that do not perform bounds checking or input validation. Instead, use safer alternatives provided by the C++ Standard Library. For instance, instead of `atoi()`, you can use `std::stoi()` which throws an exception if the conversion cannot be performed or if the converted value is out of range.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi()` function with `std::stoi()`. Make sure to handle the possible exceptions.\n\n```cpp\n#include <string>\n#include <stdexcept>\n\n// ...\n\ntry {\n    lcArg->offset_ = std::stoi(buf);\n} catch (const std::invalid_argument& ia) {\n    // Handle the case where 'buf' cannot be converted to an integer\n} catch (const std::out_of_range& oor) {\n    // Handle the case where the converted value is out of range\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<string>`: for `std::string` and `std::stoi()`\n- `<stdexcept>`: for `std::invalid_argument` and `std::out_of_range`\n\n## References\n\n- [CWE-190: Integer Overflow or Wraparound](https://cwe.mitre.org/data/definitions/190.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "b8e21c9f-1ccd-3a95-95de-2b97d892ab2f",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcat` function in C++ is used to concatenate strings. However, it is considered unsafe because it does not perform bounds checking, and thus can lead to buffer overflow vulnerabilities. This can allow an attacker to overwrite adjacent memory and execute arbitrary code.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use safer string handling functions that perform bounds checking, such as `strncat`. Always ensure that the destination buffer is large enough to hold the concatenated result plus the null terminator.\n\n## Source Code Fix Recommendation\n\nReplace the `strcat` function with `strncat` and ensure the size argument is correct. Here is an example:\n\n```cpp\n// Assuming cmd_c is a char array of size 256\nstrncat(cmd_c, \" -hof \", 256 - strlen(cmd_c) - 1);\n```\n\nThis code will prevent buffer overflow by ensuring that no more than `256 - strlen(cmd_c) - 1` characters are written to `cmd_c`.\n\n## Library Dependencies\n\nThe code example requires the `<cstring>` library.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')](https://cwe.mitre.org/data/definitions/120.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS141863"
                ]
              }
            },
            {
              "id": "95f270d8-f6ac-394a-8e80-303031b6fa77",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that occurs when a C++ program uses a function that is considered unsafe due to its potential to cause buffer overflows, format string vulnerabilities, or other types of security issues. In this case, the function `atoi()` is used, which can lead to integer overflow or underflow if the input string represents a number outside the range of representable integer values.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to these functions that include proper error handling and boundary checks. For `atoi()`, a safer alternative is `strtol()` or `std::stoi()`, which can detect and handle numeric overflow.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi()` function with `std::stoi()`. Here is the fixed code:\n\n```cpp\ntry {\n    lcArg->align_ = std::stoi(buf);\n} catch (const std::out_of_range& oor) {\n    std::cerr << \"Out of Range error: \" << oor.what() << '\\n';\n} catch (const std::invalid_argument& ia) {\n    std::cerr << \"Invalid argument: \" << ia.what() << '\\n';\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<string>` for `std::stoi()`\n- `<stdexcept>` for `std::out_of_range` and `std::invalid_argument`\n- `<iostream>` for `std::cerr`\n\n## References\n\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "40a1f8b3-8be4-365e-9d80-72a07c2e3125",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure C library functions in C++ code. These functions are often prone to buffer overflow attacks, format string vulnerabilities, or integer overflows. In this case, the `atoi()` function is used, which can lead to integer overflow if the input string represents a number larger than `INT_MAX`.\n\n## Mitigation Advice\n\nAvoid using C library functions that do not perform bounds checking or input validation. Instead, use safer alternatives provided by the C++ Standard Library. For instance, instead of `atoi()`, you can use `std::stoi()`, which throws an exception if the input string cannot be converted to an integer or if the converted value is out of the range of representable values by an `int`.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi()` function with `std::stoi()`. Here is the fixed code:\n\n```cpp\ntry {\n    lcArg->size_ = std::stoi(buf);\n} catch (std::invalid_argument& e) {\n    // Handle exception: input string cannot be converted to an integer\n} catch (std::out_of_range& e) {\n    // Handle exception: converted value is out of the range of representable values by an int\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<string>` for `std::stoi()`\n- `<stdexcept>` for `std::invalid_argument` and `std::out_of_range`\n\n## References\n\n- [CWE-190: Integer Overflow or Wraparound](https://cwe.mitre.org/data/definitions/190.html)\n\nPlease note that the links provided are active and accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "04a1c522-5d1c-30d3-94a1-213aeed4bd19",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcat` function in C++ is used to concatenate strings. However, it is considered unsafe because it does not perform bounds checking, and thus can lead to buffer overflow vulnerabilities. This can potentially allow an attacker to execute arbitrary code or cause a denial of service.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer string handling functions that perform bounds checking, such as `strncat`, `strlcat`, or `snprintf`. These functions take an additional parameter that specifies the maximum number of characters to be appended, thus preventing buffer overflow.\n\n## Source Code Fix Recommendation\n\nReplace the `strcat` function with a safer alternative. For example, if `cmd_c` is a character array of size `N`, you can use `strncat` as follows:\n\n```cpp\nstrncat(cmd_c, \" \", N - strlen(cmd_c) - 1);\n```\n\nThis will append at most `N - strlen(cmd_c) - 1` characters from the source string, ensuring that `cmd_c` does not overflow.\n\n## Library Dependencies\n\nThe `strcat` and `strncat` functions are part of the C standard library, so no additional libraries are needed.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS141863"
                ]
              }
            },
            {
              "id": "cb208732-9933-31ee-a892-60f935762267",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcat` function in C++ is used to concatenate strings. However, it is considered unsafe because it does not perform bounds checking, and thus can lead to buffer overflow vulnerabilities. This can potentially allow an attacker to execute arbitrary code or cause a denial of service.\n\nIn the provided code snippet, `strcat(cmd_c, \"-rp /opt/hsa.1_1T \")`, the `strcat` function is used to append the string \"-rp /opt/hsa.1_1T \" to the `cmd_c` string. If the `cmd_c` string does not have enough space to hold the additional characters, a buffer overflow will occur.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use safer string handling functions that perform bounds checking, such as `strncat` or `strlcat`. These functions take an additional parameter that specifies the maximum number of characters to append, preventing buffer overflow.\n\n## Source Code Fix Recommendation\n\nReplace the `strcat` function with `strncat` or `strlcat`:\n\n```cpp\nsize_t len = strlen(cmd_c);\nstrncat(cmd_c, \"-rp /opt/hsa.1_1T \", sizeof(cmd_c) - len - 1);\n```\n\n## Library Dependencies\n\nThe code example requires the `<cstring>` library for the `strcat` function and the `strlen` function.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')](https://cwe.mitre.org/data/definitions/120.html)"
              },
              "properties": {
                "tags": [
                  "DS141863"
                ]
              }
            },
            {
              "id": "4934065a-0db9-34cc-b51b-b4aa4f07f5b5",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcat` function in C++ is used to concatenate strings. However, it is considered unsafe because it does not perform bounds checking, and thus can lead to buffer overflow vulnerabilities. This can potentially allow an attacker to execute arbitrary code or cause a denial of service.\n\nThe specific vulnerability sink in the provided code is:\n\n```cpp\nstrcat(cmd_c, \"-s \")\n```\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer string handling functions that perform bounds checking, such as `strncat`, `strlcat`, or `snprintf`. \n\n## Source Code Fix Recommendation\n\nHere is a recommended fix for the specific vulnerability sink:\n\n```cpp\nstrncat(cmd_c, \"-s \", sizeof(cmd_c) - strlen(cmd_c) - 1);\n```\n\nThis code will ensure that no more than `sizeof(cmd_c) - strlen(cmd_c) - 1` characters are appended to `cmd_c`, preventing a buffer overflow.\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n```cpp\n#include <cstring>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')](https://cwe.mitre.org/data/definitions/120.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS141863"
                ]
              }
            },
            {
              "id": "71963412-af78-351b-bc09-f952fbce3ecb",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcat` function in C++ is used to concatenate strings. However, it does not perform any bounds checking, and thus can lead to buffer overflow vulnerabilities. This is because `strcat` will keep appending data until it hits a null byte (`\\0`), potentially writing past the end of the allocated buffer. This can lead to data corruption, crashes, and code execution vulnerabilities.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should avoid using `strcat` and instead use safer string handling functions that perform bounds checking, such as `strncat`. You should also always ensure that your buffers are large enough to hold all the data that you are putting into them, plus one byte for the null terminator.\n\n## Source Code Fix Recommendation\n\nReplace the `strcat` function with `strncat` and ensure the buffer is large enough. Here is an example of how to do this:\n\n```cpp\n// Ensure cmd_c is large enough to hold symbolname plus one byte for the null terminator.\nchar cmd_c[CMD_C_SIZE];\nstrncpy(cmd_c, symbolname, CMD_C_SIZE - 1);\ncmd_c[CMD_C_SIZE - 1] = '\\0'; // Ensure null termination.\n```\n\n## Library Dependencies\n\nThe code example requires the `<cstring>` library.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')](https://cwe.mitre.org/data/definitions/120.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS141863"
                ]
              }
            },
            {
              "id": "37e7f7d2-9091-3c31-94a2-c7336803e87e",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcat` function in C++ is used to concatenate strings. However, it is considered unsafe because it does not perform bounds checking, and thus can lead to buffer overflow vulnerabilities. This can potentially allow an attacker to execute arbitrary code or cause a denial of service.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer string handling functions that perform bounds checking, such as `strncat`, `strlcat`, or `snprintf`. These functions take an additional parameter that specifies the maximum number of characters to be appended, thus preventing buffer overflow.\n\n## Source Code Fix Recommendation\n\nReplace the `strcat` function with a safer alternative. For example, if `cmd_c` is a character array of size `N`, you can use `strncat` as follows:\n\n```cpp\nstrncat(cmd_c, \" \", N - strlen(cmd_c) - 1);\n```\n\nThis will append at most `N - strlen(cmd_c) - 1` characters from the source string, ensuring that `cmd_c` does not overflow.\n\n## Library Dependencies\n\nThe `strcat` and `strncat` functions are part of the C standard library, so no additional libraries are needed.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS141863"
                ]
              }
            },
            {
              "id": "40895d25-e2eb-39bb-aa67-2cd80e8a73b3",
              "help": {
                "text": "",
                "markdown": "This finding is classified as a genuine vulnerability because the analysis identified a risk of undefined behavior due to possible overlap between the source and destination memory regions in the memory copy operation. The destination and source may refer to overlapping memory, as indicated by the dataflow analysis. The verdict is marked as genuine, and the classification specifically highlights undefined behavior risk. There are no explicit checks or guards in the code to prevent this overlap, and neither the source nor the destination is likely to be null at this point, which means the main risk is the potential for memory corruption or unpredictable behavior if the regions overlap. This type of issue can lead to subtle bugs or security vulnerabilities in the application.\n\n## In Context Remediation\nTo prevent undefined behavior when copying memory regions that may overlap, use `memmove` instead of `memcpy`. `memmove` is specifically designed to handle overlapping source and destination regions safely. Replace the original memory copy operation with:\n\n```cpp\nmemmove(addr, compute_task->kernarg_region_, size_to_copy);\n```\n\nThis change ensures that the copy will work correctly even if the source and destination regions overlap, eliminating the risk of undefined behavior.\n\n## References\n- [OWASP: Buffer Overflow](https://owasp.org/www-community/vulnerabilities/Buffer_Overflow)\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)\n- [CWE-787: Out-of-bounds Write](https://cwe.mitre.org/data/definitions/787.html)\n\n\n___\n"
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "b18679c8-e370-30cc-bac4-0fda5b4bee09",
              "help": {
                "text": "",
                "markdown": "This finding is classified as a genuine vulnerability because the analysis identified a risk of undefined behavior due to possible overlap between the source and destination memory regions in the memory copy operation. The destination and source expressions are derived from potentially related data structures, and dataflow analysis suggests that the destination may be reachable from the source, which can cause undefined behavior with standard memory copy functions. Additionally, the analysis could not rule out the possibility that the source pointer may be null, further increasing the risk. There are no explicit checks or guards in the code to prevent these issues, and the verdict is marked as genuine. Developers should ensure that the source and destination do not overlap and that the source pointer is valid before performing the copy.\n\n## In Context Remediation\nBefore performing the memory copy, ensure that the source and destination memory regions do not overlap. If overlap is possible, use a memory-safe function or add explicit checks. For example, you can add a runtime check to verify that the source and destination do not overlap:\n\n```cpp\nvoid* dst = thisKernargAddress + kernel_impl->arg_offsets()[i];\nvoid* src = args[i];\nsize_t size = kernel_->arg_sizes()[i];\n\nif ((char*)dst + size <= (char*)src || (char*)src + size <= (char*)dst) {\n    memcpy(dst, src, size);\n} else {\n    // Handle overlap safely, e.g., use memmove or report an error\n    memmove(dst, src, size);\n}\n```\n\nAdditionally, ensure that the source pointer is not null before copying:\n\n```cpp\nif (src != nullptr) {\n    // ... perform copy as above\n}\n```\n\n## References\n- [OWASP C-Based Toolchain Hardening Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)\n- [CWE-787: Out-of-bounds Write](https://cwe.mitre.org/data/definitions/787.html)\n- [CWE-124: Buffer Underwrite ('Buffer Underflow')](https://cwe.mitre.org/data/definitions/124.html)\n- [CWE-476: NULL Pointer Dereference](https://cwe.mitre.org/data/definitions/476.html)\n- [OWASP Buffer Overflow](https://owasp.org/www-community/vulnerabilities/Buffer_Overflow)\n\n___\n"
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "187b003a-81af-3b04-840b-9582380a532e",
              "help": {
                "text": "",
                "markdown": "This finding is classified as a genuine vulnerability because the analysis identified a risk of undefined behavior due to possible overlap between the source and destination memory regions in the memory copy operation. The destination and source expressions are determined to potentially refer to overlapping memory, as indicated by the dataflow analysis. The verdict is marked as 'GENUINE', and the classification explicitly states an undefined behavior risk. There are no explicit checks or guards in the code to prevent this overlap, and neither the source nor the destination pointers are guaranteed to be non-overlapping. The source and destination are not null at this point, so the main concern is the overlap, which can cause unpredictable program behavior. This type of issue is critical in C/C++ as it can lead to data corruption or crashes.\n\n## In Context Remediation\nTo prevent undefined behavior when copying memory regions that may overlap, use `memmove` instead of `memcpy`. `memmove` is specifically designed to handle overlapping source and destination regions safely. Replace the original memory copy operation with:\n\n```cpp\nmemmove(addr, compute_task->kernarg_region_, size_to_copy);\n```\n\nThis change ensures that the copy will work correctly even if the source and destination regions overlap, eliminating the risk of undefined behavior.\n\n## References\n- [OWASP: Buffer Overflow](https://owasp.org/www-community/vulnerabilities/Buffer_Overflow)\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)\n- [CWE-787: Out-of-bounds Write](https://cwe.mitre.org/data/definitions/787.html)\n- [C-Based Toolchain Hardening Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n\n___\n"
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "bf7573d8-d1c8-3418-865c-537f296abf4f",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe \"Prohibited C Function Identified\" vulnerability refers to the use of certain C functions that are considered unsafe due to their potential to cause buffer overflows, format string vulnerabilities, or other security issues. In this case, the function `strtok()` is identified as a potential vulnerability sink. The `strtok()` function is used to split a string into tokens but it is not thread-safe and can lead to data races in multi-threaded programs.\n\n## Mitigation Advice\n\nAvoid using `strtok()`. Instead, consider using safer alternatives such as `strtok_s()` or `strtok_r()`, which are thread-safe versions of `strtok()`. Also, always ensure that input data is properly validated and sanitized to prevent injection attacks.\n\n## Source Code Fix Recommendation\n\nReplace `strtok(cmd_c, \"\\n\")` with `strtok_s(cmd_c, \"\\n\", &next_token)`. Here, `next_token` is a pointer to a character pointer that is used to store the context between successive calls to `strtok_s()`.\n\n```cpp\nchar *next_token = NULL;\nstrtok_s(cmd_c, \"\\n\", &next_token);\n```\n\n## Library Dependencies\n\nThe code example requires the `cstring` library.\n\n```cpp\n#include <cstring>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "d81c6844-33cc-3a0e-8207-55d81e974d82",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strcpy` function in C++ is a standard library function that copies a string. However, it is considered unsafe because it does not check the size of the destination buffer, which can lead to buffer overflow if the source string is larger than the destination buffer. This can cause a program to crash or, in the worst case, allow an attacker to execute arbitrary code.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use safer string copy functions that check the size of the destination buffer. These include `strncpy`, `strlcpy`, or `memcpy`. However, these functions also have their own issues and should be used carefully.\n\n## Source Code Fix Recommendation\n\nReplace the `strcpy` function with `strncpy` or `memcpy`. Here is an example using `strncpy`:\n\n```cpp\nstrncpy(cmd_c, cmd.c_str(), sizeof(cmd_c) - 1);\ncmd_c[sizeof(cmd_c) - 1] = '\\0';\n```\n\nAnd here is an example using `memcpy`:\n\n```cpp\nstd::size_t length = std::min(cmd.size(), sizeof(cmd_c) - 1);\nstd::memcpy(cmd_c, cmd.c_str(), length);\ncmd_c[length] = '\\0';\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstring>` for `strcpy`, `strncpy`, and `memcpy`\n- `<algorithm>` for `std::min`\n- `<string>` for `std::string`\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)"
              },
              "properties": {
                "tags": [
                  "DS185832"
                ]
              }
            },
            {
              "id": "5684e55f-8a59-3491-ae67-8189fba1c82b",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure or unsafe C library functions in the C++ code. These functions are often prone to buffer overflow attacks, format string vulnerabilities, or other types of security issues. In the provided code snippet, the `fprintf` function is used, which can lead to format string vulnerabilities if not used carefully.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to these functions. For instance, instead of using `fprintf`, consider using `snprintf` or `vsnprintf` which are safer as they take the size of the buffer as an argument, preventing buffer overflow attacks.\n\n## Source Code Fix Recommendation\n\nHere is a fixed version of the code:\n\n```cpp\nchar buffer[1024];\nsnprintf(buffer, sizeof(buffer), \"\\\nstatic int g_initialized = 0;\\n\\n\\\natmi_klist_t *atmi_klist;\\n\\\n#define ErrorCheck(msg, status) \\\\\\n\\\nif (status != ATMI_STATUS_SUCCESS) { \\\\\\n\\\n   printf(\\\"%%s failed.\\\\n\\\", #msg); \\\\\\n\\\n} \\n\\n\\\nextern _CPPSTRING_ void atl_kl_init(atmi_klist_t *atmi_klist, atmi_kernel_t kernel, const int pif_id); \\n\\\nvoid kl_init(); \\n\\n\\\n\");\nfwrite(buffer, sizeof(char), sizeof(buffer), fp);\n```\n\n## Library Dependencies\n\nThe code example requires the following libraries to execute properly:\n\n- `stdio.h` for `fprintf`, `snprintf`, and `fwrite` functions.\n- `atmi.h` for `atmi_klist_t` and `atmi_kernel_t` types (assuming these are defined in this library).\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "1bff6fa4-a9e1-3e41-a2b2-a831c4831f3c",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe \"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of insecure or unsafe C library functions. These functions can lead to various security issues such as buffer overflows, format string vulnerabilities, integer overflows, etc. In this case, the `fprintf` function is used, which can lead to format string vulnerabilities if not used properly.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to these functions. For instance, instead of `fprintf`, one can use `fputs` or `fwrite` which do not interpret the format string. Also, always validate and sanitize input data before using it in such functions.\n\n## Source Code Fix Recommendation\n\nHere is a safer version of the code:\n\n```cpp\nfputs(\"#ifdef __cplusplus \\n\\\n#define _CPPSTRING_ \\\"C\\\" \\n\\\n#endif \\n\\\n#ifndef __cplusplus \\n\\\n#define _CPPSTRING_ \\n\\\n#endif \\n\\n\", fp);\n```\n\n## Library Dependencies\n\nThe code example requires the following library to execute properly:\n\n- `stdio.h`\n\n## OWASP Resources\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "cd5b0628-2541-35ef-92ae-abd11b6019a3",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe \"Detected Prohibited C Function\" vulnerability refers to the use of insecure or unsafe C functions in the code. In this case, the `fprintf` function is used, which can lead to various security issues such as buffer overflow attacks. This is because `fprintf` does not perform bounds checking, and if the data written to the file is larger than the buffer size, it can overwrite adjacent memory.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to `fprintf` that perform bounds checking, such as `snprintf`. Also, always validate and sanitize input data before using it in file operations.\n\n## Source Code Fix Recommendation\n\nReplace the `fprintf` function with `snprintf` as shown below:\n\n```cpp\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"\\\n#include \\\"atmi.h\\\"\\n\\\n#include \\\"atmi_runtime.h\\\"\\n\\\n#include <stdio.h>\\n\\\n#include \\\"atmi_kl.h\\\"\\n\\n\");\nfwrite(buffer, sizeof(char), sizeof(buffer), fp);\n```\n\n## Library Dependencies\n\nThe code example requires the following libraries:\n\n- `stdio.h`: Standard input/output functions in C.\n- `atmi.h`: Header file for the ATMI library.\n- `atmi_runtime.h`: Header file for the ATMI runtime library.\n- `atmi_kl.h`: Header file for the ATMI KL library.\n\n## References\n\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "0dc36d3f-6713-3b95-af75-1386fd1f48fa",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "616b90e8-39b4-3366-a3a4-d6c5d9c859bb",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "0a266d97-e294-368a-89a3-ca6eb779760e",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "9e8ab1f6-daa0-343a-b77c-1acbc838b802",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "5058c66b-e01b-3e47-ae5a-1e5345a77d2a",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "7baf7a1a-ff3c-34ce-b007-5922423ea701",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "6fb8cdc2-c68b-310e-b609-3b4be96b9741",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "5965d1c0-ed47-3799-951e-e1b005d1c77b",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "e2724d18-59d3-317c-89c3-51c74f63dd13",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "38bd9dba-28c5-3e9d-b520-68e8dbf39cfa",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "427c4db7-1674-3049-81cd-c1440d6abe3a",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of insecure or unsafe C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, integer overflows, etc. In this case, the `getenv` function is used, which can lead to security vulnerabilities. The `getenv` function returns a pointer to a string that is associated with the matched environment variable name. This can lead to potential issues if the environment variable is controlled by an attacker.\n\n## Mitigation Advice\n\nAvoid using `getenv` function directly. Instead, use a safer alternative that does not have the same vulnerabilities. Validate all inputs and outputs where possible. Do not trust data from sources you do not control.\n\n## Source Code Fix Recommendation\n\nInstead of using `getenv` directly, consider using a safer alternative. For example, you can use a function that checks the validity of the environment variable before using it. Here is a simple example:\n\n```cpp\nconst char* getEnvVar(const char* name) {\n    const char* value = getenv(name);\n    if (value == nullptr) {\n        // Handle error: environment variable not found\n    } else if (value[0] == '\\0') {\n        // Handle error: environment variable is empty\n    } else {\n        // Environment variable is valid\n        return value;\n    }\n}\n\n// Usage\ngpu_workers = getEnvVar(\"ATMI_DEVICE_GPU_WORKERS\");\n```\n\n## Library Dependencies\n\nThe code example requires the following library to execute properly:\n\n- `cstdlib` (for `getenv` function)\n\n## OWASP and CWE Links\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)\n\nPlease note that the links provided are valid and active for anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "dc1054e8-260a-32bd-a356-9d0908e43b95",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure C library functions in C++ code. These functions are often prone to buffer overflow attacks, format string vulnerabilities, or integer overflows. In this case, the function `atoi()` is used, which can lead to integer overflow if the input string represents a number larger than `INT_MAX`.\n\n## Mitigation Advice\n\nAvoid using insecure C library functions. Instead, use safer alternatives provided by the C++ Standard Library. For `atoi()`, a safer alternative is `std::stoi()`, which throws an exception if the input string represents a number larger than `INT_MAX`.\n\n## Source Code Fix Recommendation\n\nReplace `atoi(token3)` with `std::stoi(token3)`. Here is the fixed code:\n\n```cpp\ntry {\n    offset = std::stoi(token3);\n} catch (const std::out_of_range& oor) {\n    std::cerr << \"Out of Range error: \" << oor.what() << '\\n';\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>` for `atoi()`\n- `<string>` for `std::stoi()`\n- `<iostream>` for `std::cerr`\n\n## References\n\n- [CWE-190: Integer Overflow or Wraparound](https://cwe.mitre.org/data/definitions/190.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "91c5769e-962e-3a29-bcb5-eb16561a82e5",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe \"Detected Prohibited C Function\" vulnerability in C++ refers to the use of certain C library functions that are considered unsafe due to their potential to cause buffer overflows, format string vulnerabilities, or other security issues. In this case, the `atoi()` function is used, which can lead to integer overflow or underflow if the input string represents a number outside the range of representable integer values.\n\n## Mitigation Advice\n\nAvoid using unsafe C library functions. Instead, use safer alternatives provided by the C++ Standard Library. For instance, instead of `atoi()`, you can use `std::stoi()`, which throws an exception if the conversion fails or if the converted value is out of range.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi()` function with `std::stoi()`. Here's how you can modify the code:\n\n```cpp\n#include <string>\n\nint num_cus = token3 ? std::stoi(token3) - offset + 1 : 1;\n```\n\nNote that `std::stoi()` may throw an exception, so you should use a try-catch block to handle any potential exceptions.\n\n## Library Dependencies\n\nThe code example requires the following library:\n\n- `<string>`: This is required for the `std::stoi()` function.\n\n## References\n\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "41ba1b3d-639f-3b69-bbcc-64e3b8abcdcc",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of certain C standard library functions that are known to be risky due to their potential to create buffer overflows, format string vulnerabilities, or other issues. In this case, the function `atoi()` is used, which can lead to integer overflow or underflow if the input is not properly validated.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to avoid using risky C functions and instead use safer alternatives provided by the C++ standard library. In this case, `atoi()` can be replaced with `std::stoi()`, which throws an exception if the conversion fails.\n\n## Source Code Fix Recommendation\n\nHere is a fixed version of the code:\n\n```cpp\n#include <string>\n#include <stdexcept>\n\n// ...\n\ntry {\n    gpu_id = (std::stoi(argv[1]) % gpu_count);\n} catch (std::invalid_argument& e) {\n    // Handle exception: input is not a valid integer\n} catch (std::out_of_range& e) {\n    // Handle exception: input is out of range for an integer\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<string>`: for `std::stoi()`\n- `<stdexcept>`: for `std::invalid_argument` and `std::out_of_range`\n\n## OWASP Resources\n\n- [OWASP C++ Secure Coding Practices Guide](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)\n- [CWE-190: Integer Overflow or Wraparound](https://cwe.mitre.org/data/definitions/190.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "ba29ce7f-1ba9-3f8f-a337-dcb88af5985f",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strlen` function in C++ is used to calculate the length of a string. However, it can lead to vulnerabilities if not used properly. The function counts the number of characters in a string until it reaches a null character (`\\0`). If the string is not null-terminated, `strlen` will continue reading memory until it encounters a null character, potentially leading to buffer overflows, memory corruption, and other undefined behaviors.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always ensure that your strings are null-terminated. Avoid using `strlen` on strings that come from untrusted sources without validation. Consider using safer alternatives such as `strnlen`, which takes an additional parameter to specify the maximum length of the string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nstrlength = strlen(input);\n```\n\nYou could use:\n\n```cpp\nstrlength = strnlen(input, MAX_LENGTH);\n```\n\nWhere `MAX_LENGTH` is the maximum expected length of the string. This will prevent `strnlen` from reading beyond the specified limit, even if it doesn't encounter a null character.\n\n## Library Dependencies\n\nThe `strlen` function is part of the C standard library, so no additional libraries are needed for the code to execute properly.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-126: Buffer Over-read](https://cwe.mitre.org/data/definitions/126.html)"
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "47d387c1-b649-3e7c-a4fe-b0b8dc8550fc",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strlen` function in C++ is used to calculate the length of a string. However, it can lead to vulnerabilities if not used properly. The function counts the number of characters in a string until it reaches a null character (`\\0`). If the string is not null-terminated, `strlen` will continue reading memory until it encounters a null character, potentially leading to buffer overflows, memory corruption, and other undefined behaviors.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always ensure that your strings are null-terminated. Avoid using `strlen` on strings that come from untrusted sources without validation. Consider using safer alternatives such as `strnlen`, which takes an additional parameter to specify the maximum length of the string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nstrlength = strlen(input);\n```\n\nYou could use:\n\n```cpp\nstrlength = strnlen(input, MAX_LENGTH);\n```\n\nWhere `MAX_LENGTH` is the maximum expected length of the string. This will prevent `strnlen` from reading beyond the specified limit, even if it doesn't encounter a null character.\n\n## Library Dependencies\n\nThe `strlen` function is part of the C standard library, so no additional libraries are needed for the code to execute properly.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-126: Buffer Over-read](https://cwe.mitre.org/data/definitions/126.html)"
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "47abf0f2-852c-3edf-ba07-9d3ac488ccb0",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of functions that are considered unsafe due to their potential to cause buffer overflows, format string vulnerabilities, or other types of security issues. In this case, the vulnerability sink is `argv[1] != NULL`. This is a check to see if a command line argument was provided, but it does not validate the content of the argument, which could lead to security issues if the argument is used in an unsafe manner.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to always validate and sanitize user input, including command line arguments. This can help prevent buffer overflows, format string vulnerabilities, and other types of security issues. Additionally, consider using safer alternatives to unsafe C functions.\n\n## Source Code Fix Recommendation\n\nHere is a simple fix for the specific vulnerability sink:\n\n```cpp\nif (argv[1] != NULL) {\n    // Use argv[1]\n} else {\n    // Handle the error\n}\n```\n\nThis code checks if `argv[1]` is not `NULL` before using it, which can help prevent null pointer dereference issues. However, this does not validate the content of `argv[1]`, so additional validation and sanitization may be needed depending on how `argv[1]` is used.\n\n## Library Dependencies\n\nThe code example does not require any library dependencies to execute properly.\n\n## OWASP Resources\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [OWASP Proactive Controls](https://owasp.org/www-project-proactive-controls/)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-628: Function Call with Incorrectly Specified Arguments](https://cwe.mitre.org/data/definitions/628.html)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n\nPlease note that the links provided are valid and active for anonymous users at the time of writing."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "0c5fe526-fbaf-34e0-9bf2-80a0d7ff4c34",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Identified\" is a vulnerability that arises when a C++ program uses a function that is considered unsafe due to its potential to cause buffer overflows, format string vulnerabilities, or other types of security issues. In this case, the `fopen` function is used, which can lead to vulnerabilities if the file name or mode is not properly validated or controlled.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to the `fopen` function. For instance, consider using the `fopen_s` function, which is a more secure version of `fopen`. It's also important to validate and control the file name and mode used with the `fopen` function to prevent potential security issues.\n\n## Source Code Fix Recommendation\n\nHere is a safer version of the code using `fopen_s`:\n\n```cpp\nFILE* fpo = NULL;\nerrno_t err = fopen_s(&fpo, \"result.txt\", \"w\");\nif (err != 0) {\n    // Handle error\n}\n```\n\n## Library Dependencies\n\nThe code example requires the `stdio.h` library.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)\n\nPlease note that the links provided are active and accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "daa39cf4-b313-3b21-8786-f5c24fc853dc",
              "help": {
                "text": "",
                "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of weak or non-cryptographic random number generators that can lead to predictable or easily guessable values. This can be exploited by attackers to predict the outcome of the program, leading to potential security risks.\n\nThe `rand()` function in C++ is a weak random number generator as it uses a deterministic algorithm. This means that given the same seed, it will produce the same sequence of numbers every time. This predictability can be exploited by an attacker.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a strong, cryptographic random number generator instead of `rand()`. In C++, you can use the `<random>` library which provides a variety of random number generators that are more secure and less predictable than `rand()`.\n\n## Source Code Fix Recommendation\n\nReplace the `rand()` function with a secure random number generator from the `<random>` library. Here is an example of how to do this:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> distr(1, 10);\n\ninput_itemsets[j] = distr(gen);\n```\n\nIn this code, `std::random_device` is a non-deterministic random number generator, and `std::mt19937` is a Mersenne Twister: a strong pseudo-random number generator. `std::uniform_int_distribution<>` produces integer values evenly distributed across a range.\n\n## Library Dependencies\n\nThe code example requires the `<random>` library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
              },
              "properties": {
                "tags": [
                  "DS148264",
                  "daa39cf4-b313-3b21-8786-f5c24fc853dc"
                ]
              }
            },
            {
              "id": "5b93c81c-132d-3f10-ae53-d5571d62b29f",
              "help": {
                "text": "",
                "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of weak or non-cryptographic random number generators that can lead to predictable or easily guessable values. This can be exploited by attackers to predict the outcome of the program, leading to potential security risks.\n\nThe `rand()` function in C++ is a weak random number generator as it uses a deterministic algorithm. This means that given the same seed, it will produce the same sequence of numbers every time. This predictability can be exploited by an attacker.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a strong, cryptographic random number generator instead of `rand()`. In C++, you can use the `<random>` library which provides a variety of random number generators that are more secure and less predictable than `rand()`.\n\n## Source Code Fix Recommendation\n\nReplace the `rand()` function with a secure random number generator from the `<random>` library. Here is an example of how to do this:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> distr(1, 10);\n\ninput_itemsets[j] = distr(gen);\n```\n\nIn this code, `std::random_device` is a non-deterministic random number generator, and `std::mt19937` is a Mersenne Twister: a strong pseudo-random number generator. `std::uniform_int_distribution<>` produces integer values evenly distributed across a range.\n\n## Library Dependencies\n\nThe code example requires the `<random>` library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
              },
              "properties": {
                "tags": [
                  "DS148264",
                  "5b93c81c-132d-3f10-ae53-d5571d62b29f"
                ]
              }
            },
            {
              "id": "d69ec9ea-d313-3b0d-8bde-48c74ded6ccb",
              "help": {
                "text": "",
                "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Weak or Non-Cryptographic Random Number Generators\" refers to the use of weak random number generators or non-cryptographic random number generators that can lead to predictable values and hence can be exploited by an attacker. The `rand()` function in C++ is a weak random number generator as it uses a deterministic algorithm and can produce predictable numbers if the seed is known.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a strong cryptographic random number generator. In C++, the `<random>` library provides non-deterministic random number generators such as `std::random_device`, which should be used instead of `rand()`.\n\n## Source Code Fix Recommendation\n\nReplace the `rand()` function with `std::random_device`. Here is how you can do it:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> distr(1, 10);\n\ninput_itemsets[i*max_cols] = distr(gen);\n```\n\n## Library Dependencies\n\nThe code example requires the `<random>` library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
              },
              "properties": {
                "tags": [
                  "DS148264",
                  "d69ec9ea-d313-3b0d-8bde-48c74ded6ccb"
                ]
              }
            },
            {
              "id": "9c0cf185-aea5-3e50-8015-35f572c3ff71",
              "help": {
                "text": "",
                "markdown": "## Description\n\nIn C++ programming, using system time or a static value for randomness seeding can lead to predictable randomness, which is a security vulnerability. This is because the seed value used by the `srand()` function determines the sequence of pseudo-random numbers generated by the `rand()` function. If the seed value is known or predictable, an attacker can predict the sequence of pseudo-random numbers, which can lead to various security vulnerabilities, such as predictability in cryptographic operations.\n\nIn the provided code snippet, `srand(7)` uses a static value (7) as the seed. This means that every time the program runs, the sequence of pseudo-random numbers generated by `rand()` will be the same.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a truly random value as the seed for `srand()`. This can be obtained from a reliable source of randomness provided by the operating system, such as `/dev/urandom` on Unix-like systems or `CryptGenRandom` on Windows.\n\n## Source Code Fix Recommendation\n\nHere is a way to fix the vulnerability in the provided code snippet:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\n```\n\nIn this code, `std::random_device` is a uniformly-distributed integer random number generator that produces non-deterministic random numbers. `std::mt19937` is a Mersenne Twister pseudo-random generator of 32-bit numbers with a state size of 19937 bits.\n\n## Library Dependencies\n\nThe code example requires the `<random>` library.\n\n## References\n\n- [CWE-330: Use of Insufficiently Random Values](https://cwe.mitre.org/data/definitions/330.html)"
              },
              "properties": {
                "tags": [
                  "DS149435"
                ]
              }
            },
            {
              "id": "59565030-916d-3880-b2ea-1b8ffb1baad2",
              "help": {
                "text": "",
                "markdown": "This finding is classified as 'Likely Vulnerable' because the result of a malloc call is used as the destination in a memcpy operation without a preceding check for NULL. There is no zero guard or overflow guard present for the allocation size, and the first use of the allocated pointer is a memory operation (memcpy) without a null check. This pattern can lead to a null pointer dereference if malloc fails and returns NULL. The presence of a cast does not mitigate the risk. The pointer is freed in the same method, but this does not affect the risk of dereferencing a null pointer. Therefore, this is a genuine vulnerability that should be addressed.\n\n## In Context Remediation\nTo prevent a null pointer dereference after a failed memory allocation, always check the result of malloc before using the pointer. For example, after:\n\n```c\noutput_itemsets = (int*) malloc( max_rows * max_cols * sizeof(int) );\n```\nadd a null check before using `output_itemsets`:\n\n```c\nif (output_itemsets == NULL) {\n    // Handle allocation failure, e.g., print error and exit\n    fprintf(stderr, \"Memory allocation failed for output_itemsets\\n\");\n    exit(EXIT_FAILURE);\n}\n```\nThis ensures that if malloc fails, the program will not attempt to use a null pointer, preventing undefined behavior or crashes.\n\n## References\n- [OWASP C-Based Toolchain Hardening Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-690: Unchecked Return Value to NULL Pointer Dereference](https://cwe.mitre.org/data/definitions/690.html)\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n___\n"
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "948767da-123f-31e4-8b49-5c8da2959e52",
              "help": {
                "text": "",
                "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Weak or Non-Cryptographic Random Number Generators\" refers to the use of weak random number generators or non-cryptographic random number generators that can lead to predictable values and hence can be exploited by an attacker. The `rand()` function in C++ is a weak random number generator as it uses a deterministic algorithm and can produce predictable numbers if the seed is known.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a strong cryptographic random number generator. In C++, the `<random>` library provides non-deterministic random number generators such as `std::random_device`, which should be used instead of `rand()`.\n\n## Source Code Fix Recommendation\n\nReplace the `rand()` function with `std::random_device`. Here is how you can do it:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> distr(1, 10);\n\ninput_itemsets[i*max_cols] = distr(gen);\n```\n\n## Library Dependencies\n\nThe code example requires the `<random>` library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
              },
              "properties": {
                "tags": [
                  "DS148264",
                  "948767da-123f-31e4-8b49-5c8da2959e52"
                ]
              }
            },
            {
              "id": "be40ef16-2a09-3686-9fc3-3578ea3bc697",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of certain C standard library functions that are considered unsafe due to their potential to cause buffer overflows, format string vulnerabilities, or other issues that can lead to arbitrary code execution or denial of service. In this case, the function `atoi()` is used, which can lead to integer overflow or underflow if the input is not properly validated.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to these functions, such as `strtol()` or `sscanf()`, which provide error checking. Additionally, always validate and sanitize user input to prevent unexpected behavior.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi()` function with `strtol()`. Here is the fixed code:\n\n```cpp\n#include <cstdlib> // for strtol and NULL\n\nchar *p;\nlong converted = strtol(argv[1], &p, 10);\nif (*p) {\n    // conversion failed because the input wasn't a number\n} else {\n    if (converted%16!=0) {\n        // original condition here\n    }\n}\n```\n\n## Library Dependencies\n\nThe code example requires the `cstdlib` library.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-community/attacks/Buffer_overflow_attack)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "11fcec0d-191a-31ca-857e-77ddbf925690",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, integer overflows, etc. In this case, the function `atoi()` is used, which is a standard C library function that converts a string to an integer. The problem with `atoi()` is that it does not handle errors well. If the input string cannot be converted into an integer, it returns zero, which can lead to unexpected behavior.\n\n## Mitigation Advice\n\nAvoid using `atoi()`. Instead, use functions that can handle errors properly. In C++, you can use `std::stoi()`, which throws an exception if the conversion fails. Always validate and sanitize user input to prevent injection attacks.\n\n## Source Code Fix Recommendation\n\nReplace `atoi()` with `std::stoi()`. Here is the fixed code:\n\n```cpp\n#include <string>\n#include <cstdlib>\n\ntry {\n    task_sze = std::stoi(argv[3]);\n} catch (std::invalid_argument& e) {\n    // handle error\n} catch (std::out_of_range& e) {\n    // handle error\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<string>`: This is a standard C++ library that provides support for strings.\n- `<cstdlib>`: This is a standard C library that provides general purpose functions, including `std::stoi()`.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "5fa1605d-2e00-351f-a8c9-97c42e763617",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other issues. In this case, the function `atoi()` is used, which can lead to integer overflow or underflow if the input is not properly validated.\n\nThe `atoi()` function converts a string to an integer. It does not check for valid input and does not handle errors, which can lead to undefined behavior if the input string does not represent a valid integer.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives that provide error checking. In C++, the `std::stoi()` function can be used as it throws an exception if the conversion cannot be performed.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi()` function with `std::stoi()`. Here is the corrected code:\n\n```cpp\ntry {\n    penalty = std::stoi(argv[2]);\n} catch (std::invalid_argument& e) {\n    // handle error\n} catch (std::out_of_range& e) {\n    // handle error\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library:\n\n- `<cstdlib>` for `atoi()`\n- `<string>` for `std::stoi()`\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "01b96cce-4ec6-3867-b23c-a5cc8c7e376f",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that arises when a program uses a function that can lead to a security risk. In this case, the function `atoi()` is used, which is a standard C library function that converts a string to an integer. The problem with `atoi()` is that it does not perform any error checking. If the input string cannot be converted to an integer, it returns zero, which can lead to unexpected behavior.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use functions that perform error checking. In C++, the `std::stoi()` function can be used instead of `atoi()`. This function throws an exception if the conversion fails, which can be caught and handled appropriately.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi()` function with `std::stoi()`. Here is the corrected code:\n\n```cpp\ntry {\n    max_cols = std::stoi(argv[1]);\n} catch (std::invalid_argument& e) {\n    // handle error\n} catch (std::out_of_range& e) {\n    // handle error\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library:\n\n- `<string>`: This library is needed for the `std::stoi()` function.\n\n## OWASP Resources\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-628: Function Call with Incorrectly Specified Arguments](https://cwe.mitre.org/data/definitions/628.html)\n\nPlease note that the links provided are active and accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "f3f6aef0-d57f-3ebb-9247-9be9bf73f3e0",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Identified\" is a vulnerability that arises when a program uses a function that can lead to a security risk. In this case, the function `atoi()` is used, which can lead to integer overflow or underflow. This function does not perform any error checking, so it can lead to undefined behavior if the input is not a valid integer.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to `atoi()`, such as `strtol()` or `sscanf()`, which provide error checking. It is also important to validate and sanitize all user input to prevent injection attacks.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi()` function with `strtol()`. Here is an example of how to do this:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nchar *endptr;\nlong int max_rows = strtol(argv[1], &endptr, 10);\n\nif (errno == ERANGE) {\n    // handle overflow/underflow\n} else if (endptr == argv[1]) {\n    // handle no digits were found\n} else {\n    // handle additional error checking\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: This library is required for the `strtol()` function.\n- `<cerrno>`: This library is required to check for overflow and underflow errors.\n\n## References\n\n- [OWASP Prohibited C Functions](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html#prohibited-c-library-functions)\n- [CWE-190: Integer Overflow or Wraparound](https://cwe.mitre.org/data/definitions/190.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "8d4352a4-ad8c-38f2-bcab-806a5ea47677",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strlen` function in C++ is used to calculate the length of a string. However, it can lead to vulnerabilities if not used properly. The function counts the number of characters in a string until it reaches a null character (`\\0`). If the string is not null-terminated, `strlen` will continue reading memory until it encounters a null character, potentially leading to buffer overflows, memory corruption, and other undefined behaviors.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always ensure that your strings are null-terminated. Avoid using `strlen` on strings that come from untrusted sources without validation. Consider using safer alternatives such as `strnlen`, which takes an additional parameter to specify the maximum length of the string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nstrlength = strlen(input);\n```\n\nYou could use:\n\n```cpp\nstrlength = strnlen(input, MAX_LENGTH);\n```\n\nWhere `MAX_LENGTH` is the maximum expected length of the string. This will prevent `strnlen` from reading beyond the specified limit, even if it doesn't encounter a null character.\n\n## Library Dependencies\n\nThe `strlen` function is part of the C standard library, so no additional libraries are needed for the code to execute properly.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-126: Buffer Over-read](https://cwe.mitre.org/data/definitions/126.html)"
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "b8869257-9f8a-3b30-9439-13f9bdeda2cf",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe \"Prohibited C Function Identified\" vulnerability refers to the use of insecure C functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, and integer overflows. In this case, the `fprintf` function is used, which can lead to format string vulnerabilities if the format string is not controlled by the programmer or if user-supplied data is used as a format string.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to `fprintf` such as `fputs` or `fwrite`. If `fprintf` must be used, ensure that the format string is not user-controlled and does not contain any user-supplied data.\n\n## Source Code Fix Recommendation\n\nHere is a safer version of the code using `fputs`:\n\n```cpp\nconst char* message = \"Creating more than %d task types. Set \"\n                      \"ATMI_MAX_KERNEL_TYPES environment variable to a larger \"\n                      \"number and try again.\\n\";\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), message, max_kernel_types);\nfputs(buffer, stderr);\n```\n\n## Library Dependencies\n\nThe code example requires the following libraries:\n\n- `stdio.h` for `fprintf`, `fputs`, and `stderr`\n\n## References\n\n- [CWE-134: Use of Externally-Controlled Format String](https://cwe.mitre.org/data/definitions/134.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "e87eb994-05d2-3226-adfd-284a2f797254",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strlen` function in C++ is used to calculate the length of a string. However, it can lead to vulnerabilities if not used properly. The function counts the number of characters in a string until it reaches a null character (`\\0`). If the string is not null-terminated, `strlen` will continue reading memory until it encounters a null character, potentially leading to buffer overflows, memory corruption, and other undefined behaviors.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always ensure that your strings are null-terminated. Avoid using `strlen` on strings that come from untrusted sources without validation. Consider using safer alternatives such as `strnlen`, which takes an additional parameter to specify the maximum length of the string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nstrlength = strlen(input);\n```\n\nYou could use:\n\n```cpp\nstrlength = strnlen(input, MAX_LENGTH);\n```\n\nWhere `MAX_LENGTH` is the maximum expected length of the string. This will prevent `strnlen` from reading beyond the specified limit, even if it doesn't encounter a null character.\n\n## Library Dependencies\n\nThe `strlen` function is part of the C standard library, so no additional libraries are needed for the code to execute properly.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-126: Buffer Over-read](https://cwe.mitre.org/data/definitions/126.html)"
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "2ca5f4c4-b20f-395d-bced-42fc54ab5bb9",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "aa9cf7ef-6721-30ad-90ea-2e61b7df5227",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "2ace687a-f1d4-3c06-8f76-2a87040c1c94",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "5d1d432b-37c1-3216-b0b7-ffbabfb16d48",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of functions that are considered unsafe due to their potential to cause buffer overflows, format string vulnerabilities, or other types of security issues. In this case, the vulnerability sink is `argv[1] != NULL`. This is a check to see if a command line argument was provided, but it does not validate the content of the argument, which could lead to security issues if the argument is used in an unsafe manner.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to always validate and sanitize user input, including command line arguments. This can help prevent buffer overflows, format string vulnerabilities, and other types of security issues. Additionally, consider using safer alternatives to unsafe C functions.\n\n## Source Code Fix Recommendation\n\nHere is a simple fix for the specific vulnerability sink:\n\n```cpp\nif (argv[1] != NULL) {\n    // Use argv[1]\n} else {\n    // Handle the error\n}\n```\n\nThis code checks if `argv[1]` is not `NULL` before using it, which can help prevent null pointer dereference issues. However, this does not validate the content of `argv[1]`, so additional validation and sanitization may be needed depending on how `argv[1]` is used.\n\n## Library Dependencies\n\nThe code example does not require any library dependencies to execute properly.\n\n## OWASP Resources\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [OWASP Proactive Controls](https://owasp.org/www-project-proactive-controls/)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-628: Function Call with Incorrectly Specified Arguments](https://cwe.mitre.org/data/definitions/628.html)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n\nPlease note that the links provided are valid and active for anonymous users at the time of writing."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "cd056936-8bde-33d5-a0c8-1549a4190baf",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that arises when a program uses a function that can lead to a security risk. In this case, the function `atoi()` is used, which can lead to integer overflow or underflow if the input is not properly validated. This can lead to unexpected behavior and potential security risks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to `atoi()`, such as `strtol()` or `sscanf()`, which provide error checking. It is also important to validate all input to ensure it is within the expected range.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi()` function with `strtol()`. Here is an example of how to do this:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nchar *endptr;\nlong int N = strtol(argv[1], &endptr, 10);\n\nif (errno == ERANGE) {\n    // handle overflow/underflow\n} else if (endptr == argv[1]) {\n    // handle no digits were found\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: This library is required for the `strtol()` function.\n- `<cerrno>`: This library is required to check for overflow and underflow errors.\n\n## OWASP Resources\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-190: Integer Overflow or Wraparound](https://cwe.mitre.org/data/definitions/190.html)\n- [CWE-807: Reliance on Untrusted Inputs in a Security Decision](https://cwe.mitre.org/data/definitions/807.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "eca59ae7-f4c2-376e-a716-2128904c0bf0",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Identified\" is a vulnerability that arises when a program uses a function that can potentially lead to a security risk. In this case, the function `atoi()` is used, which is a standard C library function that converts a string into an integer. The problem with `atoi()` is that it does not perform any error checking. If the input string cannot be converted into an integer, it returns zero, which can lead to unexpected behavior.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives that perform error checking. In C++, the `std::stoi()` function can be used, which throws an exception if the conversion fails. This allows the program to handle the error in a controlled manner.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi()` function with `std::stoi()`. Here is the fixed code:\n\n```cpp\ntry {\n    TDEGREE = std::stoi(argv[1]);\n} catch (std::invalid_argument& e) {\n    // handle error\n} catch (std::out_of_range& e) {\n    // handle error\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library:\n\n- `<string>`: This library is required for the `std::stoi()` function.\n\n## References\n\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "8419ccd7-e230-36dd-8bac-3fef7d00f45e",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure C library functions in C++ code. These functions are often prone to buffer overflow attacks, format string vulnerabilities, or integer overflow attacks. In this case, the `atoi()` function is used, which can lead to integer overflow if the input is not properly validated.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to these functions, or to implement proper input validation and error handling. For the `atoi()` function, a safer alternative would be `strtol()` or `sscanf()`, which provide error checking.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi()` function with `strtol()` or `sscanf()`. Here is an example of how to use `strtol()`:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nchar *endptr;\nlong int depth = strtol(argv[2], &endptr, 10);\n\nif (errno == ERANGE) {\n    // handle overflow\n} else if (endptr == argv[2]) {\n    // handle no digits were found\n} else {\n    TDEPTH = depth;\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: for `strtol()`\n- `<cerrno>`: for `errno`\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "90a2bc8b-3331-3fb1-b313-b9b16b49b6cd",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strlen` function in C++ is used to calculate the length of a string. However, it can lead to vulnerabilities if not used properly. The function counts the number of characters in a string until it reaches a null character (`\\0`). If the string is not null-terminated, `strlen` will continue reading memory until it encounters a null character, potentially leading to buffer overflows, memory corruption, and other undefined behaviors.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always ensure that your strings are null-terminated. Avoid using `strlen` on strings that come from untrusted sources without validation. Consider using safer alternatives such as `strnlen`, which takes an additional parameter to specify the maximum length of the string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nstrlength = strlen(input);\n```\n\nYou could use:\n\n```cpp\nstrlength = strnlen(input, MAX_LENGTH);\n```\n\nWhere `MAX_LENGTH` is the maximum expected length of the string. This will prevent `strnlen` from reading beyond the specified limit, even if it doesn't encounter a null character.\n\n## Library Dependencies\n\nThe `strlen` function is part of the C standard library, so no additional libraries are needed for the code to execute properly.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-126: Buffer Over-read](https://cwe.mitre.org/data/definitions/126.html)"
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "62853982-11b9-3c95-bb60-cd8da72b8f6f",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of functions that are considered unsafe due to their potential to cause buffer overflows, format string vulnerabilities, or other types of security issues. In this case, the vulnerability sink is `argv[1] != NULL`. This is a check to see if a command line argument was provided, but it does not validate the content of the argument, which could lead to security issues if the argument is used in an unsafe manner.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to always validate and sanitize user input, including command line arguments. This can help prevent buffer overflows, format string vulnerabilities, and other types of security issues. Additionally, consider using safer alternatives to unsafe C functions.\n\n## Source Code Fix Recommendation\n\nHere is a simple fix for the specific vulnerability sink:\n\n```cpp\nif (argv[1] != NULL) {\n    // Use argv[1]\n} else {\n    // Handle the error\n}\n```\n\nThis code checks if `argv[1]` is not `NULL` before using it, which can help prevent null pointer dereference issues. However, this does not validate the content of `argv[1]`, so additional validation and sanitization may be needed depending on how `argv[1]` is used.\n\n## Library Dependencies\n\nThe code example does not require any library dependencies to execute properly.\n\n## OWASP Resources\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [OWASP Proactive Controls](https://owasp.org/www-project-proactive-controls/)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-628: Function Call with Incorrectly Specified Arguments](https://cwe.mitre.org/data/definitions/628.html)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n\nPlease note that the links provided are valid and active for anonymous users at the time of writing."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "c3dab8bd-d6ac-349f-8bb6-fa4f9bdc65bc",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strlen` function in C++ is used to calculate the length of a string. However, it can lead to vulnerabilities if not used properly. The function counts the number of characters in a string until it reaches a null character (`\\0`). If the string is not null-terminated, `strlen` will continue reading memory until it encounters a null character, potentially leading to buffer overflows, memory corruption, and other undefined behaviors.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always ensure that your strings are null-terminated. Avoid using `strlen` on strings that come from untrusted sources without validation. Consider using safer alternatives such as `strnlen`, which takes an additional parameter to specify the maximum length of the string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nstrlength = strlen(input);\n```\n\nYou could use:\n\n```cpp\nstrlength = strnlen(input, MAX_LENGTH);\n```\n\nWhere `MAX_LENGTH` is the maximum expected length of the string. This will prevent `strnlen` from reading beyond the specified limit, even if it doesn't encounter a null character.\n\n## Library Dependencies\n\nThe `strlen` function is part of the C standard library, so no additional libraries are needed for the code to execute properly.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-126: Buffer Over-read](https://cwe.mitre.org/data/definitions/126.html)"
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "0377e063-05a2-36d2-88d5-e22e64ec3385",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of functions that are considered unsafe due to their potential to cause buffer overflows, format string vulnerabilities, or other types of security issues. In this case, the vulnerability sink is `argv[1] != NULL`. This is a check to see if a command line argument was provided, but it does not validate the content of the argument, which could lead to security issues if the argument is used in an unsafe manner.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to always validate and sanitize user input, including command line arguments. This can help prevent buffer overflows, format string vulnerabilities, and other types of security issues. Additionally, consider using safer alternatives to unsafe C functions.\n\n## Source Code Fix Recommendation\n\nHere is a simple fix for the specific vulnerability sink:\n\n```cpp\nif (argv[1] != NULL) {\n    // Use argv[1]\n} else {\n    // Handle the error\n}\n```\n\nThis code checks if `argv[1]` is not `NULL` before using it, which can help prevent null pointer dereference issues. However, this does not validate the content of `argv[1]`, so additional validation and sanitization may be needed depending on how `argv[1]` is used.\n\n## Library Dependencies\n\nThe code example does not require any library dependencies to execute properly.\n\n## OWASP Resources\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [OWASP Proactive Controls](https://owasp.org/www-project-proactive-controls/)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-628: Function Call with Incorrectly Specified Arguments](https://cwe.mitre.org/data/definitions/628.html)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n\nPlease note that the links provided are valid and active for anonymous users at the time of writing."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "0cca6901-634b-342d-960c-0e3812d0d496",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of certain C standard library functions that are known to be risky due to their potential to create buffer overflows, format string vulnerabilities, or other issues. In this case, the function `atoi()` is used, which can lead to integer overflow or underflow if the input is not properly validated.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to avoid using risky C functions and instead use safer alternatives provided by the C++ standard library. In this case, `atoi()` can be replaced with `std::stoi()`, which throws an exception if the conversion fails.\n\n## Source Code Fix Recommendation\n\nHere is a fixed version of the code:\n\n```cpp\n#include <string>\n#include <stdexcept>\n\n// ...\n\ntry {\n    gpu_id = (std::stoi(argv[1]) % gpu_count);\n} catch (std::invalid_argument& e) {\n    // Handle exception: input is not a valid integer\n} catch (std::out_of_range& e) {\n    // Handle exception: input is out of range for an integer\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<string>`: for `std::stoi()`\n- `<stdexcept>`: for `std::invalid_argument` and `std::out_of_range`\n\n## OWASP Resources\n\n- [OWASP C++ Secure Coding Practices Guide](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)\n- [CWE-190: Integer Overflow or Wraparound](https://cwe.mitre.org/data/definitions/190.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "9d34c7a2-30c5-328a-b446-d241d888278d",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `malloc()` function in C is used to dynamically allocate a block of memory. If the size of the memory to be allocated is controlled by the user or an external input, it can lead to several vulnerabilities such as buffer overflow, memory corruption, or Denial of Service (DoS) attacks. \n\nIn the given code snippet, `malloc(full_name_len)` is vulnerable if `full_name_len` is an externally controlled variable. An attacker can provide a very large value for `full_name_len` causing the program to allocate more memory than is available, leading to a crash or other unexpected behavior.\n\n## Mitigation Advice\n\n1. Always validate and sanitize external inputs. Do not trust user input blindly. \n\n2. Use functions that limit the amount of data written into a buffer or use memory allocation functions that automatically handle memory sizes, such as `strncpy()` or `snprintf()`.\n\n3. Implement error checking after every `malloc()` call. If `malloc()` fails, it returns a NULL pointer, which should be checked.\n\n## Source Code Fix\n\n```c\nif(full_name_len > MAX_SIZE) {\n    // Handle error\n} else {\n    char* full_name = (char*) malloc(full_name_len);\n    if(full_name == NULL) {\n        // Handle error\n    } else {\n        // Continue with program\n    }\n}\n```\n\nIn the above code, `MAX_SIZE` is a predefined constant that represents the maximum allowable size.\n\n## Library Dependencies\n\nThe `malloc()` function is part of the C Standard Library, so no additional libraries are needed.\n\n## References\n\n- [OWASP C/C++ Vulnerabilities](https://owasp.org/www-pdf-archive/OWASP_SCP_Quick_Reference_Guide_v2.pdf)\n\n## Matching CWE\n\n- [CWE-131: Incorrect Calculation of Buffer Size](https://cwe.mitre.org/data/definitions/131.html)"
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "03cb2c5d-7ea2-386c-881f-927c17dc914f",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strlen` function in C++ is used to calculate the length of a string. However, it can lead to vulnerabilities if not used properly. The function counts the number of characters in a string until it reaches a null character (`\\0`). If the string is not null-terminated, `strlen` will continue reading memory until it encounters a null character, potentially leading to buffer overflows, memory corruption, and other undefined behaviors.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always ensure that your strings are null-terminated. Avoid using `strlen` on strings that come from untrusted sources without validation. Consider using safer alternatives such as `strnlen`, which takes an additional parameter to specify the maximum length of the string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nstrlength = strlen(input);\n```\n\nYou could use:\n\n```cpp\nstrlength = strnlen(input, MAX_LENGTH);\n```\n\nWhere `MAX_LENGTH` is the maximum expected length of the string. This will prevent `strnlen` from reading beyond the specified limit, even if it doesn't encounter a null character.\n\n## Library Dependencies\n\nThe `strlen` function is part of the C standard library, so no additional libraries are needed for the code to execute properly.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-126: Buffer Over-read](https://cwe.mitre.org/data/definitions/126.html)"
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "bd09cfd8-00a5-3d10-bfc6-70d85e454afd",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "1fb4afda-8330-3446-a672-4824d0c25d4e",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "f314fe8c-af21-3e0b-bc19-48cd69960441",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "af1029d0-2569-3996-950e-10c4c5a4bc88",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "cde944cd-531c-3ea6-a1c4-5c5c6071ede5",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "877e2361-4710-3375-98a6-8a35d31d7c86",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "3f3eebe1-f401-37ab-9ed0-3ed6b60964d7",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "c19c1ad9-dd66-39f4-b9e9-abc3425235d6",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "402f026b-6062-3268-9170-c46034eed28d",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "5e00064f-8b59-3e7f-90d9-5e0c6ded8c83",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "c4f2648d-abc2-3d01-8986-0bcfdc675244",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "2b92113f-baf7-352f-a8ed-931f914de583",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "94520254-f900-32d0-9b9e-a60ce73203f2",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "5a82b1d1-9c13-3518-8730-e64164901dc9",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "7ed2b1bd-8606-322d-9b0e-5ee7bd4d7284",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "7f3545fc-fedb-3514-b3cc-0133eec3bc44",
              "help": {
                "text": "",
                "markdown": "This finding is considered a genuine vulnerability because the classification indicates a risk of undefined behavior due to possible overlap between the source and destination memory regions. The analysis detected that the source and destination may overlap based on data flow analysis, which can cause undefined behavior when using memory copy functions like memcpy. Additionally, there is no evidence of a guard to prevent this overlap, and the source pointer may also be null at this point, further increasing the risk. The destination pointer is not likely to be null, but the overlap and null source risks are sufficient to warrant remediation. The verdict is supported by the high-confidence classification and the presence of multiple risk factors.\n\n## In Context Remediation\nTo prevent undefined behavior when the source and destination memory regions may overlap, replace the use of `memcpy` with `memmove`, which is designed to handle overlapping regions safely. For example:\n\n```cpp\nmemmove(output_itemsets, input_itemsets, max_cols * max_rows * sizeof(int));\n```\n\nAdditionally, ensure that both `output_itemsets` and `input_itemsets` are not null before performing the operation to avoid null pointer dereference. For example:\n\n```cpp\nif (output_itemsets != nullptr && input_itemsets != nullptr) {\n    memmove(output_itemsets, input_itemsets, max_cols * max_rows * sizeof(int));\n}\n```\n\n## References\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)\n- [CWE-787: Out-of-bounds Write](https://cwe.mitre.org/data/definitions/787.html)\n- [OWASP Buffer Overflow](https://owasp.org/www-community/vulnerabilities/Buffer_Overflow)\n- [OWASP C-Based Toolchain Hardening Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n\n___\n"
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "a27793e9-6968-30df-be4a-631683790b2c",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "c27159d3-03cb-3d79-9ab1-b9091d125a59",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "ccf5eade-9061-3669-9202-ee130beb25d3",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "528df1b3-ac0d-3526-bc8b-a5f8ee487748",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "b1c5b695-6144-36a3-a61c-785dc043d07e",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "4d6bfdf3-ecbd-31fd-8f25-44724c259b17",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "841fe334-c1d5-3eb8-b8dc-2c2fbe193251",
              "help": {
                "text": "",
                "markdown": "This finding is classified as a genuine vulnerability because the analysis identified a risk of undefined behavior due to possible overlap between the source and destination memory regions in the memory copy operation. The destination and source are both pointers, and dataflow analysis suggests that they may refer to overlapping memory. Additionally, there is no evidence of a guard to ensure that the source is not null, which increases the risk of a null pointer dereference. The destination buffer's capacity is not known, and the length used for copying is not derived from the destination's size, further increasing the risk. The presence of a null-terminator assignment after the copy does not mitigate the undefined behavior risk from overlapping regions. These factors indicate a high likelihood of a real issue that could lead to unpredictable program behavior or security vulnerabilities.\n\n## In Context Remediation\nTo prevent undefined behavior when copying memory between regions that may overlap, use a function that is safe for overlapping memory, such as `memmove`, instead of `memcpy`. `memmove` is specifically designed to handle overlapping source and destination regions safely. Replace the original call with:\n\n```cpp\nmemmove(input_gpu, input, strlength);\n```\n\nAdditionally, ensure that both `input` and `input_gpu` are not null before performing the copy to avoid null pointer dereference:\n\n```cpp\nif (input != NULL && input_gpu != NULL) {\n    memmove(input_gpu, input, strlength);\n}\n```\n\n## References\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)\n- [CWE-787: Out-of-bounds Write](https://cwe.mitre.org/data/definitions/787.html)\n- [OWASP Buffer Overflow](https://owasp.org/www-community/vulnerabilities/Buffer_Overflow)\n- [OWASP C-Based Toolchain Hardening Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n\n___\n"
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "8429943c-3bff-3e75-9b6c-2e4119d93b70",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/dlbench_multi_agent/dlbench.atmi.c"
                },
                "region": {
                  "startLine": 438,
                  "startColumn": 4,
                  "endLine": 438,
                  "endColumn": 11,
                  "charOffset": 16034,
                  "charLength": 7,
                  "snippet": {
                    "text": "fprintf",
                    "rendered": {
                      "text": "fprintf",
                      "markdown": "`fprintf`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "adff970f-3292-301e-87d6-bb8b99b56bf8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Identified\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/eps/eps.cpp"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 22,
                  "charOffset": 2045,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "61ff0a0a-cd7b-3c24-bb04-8ae17069bb98",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/dlbench_multi_agent/dlbench.atmi.c"
                },
                "region": {
                  "startLine": 436,
                  "startColumn": 4,
                  "endLine": 436,
                  "endColumn": 11,
                  "charOffset": 15932,
                  "charLength": 7,
                  "snippet": {
                    "text": "fprintf",
                    "rendered": {
                      "text": "fprintf",
                      "markdown": "`fprintf`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "ce441aa6-b105-3ef7-bc5f-ff866824c36d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/eps/eps.cpp"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 17,
                  "endLine": 64,
                  "endColumn": 21,
                  "charOffset": 2077,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "faa9fecf-41c4-342c-8fa1-961ba3928dad",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/dlbench_multi_agent/dlbench.atmi.c"
                },
                "region": {
                  "startLine": 435,
                  "startColumn": 4,
                  "endLine": 435,
                  "endColumn": 11,
                  "charOffset": 15893,
                  "charLength": 7,
                  "snippet": {
                    "text": "fprintf",
                    "rendered": {
                      "text": "fprintf",
                      "markdown": "`fprintf`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "c47d0a89-4d05-3aee-a58b-8fa109c32881",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Identified\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/dlbench_multi_agent/dlbench.atmi.c"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 24,
                  "endLine": 78,
                  "endColumn": 28,
                  "charOffset": 2488,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "0bede87a-4cfd-36c8-891d-7d6be667f212",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Identified\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/needleman-wunsch_dGPU/nw.cpp"
                },
                "region": {
                  "startLine": 478,
                  "startColumn": 14,
                  "endLine": 478,
                  "endColumn": 19,
                  "charOffset": 16953,
                  "charLength": 5,
                  "snippet": {
                    "text": "fopen",
                    "rendered": {
                      "text": "fopen",
                      "markdown": "`fopen`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "8caab500-ed16-3d04-bd49-4e366dc08477",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (memcpy)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/needleman-wunsch_dGPU/nw.cpp"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 4,
                  "endLine": 472,
                  "endColumn": 77,
                  "charOffset": 16729,
                  "charLength": 73,
                  "snippet": {
                    "text": "memcpy(output_itemsets, input_itemsets, max_cols * max_rows * sizeof(int)",
                    "rendered": {
                      "text": "memcpy(output_itemsets, input_itemsets, max_cols * max_rows * sizeof(int)",
                      "markdown": "`memcpy(output_itemsets, input_itemsets, max_cols * max_rows * sizeof(int)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "examples/runtime/needleman-wunsch_dGPU/nw.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 16729,
                        "charLength": 73
                      },
                      "insertedContent": {
                        "text": "memcpy_s(output_itemsets, <size of output_itemsets>,  input_itemsets,  max_cols * max_rows * sizeof(int)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "c23274e6-b47c-3214-be9b-840e490b9cc2",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid using system time or static value for randomness seeding."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/needleman-wunsch_dGPU/nw.cpp"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 2,
                  "endLine": 181,
                  "endColumn": 10,
                  "charOffset": 5957,
                  "charLength": 8,
                  "snippet": {
                    "text": "srand(7)",
                    "rendered": {
                      "text": "srand(7)",
                      "markdown": "`srand(7)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.WeakRandomness"
            ]
          }
        },
        {
          "ruleId": "55cebe43-78a7-3b63-900f-af3b3bd17bd2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/needleman-wunsch_dGPU/nw.cpp"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 5,
                  "endLine": 163,
                  "endColumn": 9,
                  "charOffset": 5468,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "0da2cf5d-3565-3a9f-a5f5-90b91e38c365",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/needleman-wunsch_dGPU/nw.cpp"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 15,
                  "endLine": 156,
                  "endColumn": 19,
                  "charOffset": 5382,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "0c962dd4-7d82-3428-a5d6-45d8382d3734",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/needleman-wunsch_dGPU/nw.cpp"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 14,
                  "endLine": 155,
                  "endColumn": 18,
                  "charOffset": 5352,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "935e71b9-3c11-395a-9c25-7ad24d5c092b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/needleman-wunsch_dGPU/nw.cpp"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 15,
                  "endLine": 154,
                  "endColumn": 19,
                  "charOffset": 5323,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "33dd4fe4-d5bf-38be-b6f6-18adb2d1e5f1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Identified\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/needleman-wunsch_dGPU/nw.cpp"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 15,
                  "endLine": 153,
                  "endColumn": 19,
                  "charOffset": 5293,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "97ee3bef-92d1-39c9-9901-9468a6665a7e",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/runtime/core/data.cpp"
                },
                "region": {
                  "startLine": 594,
                  "startColumn": 12,
                  "endLine": 594,
                  "endColumn": 44,
                  "charOffset": 21649,
                  "charLength": 32,
                  "snippet": {
                    "text": "memcpy(temp_host_ptr, src, size)",
                    "rendered": {
                      "text": "memcpy(temp_host_ptr, src, size)",
                      "markdown": "`memcpy(temp_host_ptr, src, size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/runtime/core/data.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21649,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "memcpy_s(temp_host_ptr, <size of temp_host_ptr>,  src,  size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "7d7eca40-5987-3b73-a86a-884a7236605d",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/runtime/core/data.cpp"
                },
                "region": {
                  "startLine": 714,
                  "startColumn": 4,
                  "endLine": 714,
                  "endColumn": 36,
                  "charOffset": 26912,
                  "charLength": 32,
                  "snippet": {
                    "text": "memcpy(temp_host_ptr, src, size)",
                    "rendered": {
                      "text": "memcpy(temp_host_ptr, src, size)",
                      "markdown": "`memcpy(temp_host_ptr, src, size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/runtime/core/data.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 26912,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "memcpy_s(temp_host_ptr, <size of temp_host_ptr>,  src,  size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "9e856ad3-cb33-3703-9871-a267771a9c71",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/runtime/core/data.cpp"
                },
                "region": {
                  "startLine": 621,
                  "startColumn": 12,
                  "endLine": 621,
                  "endColumn": 44,
                  "charOffset": 22955,
                  "charLength": 32,
                  "snippet": {
                    "text": "memcpy(dst, temp_host_ptr, size)",
                    "rendered": {
                      "text": "memcpy(dst, temp_host_ptr, size)",
                      "markdown": "`memcpy(dst, temp_host_ptr, size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/runtime/core/data.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 22955,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst, <size of dst>,  temp_host_ptr,  size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "d6c15241-a3c7-3d0f-99d9-92d0ab1403e0",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/runtime/core/data.cpp"
                },
                "region": {
                  "startLine": 746,
                  "startColumn": 4,
                  "endLine": 746,
                  "endColumn": 37,
                  "charOffset": 28275,
                  "charLength": 33,
                  "snippet": {
                    "text": "memcpy(dest, temp_host_ptr, size)",
                    "rendered": {
                      "text": "memcpy(dest, temp_host_ptr, size)",
                      "markdown": "`memcpy(dest, temp_host_ptr, size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/runtime/core/data.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 28275,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dest, <size of dest>,  temp_host_ptr,  size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "601ee3fc-eccc-3ab5-a50f-94366a7c9197",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (memcpy)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/runtime/core/data.cpp"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 8,
                  "endLine": 194,
                  "endColumn": 39,
                  "charOffset": 6725,
                  "charLength": 31,
                  "snippet": {
                    "text": "memcpy(ptr, host_ptr, m->size()",
                    "rendered": {
                      "text": "memcpy(ptr, host_ptr, m->size()",
                      "markdown": "`memcpy(ptr, host_ptr, m->size()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/runtime/core/data.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6725,
                        "charLength": 31
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptr, <size of ptr>,  host_ptr,  m->size()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "3170153a-8278-34c1-859e-019b28fef4d6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 1584,
                  "startColumn": 8,
                  "endLine": 1584,
                  "endColumn": 15,
                  "charOffset": 57020,
                  "charLength": 7,
                  "snippet": {
                    "text": "fprintf",
                    "rendered": {
                      "text": "fprintf",
                      "markdown": "`fprintf`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "59975543-b789-33a4-9607-621d6d9a6f7f",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (memcpy)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/runtime/core/data.cpp"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 8,
                  "endLine": 131,
                  "endColumn": 35,
                  "charOffset": 4246,
                  "charLength": 27,
                  "snippet": {
                    "text": "memcpy(host_ptr, ptr, size)",
                    "rendered": {
                      "text": "memcpy(host_ptr, ptr, size)",
                      "markdown": "`memcpy(host_ptr, ptr, size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/runtime/core/data.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4246,
                        "charLength": 27
                      },
                      "insertedContent": {
                        "text": "memcpy_s(host_ptr, <size of host_ptr>,  ptr,  size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "b24ff205-d72b-397a-8bc0-a6f83669e616",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 1303,
                  "endLine": 1303,
                  "endColumn": 7,
                  "charOffset": 45697,
                  "charLength": 7,
                  "snippet": {
                    "text": "fprintf",
                    "rendered": {
                      "text": "fprintf",
                      "markdown": "`fprintf`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "2545d806-518e-3a28-b191-97f6fbab915c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 889,
                  "startColumn": 12,
                  "endLine": 889,
                  "endColumn": 19,
                  "charOffset": 30987,
                  "charLength": 7,
                  "snippet": {
                    "text": "fprintf",
                    "rendered": {
                      "text": "fprintf",
                      "markdown": "`fprintf`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "a9f33743-a173-3aaf-9eb6-69645b82676d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Identified\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 1392,
                  "endLine": 1392,
                  "endColumn": 7,
                  "charOffset": 49444,
                  "charLength": 7,
                  "snippet": {
                    "text": "fprintf",
                    "rendered": {
                      "text": "fprintf",
                      "markdown": "`fprintf`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "be44c7ad-93b7-313f-a59e-3587eeb336f5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 1329,
                  "endLine": 1329,
                  "endColumn": 7,
                  "charOffset": 46498,
                  "charLength": 7,
                  "snippet": {
                    "text": "fprintf",
                    "rendered": {
                      "text": "fprintf",
                      "markdown": "`fprintf`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "e333977c-a625-31cf-a5c5-51765a001fcb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 884,
                  "startColumn": 8,
                  "endLine": 884,
                  "endColumn": 15,
                  "charOffset": 30782,
                  "charLength": 7,
                  "snippet": {
                    "text": "sprintf",
                    "rendered": {
                      "text": "sprintf",
                      "markdown": "`sprintf`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "20c1a36f-abdf-3e41-ad89-aed1416c2b2e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 874,
                  "startColumn": 23,
                  "endLine": 874,
                  "endColumn": 28,
                  "charOffset": 30339,
                  "charLength": 5,
                  "snippet": {
                    "text": "fopen",
                    "rendered": {
                      "text": "fopen",
                      "markdown": "`fopen`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "ca8bd930-fedc-3a72-8d43-03b87c37a659",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (memcpy)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 1320,
                  "startColumn": 7,
                  "endLine": 1320,
                  "endColumn": 58,
                  "charOffset": 46274,
                  "charLength": 51,
                  "snippet": {
                    "text": "memcpy(void *dest, void *source, unsigned long num)",
                    "rendered": {
                      "text": "memcpy(void *dest, void *source, unsigned long num)",
                      "markdown": "`memcpy(void *dest, void *source, unsigned long num)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 46274,
                        "charLength": 51
                      },
                      "insertedContent": {
                        "text": "memcpy_s(void *dest, <size of void *dest>,  void *source,  unsigned long num)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "f85ffd77-5cf5-3717-9805-a1e2fa88c19c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 827,
                  "startColumn": 26,
                  "endLine": 827,
                  "endColumn": 31,
                  "charOffset": 28356,
                  "charLength": 5,
                  "snippet": {
                    "text": "fopen",
                    "rendered": {
                      "text": "fopen",
                      "markdown": "`fopen`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "aa5d232d-6483-3d05-82dd-07e4b32ebe1b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 844,
                  "startColumn": 12,
                  "endLine": 844,
                  "endColumn": 19,
                  "charOffset": 29165,
                  "charLength": 7,
                  "snippet": {
                    "text": "fprintf",
                    "rendered": {
                      "text": "fprintf",
                      "markdown": "`fprintf`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "00c7272e-179c-3a2a-aa0c-cfb3301a2a53",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 859,
                  "startColumn": 8,
                  "endLine": 859,
                  "endColumn": 15,
                  "charOffset": 29783,
                  "charLength": 7,
                  "snippet": {
                    "text": "fprintf",
                    "rendered": {
                      "text": "fprintf",
                      "markdown": "`fprintf`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "03eb2b88-3927-36cc-955d-815035af860f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 824,
                  "startColumn": 26,
                  "endLine": 824,
                  "endColumn": 31,
                  "charOffset": 28283,
                  "charLength": 5,
                  "snippet": {
                    "text": "fopen",
                    "rendered": {
                      "text": "fopen",
                      "markdown": "`fopen`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "fba316fd-8e3b-3c74-884c-87c952be232c",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "\"Detected Use of Prohibited C Function (strcat)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 823,
                  "startColumn": 8,
                  "endLine": 823,
                  "endColumn": 46,
                  "charOffset": 28217,
                  "charLength": 38,
                  "snippet": {
                    "text": "strcat(pifdefs_filename, \".pifdefs.c\")",
                    "rendered": {
                      "text": "strcat(pifdefs_filename, \".pifdefs.c\")",
                      "markdown": "`strcat(pifdefs_filename, \".pifdefs.c\")`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 28217,
                        "charLength": 38
                      },
                      "insertedContent": {
                        "text": "strcat_s(pifdefs_filename, <size of pifdefs_filename>,  \".pifdefs.c\")"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 28217,
                        "charLength": 38
                      },
                      "insertedContent": {
                        "text": "strlcat(pifdefs_filename,  \".pifdefs.c\", <size of pifdefs_filename>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "7bcce204-4d19-374f-bd93-02787a906208",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "\"Detected Use of Prohibited C Function (strcpy)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 822,
                  "startColumn": 8,
                  "endLine": 822,
                  "endColumn": 53,
                  "charOffset": 28162,
                  "charLength": 45,
                  "snippet": {
                    "text": "strcpy(pifdefs_filename, main_input_filename)",
                    "rendered": {
                      "text": "strcpy(pifdefs_filename, main_input_filename)",
                      "markdown": "`strcpy(pifdefs_filename, main_input_filename)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "strcpy is frequently dangerous, as it will cause a buffer overflow if the source is larger than the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 28162,
                        "charLength": 45
                      },
                      "insertedContent": {
                        "text": "strcpy_s(pifdefs_filename, <size of pifdefs_filename>,  main_input_filename)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "strcpy is frequently dangerous, as it will cause a buffer overflow if the source is larger than the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 28162,
                        "charLength": 45
                      },
                      "insertedContent": {
                        "text": "strlcpy(pifdefs_filename,  main_input_filename, <size of pifdefs_filename>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "54b8862d-9da5-313c-ae65-7398b88ca58e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 585,
                  "startColumn": 21,
                  "endLine": 585,
                  "endColumn": 28,
                  "charOffset": 18985,
                  "charLength": 7,
                  "snippet": {
                    "text": "fprintf",
                    "rendered": {
                      "text": "fprintf",
                      "markdown": "`fprintf`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "9fcfd19b-2bff-3c74-a44a-7129b4203a10",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 621,
                  "startColumn": 8,
                  "endLine": 621,
                  "endColumn": 15,
                  "charOffset": 20511,
                  "charLength": 7,
                  "snippet": {
                    "text": "fprintf",
                    "rendered": {
                      "text": "fprintf",
                      "markdown": "`fprintf`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "9ad543e7-9c43-3268-bbb6-10bf5ca515f0",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (strlen)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 577,
                  "startColumn": 18,
                  "endLine": 577,
                  "endColumn": 30,
                  "charOffset": 18736,
                  "charLength": 12,
                  "snippet": {
                    "text": "strlen(text)",
                    "rendered": {
                      "text": "strlen(text)",
                      "markdown": "`strlen(text)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 18736,
                        "charLength": 12
                      },
                      "insertedContent": {
                        "text": "strlen_s(text, <size of text>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 18736,
                        "charLength": 12
                      },
                      "insertedContent": {
                        "text": "strnlen(text, <size of text>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "29fc0702-e433-389b-9074-b1531aa65dda",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 525,
                  "startColumn": 18,
                  "endLine": 525,
                  "endColumn": 23,
                  "charOffset": 16740,
                  "charLength": 5,
                  "snippet": {
                    "text": "fopen",
                    "rendered": {
                      "text": "fopen",
                      "markdown": "`fopen`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "2ea29751-1304-34bf-a3fa-45eb5d7666fc",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "\"Detected Use of Prohibited C Function (strcpy)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 581,
                  "startColumn": 4,
                  "endLine": 581,
                  "endColumn": 28,
                  "charOffset": 18837,
                  "charLength": 24,
                  "snippet": {
                    "text": "strcpy(text_dup_2, text)",
                    "rendered": {
                      "text": "strcpy(text_dup_2, text)",
                      "markdown": "`strcpy(text_dup_2, text)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "strcpy is frequently dangerous, as it will cause a buffer overflow if the source is larger than the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 18837,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "strcpy_s(text_dup_2, <size of text_dup_2>,  text)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "strcpy is frequently dangerous, as it will cause a buffer overflow if the source is larger than the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 18837,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "strlcpy(text_dup_2,  text, <size of text_dup_2>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "9aef2086-7481-3fc5-a4f6-20080fdad47b",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "\"Detected Use of Prohibited C Function (strcat)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 356,
                  "startColumn": 12,
                  "endLine": 356,
                  "endColumn": 30,
                  "charOffset": 10382,
                  "charLength": 18,
                  "snippet": {
                    "text": "strcat(fn_decl, \")",
                    "rendered": {
                      "text": "strcat(fn_decl, \")",
                      "markdown": "`strcat(fn_decl, \")`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10382,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "strcat_s(fn_decl, <size of fn_decl>,  \")"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10382,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "strlcat(fn_decl,  \", <size of fn_decl>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "20cd51f4-c6b2-3c7c-8d16-c387c74c8d4d",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Detected Prohibited C Function (strcat) Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 354,
                  "startColumn": 8,
                  "endLine": 354,
                  "endColumn": 33,
                  "charOffset": 10275,
                  "charLength": 25,
                  "snippet": {
                    "text": "strcat(fn_decl, var_decl)",
                    "rendered": {
                      "text": "strcat(fn_decl, var_decl)",
                      "markdown": "`strcat(fn_decl, var_decl)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10275,
                        "charLength": 25
                      },
                      "insertedContent": {
                        "text": "strcat_s(fn_decl, <size of fn_decl>,  var_decl)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10275,
                        "charLength": 25
                      },
                      "insertedContent": {
                        "text": "strlcat(fn_decl,  var_decl, <size of fn_decl>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "a8a16686-b415-35a2-8558-923e1a9c8155",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "\"Detected Use of Prohibited C Function (strcat)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 351,
                  "startColumn": 8,
                  "endLine": 351,
                  "endColumn": 28,
                  "charOffset": 10165,
                  "charLength": 20,
                  "snippet": {
                    "text": "strcat(fn_decl, pch)",
                    "rendered": {
                      "text": "strcat(fn_decl, pch)",
                      "markdown": "`strcat(fn_decl, pch)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10165,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strcat_s(fn_decl, <size of fn_decl>,  pch)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10165,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strlcat(fn_decl,  pch, <size of fn_decl>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "e2a5d497-cd7d-3a6f-8996-73d0be4add23",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "\"Detected Use of Prohibited C Function (strcpy)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 579,
                  "startColumn": 4,
                  "endLine": 579,
                  "endColumn": 26,
                  "charOffset": 18781,
                  "charLength": 22,
                  "snippet": {
                    "text": "strcpy(text_dup, text)",
                    "rendered": {
                      "text": "strcpy(text_dup, text)",
                      "markdown": "`strcpy(text_dup, text)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "strcpy is frequently dangerous, as it will cause a buffer overflow if the source is larger than the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 18781,
                        "charLength": 22
                      },
                      "insertedContent": {
                        "text": "strcpy_s(text_dup, <size of text_dup>,  text)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "strcpy is frequently dangerous, as it will cause a buffer overflow if the source is larger than the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 18781,
                        "charLength": 22
                      },
                      "insertedContent": {
                        "text": "strlcpy(text_dup,  text, <size of text_dup>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "94944e80-cf44-3479-bf06-bb627c04b2e2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Identified\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 349,
                  "startColumn": 14,
                  "endLine": 349,
                  "endColumn": 20,
                  "charOffset": 10077,
                  "charLength": 6,
                  "snippet": {
                    "text": "strtok",
                    "rendered": {
                      "text": "strtok",
                      "markdown": "`strtok`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "1ea11485-bf2d-389f-b44d-76d7efca58a2",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "\"Detected Use of Prohibited C Function (strcat)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 337,
                  "startColumn": 8,
                  "endLine": 337,
                  "endColumn": 46,
                  "charOffset": 9623,
                  "charLength": 38,
                  "snippet": {
                    "text": "strcat(fn_decl, \"(atmi_lparm_t *lparm)",
                    "rendered": {
                      "text": "strcat(fn_decl, \"(atmi_lparm_t *lparm)",
                      "markdown": "`strcat(fn_decl, \"(atmi_lparm_t *lparm)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9623,
                        "charLength": 38
                      },
                      "insertedContent": {
                        "text": "strcat_s(fn_decl, <size of fn_decl>,  \"(atmi_lparm_t *lparm)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9623,
                        "charLength": 38
                      },
                      "insertedContent": {
                        "text": "strlcat(fn_decl,  \"(atmi_lparm_t *lparm, <size of fn_decl>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "20c10b1e-6d8e-3074-91d8-cec1ab1a2637",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "\"Detected Use of Prohibited C Function (strcpy)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 495,
                  "startColumn": 12,
                  "endLine": 495,
                  "endColumn": 76,
                  "charOffset": 15460,
                  "charLength": 64,
                  "snippet": {
                    "text": "strcpy(pif_name, TREE_STRING_POINTER (TREE_VALUE ( itrArgument )",
                    "rendered": {
                      "text": "strcpy(pif_name, TREE_STRING_POINTER (TREE_VALUE ( itrArgument )",
                      "markdown": "`strcpy(pif_name, TREE_STRING_POINTER (TREE_VALUE ( itrArgument )`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "strcpy is frequently dangerous, as it will cause a buffer overflow if the source is larger than the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15460,
                        "charLength": 64
                      },
                      "insertedContent": {
                        "text": "strcpy_s(pif_name, <size of pif_name>,  TREE_STRING_POINTER (TREE_VALUE ( itrArgument )"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "strcpy is frequently dangerous, as it will cause a buffer overflow if the source is larger than the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15460,
                        "charLength": 64
                      },
                      "insertedContent": {
                        "text": "strlcpy(pif_name,  TREE_STRING_POINTER (TREE_VALUE ( itrArgument , <size of pif_name>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "0290aab3-7a15-3d9c-9590-a7aab90ac6ee",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "\"Detected Use of Prohibited C Function (strcat)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 332,
                  "startColumn": 4,
                  "endLine": 332,
                  "endColumn": 28,
                  "charOffset": 9487,
                  "charLength": 24,
                  "snippet": {
                    "text": "strcat(fn_decl, fn_name)",
                    "rendered": {
                      "text": "strcat(fn_decl, fn_name)",
                      "markdown": "`strcat(fn_decl, fn_name)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9487,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "strcat_s(fn_decl, <size of fn_decl>,  fn_name)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9487,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "strlcat(fn_decl,  fn_name, <size of fn_decl>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "165436b7-7c92-3aca-8e53-3321adbc8f82",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 333,
                  "startColumn": 10,
                  "endLine": 333,
                  "endColumn": 16,
                  "charOffset": 9523,
                  "charLength": 6,
                  "snippet": {
                    "text": "strtok",
                    "rendered": {
                      "text": "strtok",
                      "markdown": "`strtok`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "a5707602-59ad-3b9c-9d56-3be2441e1ba8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 10,
                  "endLine": 331,
                  "endColumn": 16,
                  "charOffset": 9463,
                  "charLength": 6,
                  "snippet": {
                    "text": "strtok",
                    "rendered": {
                      "text": "strtok",
                      "markdown": "`strtok`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "acfc5143-2383-3f0b-bcaf-29ff258645a7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 328,
                  "startColumn": 16,
                  "endLine": 328,
                  "endColumn": 22,
                  "charOffset": 9342,
                  "charLength": 6,
                  "snippet": {
                    "text": "strtok",
                    "rendered": {
                      "text": "strtok",
                      "markdown": "`strtok`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "199993d2-10ab-3c57-9f22-8e0f15052b41",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "\"Detected Use of Prohibited C Function (strcat)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 334,
                  "startColumn": 20,
                  "endLine": 334,
                  "endColumn": 40,
                  "charOffset": 9563,
                  "charLength": 20,
                  "snippet": {
                    "text": "strcat(fn_decl, pch)",
                    "rendered": {
                      "text": "strcat(fn_decl, pch)",
                      "markdown": "`strcat(fn_decl, pch)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9563,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strcat_s(fn_decl, <size of fn_decl>,  pch)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9563,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strlcat(fn_decl,  pch, <size of fn_decl>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "553c001a-36a9-3920-bb2f-5c50889c1154",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "\"Detected Use of Prohibited C Function (strcat)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 320,
                  "startColumn": 12,
                  "endLine": 320,
                  "endColumn": 30,
                  "charOffset": 9132,
                  "charLength": 18,
                  "snippet": {
                    "text": "strcat(fn_decl, \")",
                    "rendered": {
                      "text": "strcat(fn_decl, \")",
                      "markdown": "`strcat(fn_decl, \")`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9132,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "strcat_s(fn_decl, <size of fn_decl>,  \")"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9132,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "strlcat(fn_decl,  \", <size of fn_decl>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "f19a004a-36f0-3ff6-9873-95cd8f2a0818",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Identified\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/runtime/include/rt.h"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 16,
                  "endLine": 53,
                  "endColumn": 22,
                  "charOffset": 1856,
                  "charLength": 6,
                  "snippet": {
                    "text": "getenv",
                    "rendered": {
                      "text": "getenv",
                      "markdown": "`getenv`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "9302a949-44fa-3acb-b41b-cf916a5bc8e6",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "\"Detected Use of Prohibited C Function (strcpy)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 20,
                  "endLine": 330,
                  "endColumn": 58,
                  "charOffset": 9413,
                  "charLength": 38,
                  "snippet": {
                    "text": "strcpy(fn_decl, \"atmi_task_handle_t \")",
                    "rendered": {
                      "text": "strcpy(fn_decl, \"atmi_task_handle_t \")",
                      "markdown": "`strcpy(fn_decl, \"atmi_task_handle_t \")`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "strcpy is frequently dangerous, as it will cause a buffer overflow if the source is larger than the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9413,
                        "charLength": 38
                      },
                      "insertedContent": {
                        "text": "strcpy_s(fn_decl, <size of fn_decl>,  \"atmi_task_handle_t \")"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "strcpy is frequently dangerous, as it will cause a buffer overflow if the source is larger than the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9413,
                        "charLength": 38
                      },
                      "insertedContent": {
                        "text": "strlcpy(fn_decl,  \"atmi_task_handle_t \", <size of fn_decl>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "47590e02-7433-3abe-989c-5e12c48be81a",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Detected Use of Prohibited C Function (strcat)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 4,
                  "endLine": 324,
                  "endColumn": 24,
                  "charOffset": 9211,
                  "charLength": 20,
                  "snippet": {
                    "text": "strcat(fn_decl, \";\")",
                    "rendered": {
                      "text": "strcat(fn_decl, \";\")",
                      "markdown": "`strcat(fn_decl, \";\")`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9211,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strcat_s(fn_decl, <size of fn_decl>,  \";\")"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9211,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strlcat(fn_decl,  \";\", <size of fn_decl>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "3528deed-3ec5-31b1-9e57-2af33fdbc54f",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "\"Detected Use of Prohibited C Function (strcat)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 8,
                  "endLine": 315,
                  "endColumn": 28,
                  "charOffset": 8915,
                  "charLength": 20,
                  "snippet": {
                    "text": "strcat(fn_decl, pch)",
                    "rendered": {
                      "text": "strcat(fn_decl, pch)",
                      "markdown": "`strcat(fn_decl, pch)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8915,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strcat_s(fn_decl, <size of fn_decl>,  pch)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8915,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strlcat(fn_decl,  pch, <size of fn_decl>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "039e9e3c-f369-3c51-8f8c-6f4a11cb3df9",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Detected Use of Prohibited C Function (strcat)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 306,
                  "startColumn": 8,
                  "endLine": 306,
                  "endColumn": 28,
                  "charOffset": 8600,
                  "charLength": 20,
                  "snippet": {
                    "text": "strcat(fn_decl, \"(\")",
                    "rendered": {
                      "text": "strcat(fn_decl, \"(\")",
                      "markdown": "`strcat(fn_decl, \"(\")`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8600,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strcat_s(fn_decl, <size of fn_decl>,  \"(\")"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8600,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strlcat(fn_decl,  \"(\", <size of fn_decl>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "14164cbb-1953-37a6-a12f-1e0786293e2a",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (malloc)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/runtime/core/system.cpp"
                },
                "region": {
                  "startLine": 1722,
                  "startColumn": 25,
                  "endLine": 1722,
                  "endColumn": 44,
                  "charOffset": 63511,
                  "charLength": 19,
                  "snippet": {
                    "text": "malloc(module_size)",
                    "rendered": {
                      "text": "malloc(module_size)",
                      "markdown": "`malloc(module_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/runtime/core/system.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 63511,
                        "charLength": 19
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "a3ac6a21-dc23-32f5-af3f-d0c3cbe1626e",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Detected Prohibited C Function (strcat) Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 8,
                  "endLine": 318,
                  "endColumn": 33,
                  "charOffset": 9025,
                  "charLength": 25,
                  "snippet": {
                    "text": "strcat(fn_decl, var_decl)",
                    "rendered": {
                      "text": "strcat(fn_decl, var_decl)",
                      "markdown": "`strcat(fn_decl, var_decl)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9025,
                        "charLength": 25
                      },
                      "insertedContent": {
                        "text": "strcat_s(fn_decl, <size of fn_decl>,  var_decl)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9025,
                        "charLength": 25
                      },
                      "insertedContent": {
                        "text": "strlcat(fn_decl,  var_decl, <size of fn_decl>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "1a5244ba-bbbc-3787-8311-845ba7d04c1c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Identified\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 313,
                  "startColumn": 14,
                  "endLine": 313,
                  "endColumn": 20,
                  "charOffset": 8827,
                  "charLength": 6,
                  "snippet": {
                    "text": "strtok",
                    "rendered": {
                      "text": "strtok",
                      "markdown": "`strtok`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "24cec187-6ac0-32a1-ac1c-f63eea7b27d4",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Detected Prohibited C Function (strcat)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 8,
                  "endLine": 303,
                  "endColumn": 27,
                  "charOffset": 8533,
                  "charLength": 19,
                  "snippet": {
                    "text": "strcat(fn_decl, \"()",
                    "rendered": {
                      "text": "strcat(fn_decl, \"()",
                      "markdown": "`strcat(fn_decl, \"()`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8533,
                        "charLength": 19
                      },
                      "insertedContent": {
                        "text": "strcat_s(fn_decl, <size of fn_decl>,  \"()"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8533,
                        "charLength": 19
                      },
                      "insertedContent": {
                        "text": "strlcat(fn_decl,  \"(, <size of fn_decl>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "c82f6496-0fa9-3972-bdfc-7fc03af20652",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "\"Detected Use of Prohibited C Function (strcat)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 20,
                  "endLine": 301,
                  "endColumn": 40,
                  "charOffset": 8477,
                  "charLength": 20,
                  "snippet": {
                    "text": "strcat(fn_decl, pch)",
                    "rendered": {
                      "text": "strcat(fn_decl, pch)",
                      "markdown": "`strcat(fn_decl, pch)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8477,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strcat_s(fn_decl, <size of fn_decl>,  pch)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8477,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strlcat(fn_decl,  pch, <size of fn_decl>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "e650a335-33e3-31b6-ae69-151b4f8da854",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/runtime/core/system.cpp"
                },
                "region": {
                  "startLine": 1723,
                  "startColumn": 6,
                  "endLine": 1723,
                  "endColumn": 51,
                  "charOffset": 63538,
                  "charLength": 45,
                  "snippet": {
                    "text": "memcpy(tmp_module, module_bytes, module_size)",
                    "rendered": {
                      "text": "memcpy(tmp_module, module_bytes, module_size)",
                      "markdown": "`memcpy(tmp_module, module_bytes, module_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/runtime/core/system.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 63538,
                        "charLength": 45
                      },
                      "insertedContent": {
                        "text": "memcpy_s(tmp_module, <size of tmp_module>,  module_bytes,  module_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "293e20f1-1aaa-39a8-bdb6-134551e89596",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 10,
                  "endLine": 300,
                  "endColumn": 16,
                  "charOffset": 8437,
                  "charLength": 6,
                  "snippet": {
                    "text": "strtok",
                    "rendered": {
                      "text": "strtok",
                      "markdown": "`strtok`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "b38d84fc-731a-365c-a62f-ecefd5f5f79e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 298,
                  "startColumn": 10,
                  "endLine": 298,
                  "endColumn": 16,
                  "charOffset": 8377,
                  "charLength": 6,
                  "snippet": {
                    "text": "strtok",
                    "rendered": {
                      "text": "strtok",
                      "markdown": "`strtok`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "d27b67ae-cefd-3c60-b5f9-c97f91d9e967",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 296,
                  "startColumn": 16,
                  "endLine": 296,
                  "endColumn": 22,
                  "charOffset": 8307,
                  "charLength": 6,
                  "snippet": {
                    "text": "strtok",
                    "rendered": {
                      "text": "strtok",
                      "markdown": "`strtok`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "8db5db4e-62cd-3d02-8fb9-6869db355d55",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "\"Detected Use of Prohibited C Function (strcat)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 12,
                  "endLine": 289,
                  "endColumn": 30,
                  "charOffset": 8122,
                  "charLength": 18,
                  "snippet": {
                    "text": "strcat(fn_decl, \")",
                    "rendered": {
                      "text": "strcat(fn_decl, \")",
                      "markdown": "`strcat(fn_decl, \")`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8122,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "strcat_s(fn_decl, <size of fn_decl>,  \")"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8122,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "strlcat(fn_decl,  \", <size of fn_decl>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "38415447-3bb8-3e3f-9d04-3f3712ea2751",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "\"Detected Use of Prohibited C Function (strcat)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 8,
                  "endLine": 284,
                  "endColumn": 28,
                  "charOffset": 7904,
                  "charLength": 20,
                  "snippet": {
                    "text": "strcat(fn_decl, pch)",
                    "rendered": {
                      "text": "strcat(fn_decl, pch)",
                      "markdown": "`strcat(fn_decl, pch)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7904,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strcat_s(fn_decl, <size of fn_decl>,  pch)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7904,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strlcat(fn_decl,  pch, <size of fn_decl>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "c86e70b7-d8d1-37f4-b30f-6ea807e4e122",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "\"Detected Use of Prohibited C Function (strcat)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 299,
                  "startColumn": 4,
                  "endLine": 299,
                  "endColumn": 28,
                  "charOffset": 8401,
                  "charLength": 24,
                  "snippet": {
                    "text": "strcat(fn_decl, fn_name)",
                    "rendered": {
                      "text": "strcat(fn_decl, fn_name)",
                      "markdown": "`strcat(fn_decl, fn_name)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8401,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "strcat_s(fn_decl, <size of fn_decl>,  fn_name)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8401,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "strlcat(fn_decl,  fn_name, <size of fn_decl>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "e02ad51b-0155-3a0f-9c17-f4977446f95b",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "\"Detected Use of Prohibited C Function (strcpy)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 20,
                  "endLine": 297,
                  "endColumn": 40,
                  "charOffset": 8345,
                  "charLength": 20,
                  "snippet": {
                    "text": "strcpy(fn_decl, pch)",
                    "rendered": {
                      "text": "strcpy(fn_decl, pch)",
                      "markdown": "`strcpy(fn_decl, pch)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "strcpy is frequently dangerous, as it will cause a buffer overflow if the source is larger than the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8345,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strcpy_s(fn_decl, <size of fn_decl>,  pch)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "strcpy is frequently dangerous, as it will cause a buffer overflow if the source is larger than the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8345,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strlcpy(fn_decl,  pch, <size of fn_decl>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "878b3226-a975-306d-9759-3667cf78da90",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Detected Prohibited C Function (strcat) Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 287,
                  "startColumn": 8,
                  "endLine": 287,
                  "endColumn": 33,
                  "charOffset": 8015,
                  "charLength": 25,
                  "snippet": {
                    "text": "strcat(fn_decl, var_decl)",
                    "rendered": {
                      "text": "strcat(fn_decl, var_decl)",
                      "markdown": "`strcat(fn_decl, var_decl)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8015,
                        "charLength": 25
                      },
                      "insertedContent": {
                        "text": "strcat_s(fn_decl, <size of fn_decl>,  var_decl)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8015,
                        "charLength": 25
                      },
                      "insertedContent": {
                        "text": "strlcat(fn_decl,  var_decl, <size of fn_decl>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "4ebc3c29-8f20-3a63-8de6-cf9b31c0d5ce",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Identified\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 14,
                  "endLine": 282,
                  "endColumn": 20,
                  "charOffset": 7816,
                  "charLength": 6,
                  "snippet": {
                    "text": "strtok",
                    "rendered": {
                      "text": "strtok",
                      "markdown": "`strtok`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "538db8f8-9cda-30f5-8ecf-4c81b13c677d",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Detected Use of Prohibited C Function (strcat)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 8,
                  "endLine": 275,
                  "endColumn": 28,
                  "charOffset": 7589,
                  "charLength": 20,
                  "snippet": {
                    "text": "strcat(fn_decl, \"(\")",
                    "rendered": {
                      "text": "strcat(fn_decl, \"(\")",
                      "markdown": "`strcat(fn_decl, \"(\")`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7589,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strcat_s(fn_decl, <size of fn_decl>,  \"(\")"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7589,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strlcat(fn_decl,  \"(\", <size of fn_decl>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "c5a9580b-7513-34fe-8f64-c7544cdcef37",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Detected Prohibited C Function (strcat)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 8,
                  "endLine": 272,
                  "endColumn": 27,
                  "charOffset": 7522,
                  "charLength": 19,
                  "snippet": {
                    "text": "strcat(fn_decl, \"()",
                    "rendered": {
                      "text": "strcat(fn_decl, \"()",
                      "markdown": "`strcat(fn_decl, \"()`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7522,
                        "charLength": 19
                      },
                      "insertedContent": {
                        "text": "strcat_s(fn_decl, <size of fn_decl>,  \"()"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7522,
                        "charLength": 19
                      },
                      "insertedContent": {
                        "text": "strlcat(fn_decl,  \"(, <size of fn_decl>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "92b1e6c6-4b60-3a2a-9c89-cdf2c375cb2a",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "\"Detected Use of Prohibited C Function (strcat)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 20,
                  "endLine": 270,
                  "endColumn": 40,
                  "charOffset": 7466,
                  "charLength": 20,
                  "snippet": {
                    "text": "strcat(fn_decl, pch)",
                    "rendered": {
                      "text": "strcat(fn_decl, pch)",
                      "markdown": "`strcat(fn_decl, pch)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7466,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strcat_s(fn_decl, <size of fn_decl>,  pch)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7466,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strlcat(fn_decl,  pch, <size of fn_decl>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "c10676aa-0a29-3209-bb91-9bec381c1883",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 10,
                  "endLine": 269,
                  "endColumn": 16,
                  "charOffset": 7426,
                  "charLength": 6,
                  "snippet": {
                    "text": "strtok",
                    "rendered": {
                      "text": "strtok",
                      "markdown": "`strtok`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "168de7d5-519d-30e4-8c29-12528f697003",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "\"Detected Use of Prohibited C Function (strcat)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 4,
                  "endLine": 268,
                  "endColumn": 31,
                  "charOffset": 7387,
                  "charLength": 27,
                  "snippet": {
                    "text": "strcat(fn_decl, \"_wrapper\")",
                    "rendered": {
                      "text": "strcat(fn_decl, \"_wrapper\")",
                      "markdown": "`strcat(fn_decl, \"_wrapper\")`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7387,
                        "charLength": 27
                      },
                      "insertedContent": {
                        "text": "strcat_s(fn_decl, <size of fn_decl>,  \"_wrapper\")"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7387,
                        "charLength": 27
                      },
                      "insertedContent": {
                        "text": "strlcat(fn_decl,  \"_wrapper\", <size of fn_decl>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "a3dfc635-2763-3505-be00-0f33cd89dbe3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 10,
                  "endLine": 266,
                  "endColumn": 16,
                  "charOffset": 7333,
                  "charLength": 6,
                  "snippet": {
                    "text": "strtok",
                    "rendered": {
                      "text": "strtok",
                      "markdown": "`strtok`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "2c067fdc-a4f6-3174-8e3c-072e943938f5",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "\"Detected Use of Prohibited C Function (strcat)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 4,
                  "endLine": 267,
                  "endColumn": 28,
                  "charOffset": 7357,
                  "charLength": 24,
                  "snippet": {
                    "text": "strcat(fn_decl, fn_name)",
                    "rendered": {
                      "text": "strcat(fn_decl, fn_name)",
                      "markdown": "`strcat(fn_decl, fn_name)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7357,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "strcat_s(fn_decl, <size of fn_decl>,  fn_name)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7357,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "strlcat(fn_decl,  fn_name, <size of fn_decl>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "c9493e99-9419-33b9-8adb-c693a615957e",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "\"Detected Use of Prohibited C Function (strcpy)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 20,
                  "endLine": 265,
                  "endColumn": 40,
                  "charOffset": 7301,
                  "charLength": 20,
                  "snippet": {
                    "text": "strcpy(fn_decl, pch)",
                    "rendered": {
                      "text": "strcpy(fn_decl, pch)",
                      "markdown": "`strcpy(fn_decl, pch)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "strcpy is frequently dangerous, as it will cause a buffer overflow if the source is larger than the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7301,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strcpy_s(fn_decl, <size of fn_decl>,  pch)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "strcpy is frequently dangerous, as it will cause a buffer overflow if the source is larger than the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7301,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strlcpy(fn_decl,  pch, <size of fn_decl>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "e7aab4c6-5a47-3ea5-b3fe-0b42a7b471d7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 16,
                  "endLine": 264,
                  "endColumn": 22,
                  "charOffset": 7263,
                  "charLength": 6,
                  "snippet": {
                    "text": "strtok",
                    "rendered": {
                      "text": "strtok",
                      "markdown": "`strtok`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "48e55db4-d7b3-331f-bc95-9f4e46eb706d",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Detected Use of Prohibited C Function (strcat)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 4,
                  "endLine": 237,
                  "endColumn": 29,
                  "charOffset": 6470,
                  "charLength": 25,
                  "snippet": {
                    "text": "strcat(cmd_c, clfilename)",
                    "rendered": {
                      "text": "strcat(cmd_c, clfilename)",
                      "markdown": "`strcat(cmd_c, clfilename)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6470,
                        "charLength": 25
                      },
                      "insertedContent": {
                        "text": "strcat_s(cmd_c, <size of cmd_c>,  clfilename)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6470,
                        "charLength": 25
                      },
                      "insertedContent": {
                        "text": "strlcat(cmd_c,  clfilename, <size of cmd_c>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "d01e8482-1118-3dc2-83aa-f6e38bbcc3d4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/runtime/core/system.cpp"
                },
                "region": {
                  "startLine": 1161,
                  "startColumn": 48,
                  "endLine": 1161,
                  "endColumn": 52,
                  "charOffset": 40927,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "2e3e7dda-b843-3fff-a2df-e9cdc2ab183a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/runtime/core/system.cpp"
                },
                "region": {
                  "startLine": 1158,
                  "startColumn": 48,
                  "endLine": 1158,
                  "endColumn": 52,
                  "charOffset": 40802,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "5adbff0c-9284-305a-8ac2-0a8c64992996",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/runtime/core/system.cpp"
                },
                "region": {
                  "startLine": 1146,
                  "startColumn": 41,
                  "endLine": 1146,
                  "endColumn": 45,
                  "charOffset": 40270,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "27d3a39f-8c11-3d32-899b-55901a3acd44",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/runtime/core/system.cpp"
                },
                "region": {
                  "startLine": 1143,
                  "startColumn": 41,
                  "endLine": 1143,
                  "endColumn": 45,
                  "charOffset": 40159,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "7e2f8462-f030-3edb-bc97-abce2686b4fd",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Detected Prohibited C Function (strcat)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 6,
                  "endLine": 236,
                  "endColumn": 28,
                  "charOffset": 6442,
                  "charLength": 22,
                  "snippet": {
                    "text": "strcat(cmd_c, \" -vv \")",
                    "rendered": {
                      "text": "strcat(cmd_c, \" -vv \")",
                      "markdown": "`strcat(cmd_c, \" -vv \")`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6442,
                        "charLength": 22
                      },
                      "insertedContent": {
                        "text": "strcat_s(cmd_c, <size of cmd_c>,  \" -vv \")"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6442,
                        "charLength": 22
                      },
                      "insertedContent": {
                        "text": "strlcat(cmd_c,  \" -vv \", <size of cmd_c>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "750a2c20-5b27-39c3-937c-498222b24db5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/runtime/core/system.cpp"
                },
                "region": {
                  "startLine": 1149,
                  "startColumn": 53,
                  "endLine": 1149,
                  "endColumn": 57,
                  "charOffset": 40405,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "768b2c9a-acad-3e03-ad0d-fe9a0edf153e",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "\"Detected Use of Prohibited C Function (strcat)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 6,
                  "endLine": 235,
                  "endColumn": 27,
                  "charOffset": 6413,
                  "charLength": 21,
                  "snippet": {
                    "text": "strcat(cmd_c, \" -k \")",
                    "rendered": {
                      "text": "strcat(cmd_c, \" -k \")",
                      "markdown": "`strcat(cmd_c, \" -k \")`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6413,
                        "charLength": 21
                      },
                      "insertedContent": {
                        "text": "strcat_s(cmd_c, <size of cmd_c>,  \" -k \")"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6413,
                        "charLength": 21
                      },
                      "insertedContent": {
                        "text": "strlcat(cmd_c,  \" -k \", <size of cmd_c>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "d1c93352-875a-3602-8f52-24e8515c10f6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/runtime/core/system.cpp"
                },
                "region": {
                  "startLine": 1140,
                  "startColumn": 46,
                  "endLine": 1140,
                  "endColumn": 50,
                  "charOffset": 40048,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "038eac36-e3d0-3563-b572-bd3f35d81dff",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/runtime/core/system.cpp"
                },
                "region": {
                  "startLine": 1137,
                  "startColumn": 52,
                  "endLine": 1137,
                  "endColumn": 56,
                  "charOffset": 39927,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "add56d38-dc5b-3349-8b29-cb9a74b86fdd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/runtime/core/system.cpp"
                },
                "region": {
                  "startLine": 1044,
                  "startColumn": 31,
                  "endLine": 1044,
                  "endColumn": 35,
                  "charOffset": 37007,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "ad361406-a6cb-3d10-a7c3-144a48650f2e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/runtime/core/system.cpp"
                },
                "region": {
                  "startLine": 1134,
                  "startColumn": 56,
                  "endLine": 1134,
                  "endColumn": 60,
                  "charOffset": 39794,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "30265d68-fefb-3b44-b474-a7e2d3c83750",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/runtime/core/system.cpp"
                },
                "region": {
                  "startLine": 1131,
                  "startColumn": 54,
                  "endLine": 1131,
                  "endColumn": 58,
                  "charOffset": 39653,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "36e1b8ab-234f-38b4-a31b-722c8ae30384",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/runtime/core/system.cpp"
                },
                "region": {
                  "startLine": 1124,
                  "startColumn": 38,
                  "endLine": 1124,
                  "endColumn": 42,
                  "charOffset": 39410,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "616d86bd-04b8-36af-908a-a6925430c25b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/runtime/core/system.cpp"
                },
                "region": {
                  "startLine": 1021,
                  "startColumn": 23,
                  "endLine": 1021,
                  "endColumn": 27,
                  "charOffset": 36289,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "b8e21c9f-1ccd-3a95-95de-2b97d892ab2f",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "\"Detected Use of Prohibited C Function (strcat)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 8,
                  "endLine": 232,
                  "endColumn": 31,
                  "charOffset": 6349,
                  "charLength": 23,
                  "snippet": {
                    "text": "strcat(cmd_c, \" -hof \")",
                    "rendered": {
                      "text": "strcat(cmd_c, \" -hof \")",
                      "markdown": "`strcat(cmd_c, \" -hof \")`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6349,
                        "charLength": 23
                      },
                      "insertedContent": {
                        "text": "strcat_s(cmd_c, <size of cmd_c>,  \" -hof \")"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6349,
                        "charLength": 23
                      },
                      "insertedContent": {
                        "text": "strlcat(cmd_c,  \" -hof \", <size of cmd_c>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "95f270d8-f6ac-394a-8e80-303031b6fa77",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/runtime/core/system.cpp"
                },
                "region": {
                  "startLine": 1017,
                  "startColumn": 22,
                  "endLine": 1017,
                  "endColumn": 26,
                  "charOffset": 36158,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "40a1f8b3-8be4-365e-9d80-72a07c2e3125",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/runtime/core/system.cpp"
                },
                "region": {
                  "startLine": 1013,
                  "startColumn": 21,
                  "endLine": 1013,
                  "endColumn": 25,
                  "charOffset": 36029,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "04a1c522-5d1c-30d3-94a1-213aeed4bd19",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "\"Detected Use of Prohibited C Function (strcat)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 8,
                  "endLine": 226,
                  "endColumn": 26,
                  "charOffset": 6199,
                  "charLength": 18,
                  "snippet": {
                    "text": "strcat(cmd_c, \" \")",
                    "rendered": {
                      "text": "strcat(cmd_c, \" \")",
                      "markdown": "`strcat(cmd_c, \" \")`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6199,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "strcat_s(cmd_c, <size of cmd_c>,  \" \")"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6199,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "strlcat(cmd_c,  \" \", <size of cmd_c>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "cb208732-9933-31ee-a892-60f935762267",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "\"Detected Use of Prohibited C Function (strcat)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 6,
                  "endLine": 229,
                  "endColumn": 41,
                  "charOffset": 6258,
                  "charLength": 35,
                  "snippet": {
                    "text": "strcat(cmd_c, \"-rp /opt/hsa.1_1T \")",
                    "rendered": {
                      "text": "strcat(cmd_c, \"-rp /opt/hsa.1_1T \")",
                      "markdown": "`strcat(cmd_c, \"-rp /opt/hsa.1_1T \")`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6258,
                        "charLength": 35
                      },
                      "insertedContent": {
                        "text": "strcat_s(cmd_c, <size of cmd_c>,  \"-rp /opt/hsa.1_1T \")"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6258,
                        "charLength": 35
                      },
                      "insertedContent": {
                        "text": "strlcat(cmd_c,  \"-rp /opt/hsa.1_1T \", <size of cmd_c>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "4934065a-0db9-34cc-b51b-b4aa4f07f5b5",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "\"Detected Use of Prohibited C Function (strcat)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 8,
                  "endLine": 224,
                  "endColumn": 28,
                  "charOffset": 6134,
                  "charLength": 20,
                  "snippet": {
                    "text": "strcat(cmd_c, \"-s \")",
                    "rendered": {
                      "text": "strcat(cmd_c, \"-s \")",
                      "markdown": "`strcat(cmd_c, \"-s \")`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6134,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strcat_s(cmd_c, <size of cmd_c>,  \"-s \")"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6134,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strlcat(cmd_c,  \"-s \", <size of cmd_c>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "71963412-af78-351b-bc09-f952fbce3ecb",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Detected Prohibited C Function (strcat) Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 8,
                  "endLine": 225,
                  "endColumn": 33,
                  "charOffset": 6164,
                  "charLength": 25,
                  "snippet": {
                    "text": "strcat(cmd_c, symbolname)",
                    "rendered": {
                      "text": "strcat(cmd_c, symbolname)",
                      "markdown": "`strcat(cmd_c, symbolname)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6164,
                        "charLength": 25
                      },
                      "insertedContent": {
                        "text": "strcat_s(cmd_c, <size of cmd_c>,  symbolname)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6164,
                        "charLength": 25
                      },
                      "insertedContent": {
                        "text": "strlcat(cmd_c,  symbolname, <size of cmd_c>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "37e7f7d2-9091-3c31-94a2-c7336803e87e",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "\"Detected Use of Prohibited C Function (strcat)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 4,
                  "endLine": 222,
                  "endColumn": 22,
                  "charOffset": 6057,
                  "charLength": 18,
                  "snippet": {
                    "text": "strcat(cmd_c, \" \")",
                    "rendered": {
                      "text": "strcat(cmd_c, \" \")",
                      "markdown": "`strcat(cmd_c, \" \")`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6057,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "strcat_s(cmd_c, <size of cmd_c>,  \" \")"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If the combination of strings is larger than the destination buffer, strcat will cbuffer overflow the destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6057,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "strlcat(cmd_c,  \" \", <size of cmd_c>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "40895d25-e2eb-39bb-aa67-2cd80e8a73b3",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/runtime/core/task.cpp"
                },
                "region": {
                  "startLine": 1360,
                  "startColumn": 8,
                  "endLine": 1360,
                  "endColumn": 65,
                  "charOffset": 51102,
                  "charLength": 57,
                  "snippet": {
                    "text": "memcpy(addr, compute_task->kernarg_region_, size_to_copy)",
                    "rendered": {
                      "text": "memcpy(addr, compute_task->kernarg_region_, size_to_copy)",
                      "markdown": "`memcpy(addr, compute_task->kernarg_region_, size_to_copy)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/runtime/core/task.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 51102,
                        "charLength": 57
                      },
                      "insertedContent": {
                        "text": "memcpy_s(addr, <size of addr>,  compute_task->kernarg_region_,  size_to_copy)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "b18679c8-e370-30cc-bac4-0fda5b4bee09",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/runtime/core/task.cpp"
                },
                "region": {
                  "startLine": 1152,
                  "startColumn": 4,
                  "endLine": 1153,
                  "endColumn": 31,
                  "charOffset": 42848,
                  "charLength": 99,
                  "snippet": {
                    "text": "memcpy(thisKernargAddress + kernel_impl->arg_offsets()[i], args[i],\n           kernel_->arg_sizes()",
                    "rendered": {
                      "text": "memcpy(thisKernargAddress + kernel_impl->arg_offsets()[i], args[i],\n           kernel_->arg_sizes()",
                      "markdown": "`memcpy(thisKernargAddress + kernel_impl->arg_offsets()[i], args[i],\n           kernel_->arg_sizes()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/runtime/core/task.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 42848,
                        "charLength": 99
                      },
                      "insertedContent": {
                        "text": "memcpy_s(thisKernargAddress + kernel_impl->arg_offsets()[i], <size of thisKernargAddress + kernel_impl->arg_offsets()[i]>,  args[i], \n           kernel_->arg_sizes()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "187b003a-81af-3b04-840b-9582380a532e",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/runtime/core/task.cpp"
                },
                "region": {
                  "startLine": 1637,
                  "startColumn": 10,
                  "endLine": 1637,
                  "endColumn": 67,
                  "charOffset": 62645,
                  "charLength": 57,
                  "snippet": {
                    "text": "memcpy(addr, compute_task->kernarg_region_, size_to_copy)",
                    "rendered": {
                      "text": "memcpy(addr, compute_task->kernarg_region_, size_to_copy)",
                      "markdown": "`memcpy(addr, compute_task->kernarg_region_, size_to_copy)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/runtime/core/task.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 62645,
                        "charLength": 57
                      },
                      "insertedContent": {
                        "text": "memcpy_s(addr, <size of addr>,  compute_task->kernarg_region_,  size_to_copy)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "bf7573d8-d1c8-3418-865c-537f296abf4f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Identified\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 4,
                  "endLine": 221,
                  "endColumn": 10,
                  "charOffset": 6032,
                  "charLength": 6,
                  "snippet": {
                    "text": "strtok",
                    "rendered": {
                      "text": "strtok",
                      "markdown": "`strtok`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "d81c6844-33cc-3a0e-8207-55d81e974d82",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "\"Detected Use of Prohibited C Function (strcpy)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 4,
                  "endLine": 219,
                  "endColumn": 29,
                  "charOffset": 5957,
                  "charLength": 25,
                  "snippet": {
                    "text": "strcpy(cmd_c, cmd.c_str()",
                    "rendered": {
                      "text": "strcpy(cmd_c, cmd.c_str()",
                      "markdown": "`strcpy(cmd_c, cmd.c_str()`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "strcpy is frequently dangerous, as it will cause a buffer overflow if the source is larger than the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5957,
                        "charLength": 25
                      },
                      "insertedContent": {
                        "text": "strcpy_s(cmd_c, <size of cmd_c>,  cmd.c_str()"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "strcpy is frequently dangerous, as it will cause a buffer overflow if the source is larger than the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/compiler/atl_pifgen_plugin.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5957,
                        "charLength": 25
                      },
                      "insertedContent": {
                        "text": "strlcpy(cmd_c,  cmd.c_str(, <size of cmd_c>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "5684e55f-8a59-3491-ae67-8189fba1c82b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 113,
                  "endColumn": 7,
                  "charOffset": 2986,
                  "charLength": 7,
                  "snippet": {
                    "text": "fprintf",
                    "rendered": {
                      "text": "fprintf",
                      "markdown": "`fprintf`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "1bff6fa4-a9e1-3e41-a2b2-a831c4831f3c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 104,
                  "endLine": 104,
                  "endColumn": 7,
                  "charOffset": 2812,
                  "charLength": 7,
                  "snippet": {
                    "text": "fprintf",
                    "rendered": {
                      "text": "fprintf",
                      "markdown": "`fprintf`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "cd5b0628-2541-35ef-92ae-abd11b6019a3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compiler/atl_pifgen_plugin.c"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 4,
                  "endLine": 96,
                  "endColumn": 11,
                  "charOffset": 2646,
                  "charLength": 7,
                  "snippet": {
                    "text": "fprintf",
                    "rendered": {
                      "text": "fprintf",
                      "markdown": "`fprintf`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "0dc36d3f-6713-3b95-af75-1386fd1f48fa",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/kps/kps.cpp"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 3,
                  "endLine": 233,
                  "endColumn": 9,
                  "charOffset": 9108,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "616b90e8-39b4-3366-a3a4-d6c5d9c859bb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/kps/kps.cpp"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 3,
                  "endLine": 234,
                  "endColumn": 9,
                  "charOffset": 9184,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "0a266d97-e294-368a-89a3-ca6eb779760e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/kps/kps.cpp"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 3,
                  "endLine": 231,
                  "endColumn": 9,
                  "charOffset": 8982,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "9e8ab1f6-daa0-343a-b77c-1acbc838b802",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/kps/kps.cpp"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 3,
                  "endLine": 232,
                  "endColumn": 9,
                  "charOffset": 9058,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "5058c66b-e01b-3e47-ae5a-1e5345a77d2a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/kps/kps.cpp"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 3,
                  "endLine": 229,
                  "endColumn": 9,
                  "charOffset": 8868,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "7baf7a1a-ff3c-34ce-b007-5922423ea701",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/kps/kps.cpp"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 3,
                  "endLine": 230,
                  "endColumn": 9,
                  "charOffset": 8920,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "6fb8cdc2-c68b-310e-b609-3b4be96b9741",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/kps/kps.cpp"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 3,
                  "endLine": 228,
                  "endColumn": 9,
                  "charOffset": 8792,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "5965d1c0-ed47-3799-951e-e1b005d1c77b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/kps/kps.cpp"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 3,
                  "endLine": 227,
                  "endColumn": 9,
                  "charOffset": 8743,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "e2724d18-59d3-317c-89c3-51c74f63dd13",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/kps/kps.cpp"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 3,
                  "endLine": 225,
                  "endColumn": 9,
                  "charOffset": 8608,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "38bd9dba-28c5-3e9d-b520-68e8dbf39cfa",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/kps/kps.cpp"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 3,
                  "endLine": 226,
                  "endColumn": 9,
                  "charOffset": 8668,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "427c4db7-1674-3049-81cd-c1440d6abe3a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/runtime/core/machine.cpp"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 22,
                  "endLine": 145,
                  "endColumn": 28,
                  "charOffset": 3916,
                  "charLength": 6,
                  "snippet": {
                    "text": "getenv",
                    "rendered": {
                      "text": "getenv",
                      "markdown": "`getenv`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "dc1054e8-260a-32bd-a356-9d0908e43b95",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/runtime/core/machine.cpp"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 21,
                  "endLine": 113,
                  "endColumn": 25,
                  "charOffset": 3094,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "91c5769e-962e-3a29-bcb5-eb16561a82e5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/runtime/core/machine.cpp"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 31,
                  "endLine": 115,
                  "endColumn": 35,
                  "charOffset": 3184,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "41ba1b3d-639f-3b69-bbcc-64e3b8abcdcc",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/helloworld_dGPU_sync/hw.cpp"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 18,
                  "endLine": 69,
                  "endColumn": 22,
                  "charOffset": 1978,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "ba29ce7f-1ba9-3f8f-a337-dcb88af5985f",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (strlen)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/helloworld_dGPU_sync/hw.cpp"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 21,
                  "endLine": 38,
                  "endColumn": 34,
                  "charOffset": 1002,
                  "charLength": 13,
                  "snippet": {
                    "text": "strlen(input)",
                    "rendered": {
                      "text": "strlen(input)",
                      "markdown": "`strlen(input)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "examples/runtime/helloworld_dGPU_sync/hw.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1002,
                        "charLength": 13
                      },
                      "insertedContent": {
                        "text": "strlen_s(input, <size of input>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "examples/runtime/helloworld_dGPU_sync/hw.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1002,
                        "charLength": 13
                      },
                      "insertedContent": {
                        "text": "strnlen(input, <size of input>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "47d387c1-b649-3e7c-a4fe-b0b8dc8550fc",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (strlen)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/helloworld_dGPU/hw.cpp"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 18,
                  "endLine": 55,
                  "endColumn": 31,
                  "charOffset": 1613,
                  "charLength": 13,
                  "snippet": {
                    "text": "strlen(input)",
                    "rendered": {
                      "text": "strlen(input)",
                      "markdown": "`strlen(input)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "examples/runtime/helloworld_dGPU/hw.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1613,
                        "charLength": 13
                      },
                      "insertedContent": {
                        "text": "strlen_s(input, <size of input>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "examples/runtime/helloworld_dGPU/hw.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1613,
                        "charLength": 13
                      },
                      "insertedContent": {
                        "text": "strnlen(input, <size of input>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "47abf0f2-852c-3edf-ba07-9d3ac488ccb0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/helloworld_dGPU/hw.cpp"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 32,
                  "endLine": 62,
                  "endColumn": 36,
                  "charOffset": 1868,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "0c5fe526-fbaf-34e0-9bf2-80a0d7ff4c34",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Identified\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/needleman-wunsch/nw.cpp"
                },
                "region": {
                  "startLine": 456,
                  "startColumn": 16,
                  "endLine": 456,
                  "endColumn": 21,
                  "charOffset": 17485,
                  "charLength": 5,
                  "snippet": {
                    "text": "fopen",
                    "rendered": {
                      "text": "fopen",
                      "markdown": "`fopen`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "9c0cf185-aea5-3e50-8015-35f572c3ff71",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid using system time or static value for randomness seeding."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/needleman-wunsch/nw.cpp"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 4,
                  "endLine": 175,
                  "endColumn": 12,
                  "charOffset": 6071,
                  "charLength": 8,
                  "snippet": {
                    "text": "srand(7)",
                    "rendered": {
                      "text": "srand(7)",
                      "markdown": "`srand(7)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.WeakRandomness"
            ]
          }
        },
        {
          "ruleId": "59565030-916d-3880-b2ea-1b8ffb1baad2",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (malloc)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/needleman-wunsch/nw.cpp"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 29,
                  "endLine": 173,
                  "endColumn": 70,
                  "charOffset": 6021,
                  "charLength": 41,
                  "snippet": {
                    "text": "malloc( max_rows * max_cols * sizeof(int)",
                    "rendered": {
                      "text": "malloc( max_rows * max_cols * sizeof(int)",
                      "markdown": "`malloc( max_rows * max_cols * sizeof(int)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "examples/runtime/needleman-wunsch/nw.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6021,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "be40ef16-2a09-3686-9fc3-3578ea3bc697",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/needleman-wunsch/nw.cpp"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 7,
                  "endLine": 159,
                  "endColumn": 11,
                  "charOffset": 5599,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "11fcec0d-191a-31ca-857e-77ddbf925690",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/needleman-wunsch/nw.cpp"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 19,
                  "endLine": 152,
                  "endColumn": 23,
                  "charOffset": 5497,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "5fa1605d-2e00-351f-a8c9-97c42e763617",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/needleman-wunsch/nw.cpp"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 18,
                  "endLine": 151,
                  "endColumn": 22,
                  "charOffset": 5463,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "01b96cce-4ec6-3867-b23c-a5cc8c7e376f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/needleman-wunsch/nw.cpp"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 19,
                  "endLine": 150,
                  "endColumn": 23,
                  "charOffset": 5430,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "f3f6aef0-d57f-3ebb-9247-9be9bf73f3e0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Identified\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/needleman-wunsch/nw.cpp"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 19,
                  "endLine": 149,
                  "endColumn": 23,
                  "charOffset": 5396,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "8d4352a4-ad8c-38f2-bcab-806a5ea47677",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (strlen)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/c_extension/helloworld_dGPU/HelloWorld.cpp"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 23,
                  "endLine": 32,
                  "endColumn": 36,
                  "charOffset": 1203,
                  "charLength": 13,
                  "snippet": {
                    "text": "strlen(input)",
                    "rendered": {
                      "text": "strlen(input)",
                      "markdown": "`strlen(input)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "examples/c_extension/helloworld_dGPU/HelloWorld.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1203,
                        "charLength": 13
                      },
                      "insertedContent": {
                        "text": "strlen_s(input, <size of input>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "examples/c_extension/helloworld_dGPU/HelloWorld.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1203,
                        "charLength": 13
                      },
                      "insertedContent": {
                        "text": "strnlen(input, <size of input>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "b8869257-9f8a-3b30-9439-13f9bdeda2cf",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Identified\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/device_runtime/device_rt.cpp"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 6,
                  "endLine": 193,
                  "endColumn": 13,
                  "charOffset": 7654,
                  "charLength": 7,
                  "snippet": {
                    "text": "fprintf",
                    "rendered": {
                      "text": "fprintf",
                      "markdown": "`fprintf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "e87eb994-05d2-3226-adfd-284a2f797254",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (strlen)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/c_extension/helloworld/HelloWorld.cpp"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 23,
                  "endLine": 27,
                  "endColumn": 36,
                  "charOffset": 1076,
                  "charLength": 13,
                  "snippet": {
                    "text": "strlen(input)",
                    "rendered": {
                      "text": "strlen(input)",
                      "markdown": "`strlen(input)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "examples/c_extension/helloworld/HelloWorld.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1076,
                        "charLength": 13
                      },
                      "insertedContent": {
                        "text": "strlen_s(input, <size of input>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "examples/c_extension/helloworld/HelloWorld.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1076,
                        "charLength": 13
                      },
                      "insertedContent": {
                        "text": "strnlen(input, <size of input>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "2ca5f4c4-b20f-395d-bced-42fc54ab5bb9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/pcie_bw/pcie_bw.cpp"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 4,
                  "endLine": 110,
                  "endColumn": 10,
                  "charOffset": 3600,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "aa9cf7ef-6721-30ad-90ea-2e61b7df5227",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/pcie_bw/pcie_bw.cpp"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 4,
                  "endLine": 109,
                  "endColumn": 10,
                  "charOffset": 3570,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "2ace687a-f1d4-3c06-8f76-2a87040c1c94",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/pcie_bw/pcie_bw.cpp"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 2,
                  "endLine": 68,
                  "endColumn": 8,
                  "charOffset": 2150,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "5d1d432b-37c1-3216-b0b7-ffbabfb16d48",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/pcie_bw/pcie_bw.cpp"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 32,
                  "endLine": 45,
                  "endColumn": 36,
                  "charOffset": 1504,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "cd056936-8bde-33d5-a0c8-1549a4190baf",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/c_extension/fibonacci/fibonacci.cpp"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 12,
                  "endLine": 64,
                  "endColumn": 16,
                  "charOffset": 1789,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "eca59ae7-f4c2-376e-a716-2128904c0bf0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Identified\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/c_extension/eps/eps.cpp"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 18,
                  "endLine": 59,
                  "endColumn": 22,
                  "charOffset": 1941,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "8419ccd7-e230-36dd-8bac-3fef7d00f45e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/c_extension/eps/eps.cpp"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 17,
                  "endLine": 60,
                  "endColumn": 21,
                  "charOffset": 1973,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "90a2bc8b-3331-3fb1-b313-b9b16b49b6cd",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (strlen)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/helloworld/hw.cpp"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 21,
                  "endLine": 53,
                  "endColumn": 34,
                  "charOffset": 1605,
                  "charLength": 13,
                  "snippet": {
                    "text": "strlen(input)",
                    "rendered": {
                      "text": "strlen(input)",
                      "markdown": "`strlen(input)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "examples/runtime/helloworld/hw.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1605,
                        "charLength": 13
                      },
                      "insertedContent": {
                        "text": "strlen_s(input, <size of input>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "examples/runtime/helloworld/hw.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1605,
                        "charLength": 13
                      },
                      "insertedContent": {
                        "text": "strnlen(input, <size of input>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "62853982-11b9-3c95-bb60-cd8da72b8f6f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/helloworld_dGPU_async/hw.cpp"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 32,
                  "endLine": 61,
                  "endColumn": 36,
                  "charOffset": 1918,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "c3dab8bd-d6ac-349f-8bb6-fa4f9bdc65bc",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (strlen)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/helloworld_dGPU_async/hw.cpp"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 21,
                  "endLine": 54,
                  "endColumn": 34,
                  "charOffset": 1663,
                  "charLength": 13,
                  "snippet": {
                    "text": "strlen(input)",
                    "rendered": {
                      "text": "strlen(input)",
                      "markdown": "`strlen(input)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "examples/runtime/helloworld_dGPU_async/hw.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1663,
                        "charLength": 13
                      },
                      "insertedContent": {
                        "text": "strlen_s(input, <size of input>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "examples/runtime/helloworld_dGPU_async/hw.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1663,
                        "charLength": 13
                      },
                      "insertedContent": {
                        "text": "strnlen(input, <size of input>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "0377e063-05a2-36d2-88d5-e22e64ec3385",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/interop/globalsymbol/globalsymbol.cpp"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 34,
                  "endLine": 51,
                  "endColumn": 38,
                  "charOffset": 1557,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "0cca6901-634b-342d-960c-0e3812d0d496",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/helloworld_printf/hw_host.cpp"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 18,
                  "endLine": 67,
                  "endColumn": 22,
                  "charOffset": 1919,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "9d34c7a2-30c5-328a-b446-d241d888278d",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (malloc)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/interop/hsainfo/hsainfo.cpp"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 42,
                  "endLine": 223,
                  "endColumn": 63,
                  "charOffset": 7610,
                  "charLength": 21,
                  "snippet": {
                    "text": "malloc(full_name_len)",
                    "rendered": {
                      "text": "malloc(full_name_len)",
                      "markdown": "`malloc(full_name_len)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "examples/interop/hsainfo/hsainfo.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7610,
                        "charLength": 21
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "03cb2c5d-7ea2-386c-881f-927c17dc914f",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (strlen)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/helloworld_printf/hw_host.cpp"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 21,
                  "endLine": 38,
                  "endColumn": 34,
                  "charOffset": 1066,
                  "charLength": 13,
                  "snippet": {
                    "text": "strlen(input)",
                    "rendered": {
                      "text": "strlen(input)",
                      "markdown": "`strlen(input)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "examples/runtime/helloworld_printf/hw_host.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1066,
                        "charLength": 13
                      },
                      "insertedContent": {
                        "text": "strlen_s(input, <size of input>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "examples/runtime/helloworld_printf/hw_host.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1066,
                        "charLength": 13
                      },
                      "insertedContent": {
                        "text": "strnlen(input, <size of input>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "bd09cfd8-00a5-3d10-bfc6-70d85e454afd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/c_extension/kps/kps.cpp"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 3,
                  "endLine": 204,
                  "endColumn": 9,
                  "charOffset": 7802,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "1fb4afda-8330-3446-a672-4824d0c25d4e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/c_extension/kps/kps.cpp"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 3,
                  "endLine": 203,
                  "endColumn": 9,
                  "charOffset": 7726,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "f314fe8c-af21-3e0b-bc19-48cd69960441",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/c_extension/kps/kps.cpp"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 3,
                  "endLine": 202,
                  "endColumn": 9,
                  "charOffset": 7676,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "af1029d0-2569-3996-950e-10c4c5a4bc88",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/c_extension/kps/kps.cpp"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 3,
                  "endLine": 201,
                  "endColumn": 9,
                  "charOffset": 7600,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "cde944cd-531c-3ea6-a1c4-5c5c6071ede5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/c_extension/kps/kps.cpp"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 3,
                  "endLine": 200,
                  "endColumn": 9,
                  "charOffset": 7538,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "877e2361-4710-3375-98a6-8a35d31d7c86",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/c_extension/kps/kps.cpp"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 3,
                  "endLine": 199,
                  "endColumn": 9,
                  "charOffset": 7486,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "3f3eebe1-f401-37ab-9ed0-3ed6b60964d7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/c_extension/kps/kps.cpp"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 3,
                  "endLine": 198,
                  "endColumn": 9,
                  "charOffset": 7410,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "c19c1ad9-dd66-39f4-b9e9-abc3425235d6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/c_extension/kps/kps.cpp"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 3,
                  "endLine": 197,
                  "endColumn": 9,
                  "charOffset": 7361,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "402f026b-6062-3268-9170-c46034eed28d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/c_extension/kps/kps.cpp"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 3,
                  "endLine": 196,
                  "endColumn": 9,
                  "charOffset": 7286,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "5e00064f-8b59-3e7f-90d9-5e0c6ded8c83",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/c_extension/kps/kps.cpp"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 3,
                  "endLine": 195,
                  "endColumn": 9,
                  "charOffset": 7226,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "c4f2648d-abc2-3d01-8986-0bcfdc675244",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/c_extension/kps/kps.cpp"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 3,
                  "endLine": 194,
                  "endColumn": 9,
                  "charOffset": 7175,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "2b92113f-baf7-352f-a8ed-931f914de583",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/c_extension/kps/kps.cpp"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 3,
                  "endLine": 193,
                  "endColumn": 9,
                  "charOffset": 7100,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "94520254-f900-32d0-9b9e-a60ce73203f2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/c_extension/kps/kps.cpp"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 3,
                  "endLine": 192,
                  "endColumn": 9,
                  "charOffset": 7051,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "5a82b1d1-9c13-3518-8730-e64164901dc9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/c_extension/kps/kps.cpp"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 3,
                  "endLine": 191,
                  "endColumn": 9,
                  "charOffset": 6976,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "7ed2b1bd-8606-322d-9b0e-5ee7bd4d7284",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/c_extension/kps/kps.cpp"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 3,
                  "endLine": 190,
                  "endColumn": 9,
                  "charOffset": 6914,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "7f3545fc-fedb-3514-b3cc-0133eec3bc44",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/runtime/needleman-wunsch/nw.cpp"
                },
                "region": {
                  "startLine": 451,
                  "startColumn": 4,
                  "endLine": 451,
                  "endColumn": 77,
                  "charOffset": 17356,
                  "charLength": 73,
                  "snippet": {
                    "text": "memcpy(output_itemsets, input_itemsets, max_cols * max_rows * sizeof(int)",
                    "rendered": {
                      "text": "memcpy(output_itemsets, input_itemsets, max_cols * max_rows * sizeof(int)",
                      "markdown": "`memcpy(output_itemsets, input_itemsets, max_cols * max_rows * sizeof(int)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "examples/runtime/needleman-wunsch/nw.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17356,
                        "charLength": 73
                      },
                      "insertedContent": {
                        "text": "memcpy_s(output_itemsets, <size of output_itemsets>,  input_itemsets,  max_cols * max_rows * sizeof(int)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "a27793e9-6968-30df-be4a-631683790b2c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/c_extension/kps/kps.cpp"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 3,
                  "endLine": 189,
                  "endColumn": 9,
                  "charOffset": 6863,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "c27159d3-03cb-3d79-9ab1-b9091d125a59",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/c_extension/kps/kps.cpp"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 3,
                  "endLine": 188,
                  "endColumn": 9,
                  "charOffset": 6788,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "ccf5eade-9061-3669-9202-ee130beb25d3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/c_extension/kps/kps.cpp"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 3,
                  "endLine": 187,
                  "endColumn": 9,
                  "charOffset": 6739,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "528df1b3-ac0d-3526-bc8b-a5f8ee487748",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/c_extension/kps/kps.cpp"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 3,
                  "endLine": 186,
                  "endColumn": 9,
                  "charOffset": 6664,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "b1c5b695-6144-36a3-a61c-785dc043d07e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/c_extension/kps/kps.cpp"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 3,
                  "endLine": 99,
                  "endColumn": 9,
                  "charOffset": 3397,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "4d6bfdf3-ecbd-31fd-8f25-44724c259b17",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/c_extension/kps/kps.cpp"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 3,
                  "endLine": 185,
                  "endColumn": 9,
                  "charOffset": 6605,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "841fe334-c1d5-3eb8-b8dc-2c2fbe193251",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/c_extension/helloworld_dGPU/HelloWorld.cpp"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 4,
                  "endLine": 36,
                  "endColumn": 39,
                  "charOffset": 1365,
                  "charLength": 35,
                  "snippet": {
                    "text": "memcpy(input_gpu, input, strlength)",
                    "rendered": {
                      "text": "memcpy(input_gpu, input, strlength)",
                      "markdown": "`memcpy(input_gpu, input, strlength)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "examples/c_extension/helloworld_dGPU/HelloWorld.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1365,
                        "charLength": 35
                      },
                      "insertedContent": {
                        "text": "memcpy_s(input_gpu, <size of input_gpu>,  input,  strlength)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}